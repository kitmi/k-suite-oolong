import '<oolong>/types'
import 'common'
import 'person'
import 'organization'
import 'message'

type
  userStatus : enum values("inactive", "active", "disabled", "forbidden", "deleted")  

const
  ADMIN_ROCKIE_ID = 1
  ADMIN_KERR_ID = 2
  TEST_STAFF_USER_ID1 = 100
  TEST_STAFF_USER_ID2 = 101
  TEST_LAW_FIRM_USER_ID = 1000
  TEST_SOLICITOR_USER_ID = 1001
  TEST_COM_USER_ID1 = 2000 
  TEST_COM_USER_ID2 = 2001   
  TEST_INV_USER_ID1 = 2002
  TEST_INV_USER_ID2 = 2003

entity userType extends dictionary
  -- "User Types"
  data [
    { code: 'LVA', name: 'LEVO Admin', desc: 'LEVO system administrator' },
    { code: 'LVU', name: 'LEVO User', desc: 'LEVO operation team user' },        
    { code: 'LF', name: 'Legal Firm User', desc: 'Consumer user as legal firm' },    
    { code: 'LI', name: 'Solicitor User', desc: 'Consumer user as individual solicitor' },
    { code: 'CC', name: 'Company User', desc: 'Consumer user as company' },
    { code: 'IC', name: 'Individual User', desc: 'Consumer user as individual' },
    { code: 'CS', name: 'Company Service Provider', desc: 'Service provider user as company' },
    { code: 'IS', name: 'Individual Service Provider', desc: 'Service provider user as individual' }
  ]

entity user
  -- "User & Preferences"
  mixes CustomUser
  with    
    autoId({ startFrom: 10000 })
    createTimestamp
    updateTimestamp
    logicalDeletion({"status":"deleted"})
    stateTracking("status")

  has   
    locale : text default("en_AU") -- "User Locale"    
    status : userStatus default("inactive") -- "User Status"

  associations
    belongsTo person optional
    belongsTo company optional
    refersTo userType as type
    hasMany user connectedBy userContact.user1 as contacts optional
    hasMany user connectedBy userContact.user2 as contactOf optional
    hasMany userMessage being sender as outMessages
    hasMany userMessage being receiver as inMessages
    
    hasMany 
      userMessage :
        when being sender with @contacts.user2 == receiver
        when being receiver with @contacts.user2 == sender
      as allMessages    

  data [
    {
      id: ADMIN_ROCKIE_ID,   
      type: 'LVA',   
      person: PERSON_ROCKIE_ID,
      status: 'active'
    },
    {
      id: ADMIN_KERR_ID,   
      type: 'LVA',   
      person: PERSON_KERR_ID,
      status: 'active'
    },
    {
      id: TEST_STAFF_USER_ID1,   
      type: 'LVU',  
      person: PERSON_JASON_ID,
      status: 'active'
    },
    {
      id: TEST_STAFF_USER_ID2,   
      type: 'LVU',   
      person: PERSON_MIYA_ID,
      status: 'active'
    },
    {
      id: TEST_LAW_FIRM_USER_ID,   
      type: 'LF',   
      company: COMPANY_WEIHENG_ID,
      status: 'active'
    },
    {
      id: TEST_SOLICITOR_USER_ID,   
      type: 'LI',   
      person: PERSON_JAE_ID,
      status: 'active'
    },
    {
      id: TEST_COM_USER_ID1,   
      type: 'CC',   
      company: COMPANY_KIT_ID,
      status: 'active'
    },
    {
      id: TEST_COM_USER_ID2,   
      type: 'CC',   
      company: COMPANY_KS_ID,
      status: 'active'
    },
    {
      id: TEST_INV_USER_ID1,   
      type: 'IC',   
      person: PERSON_PETER_ID,
      status: 'active'
    },
    {
      id: TEST_INV_USER_ID2,   
      type: 'IC',   
      person: PERSON_ETHAN_ID,
      status: 'active'
    }
  ]

/*view latestMessageByContact
  from 
    allMessages => msg 
    
  select 
    contact :
      when id == msg.sender => msg.receiver
      when id == msg.receiver => msg.sender
    latest : max(msg.statusSentTimestamp) 
  groupBy contact   */  

entity userContact
  -- "User Contacts"
  with
    autoId
    createTimestamp
    logicalDeletion
  has
    commentName : name optional
    blackListed : boolean optional
    messagePinned : boolean optional -- "Whether to show in latest message list, shown if pinned"
  associations  
    refersTo user as user1
    refersTo user as user2
  data [
    { user1: ADMIN_ROCKIE_ID, user2: ADMIN_KERR_ID, commentName: 'Fat Kerr', blackListed: true },
    { user1: ADMIN_ROCKIE_ID, user2: TEST_STAFF_USER_ID1, commentName: 'Jason', messagePinned: true },
    { user1: ADMIN_ROCKIE_ID, user2: TEST_STAFF_USER_ID2, commentName: 'Miya', messagePinned: true },
    { user1: ADMIN_KERR_ID, user2: ADMIN_ROCKIE_ID },
    { user1: ADMIN_KERR_ID, user2: TEST_STAFF_USER_ID1 },
    { user1: ADMIN_KERR_ID, user2: TEST_STAFF_USER_ID2 },
    { user1: TEST_STAFF_USER_ID1, user2: TEST_STAFF_USER_ID2, messagePinned: true }
  ]

