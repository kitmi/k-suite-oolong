"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  generateDisplayName
} = require('./OolUtils');

const {
  isNothing,
  isQuotedWith
} = require('../utils/lang');

const KW_NAMESPACE = 'import';
const KW_SCHEMA = 'schema';
const KW_ENTITIES = 'entities';
const KW_ENTITY_AS_ALIAS = 'as';
const KW_TYPE_DEFINE = 'type';
const KW_ENTITY = 'entity';
const KW_CODE = 'code';
const KW_COMMENT = '--';
const KW_WITH_FEATURE = 'with';
const KW_FIELDS = 'has';
const KW_ASSOCIATIONS = 'associations';
const KW_KEY = 'key';
const KW_INDEXES = 'index';

const Types = require('../runtime/types');

const OolTypes = require('./OolTypes');

class OolCodeGen {
  static transform(json, options) {
    let codeGen = new OolCodeGen(options);
    return codeGen.generate(json);
  }

  constructor(options) {
    this.indented = 0;
    this.content = '';
    this.options = options;
  }

  generate(json) {
    this.generateObject(json);
    return this.content;
  }

  appendLine(line) {
    if (line) {
      if (arguments.length > 1) {
        line = [...arguments].join(' ');
      }

      this.content += (this.indented > 0 ? _.repeat(' ', this.indented) : '') + line + '\n';
    } else {
      this.content += '\n';
    }

    return this;
  }

  indent() {
    this.indented += 2;
    return this;
  }

  dedent() {
    const _checkPostcondition = it => {
      if (!(this.indented >= 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    this.indented -= 2;
    return _checkPostcondition(this);
  }

  generateObject(obj) {
    _.forOwn(obj, (v, k) => {
      let generateMethod = 'generate_' + k;

      if (generateMethod in this) {
        return this[generateMethod](v);
      }

      throw new Error('to be implemented, object: ' + k);
    });
  }

  generate_namespace(namespaces) {
    const _checkPostcondition2 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!Array.isArray(namespaces)) {
      throw new Error('Invalid namespaces.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    if (namespaces.length > 0) {
      this.appendLine(KW_NAMESPACE).indent();
      namespaces.forEach(ns => {
        this.appendLine(Util.quote(ns, "'"));
      });
      this.dedent().appendLine();
    }

    _checkPostcondition2();
  }

  generate_schema(schema) {
    const _checkPostcondition3 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    _.forOwn(schema, (schemaInfo, name) => {
      this.appendLine(KW_SCHEMA, Util.quote(name, "'")).indent();

      if (schemaInfo.entities) {
        this.appendLine(KW_ENTITIES).indent();
        schemaInfo.entities.forEach(entityEntry => {
          if (entityEntry.alias) {
            this.appendLine(entityEntry.entity, KW_ENTITY_AS_ALIAS, entityEntry.alias);
          } else {
            this.appendLine(entityEntry.entity);
          }
        });
        this.dedent().appendLine();
      }

      this.dedent();
    });

    _checkPostcondition3();
  }

  generate_type(types) {
    const _checkPostcondition4 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!_.isPlainObject(types)) {
      throw new Error('Invalid types.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    if (!_.isEmpty(types)) {
      this.appendLine(KW_TYPE_DEFINE).indent();

      _.forOwn(types, (type, name) => {
        let lineInfo = [name, ':', type.type];

        this._translateType(type, lineInfo);

        this.appendLine(...lineInfo);
      });

      this.dedent().appendLine();
    }

    _checkPostcondition4();
  }

  generate_field_comment(entityName, colName) {
    let colNameFullSnake = _.trimStart(_.snakeCase(colName), '_');

    let [colNameFirstWord, colNameRest] = colNameFullSnake.split('_', 2);
    let result;

    let entityNameFullSnake = _.trim(_.snakeCase(entityName), '_');

    if (_.endsWith(entityNameFullSnake, colNameFirstWord)) {
      result = entityNameFullSnake + '_' + colNameRest;
    } else {
      result = entityNameFullSnake + '_' + colNameFullSnake;
    }

    return generateDisplayName(result);
  }

  generate_entity(entities) {
    const _checkPostcondition5 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!_.isPlainObject(entities)) {
      throw new Error('Invalid entities.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    _.forOwn(entities, (entity, enityName) => {
      this.appendLine(KW_ENTITY, enityName).indent();

      if (entity.source) {
        this.appendLine(KW_CODE, Util.quote(entity.source));
      }

      this.appendLine(KW_COMMENT, Util.quote(entity.comment || generateDisplayName(enityName)));
      let hasAutoId = false;

      if (!_.isEmpty(entity.features)) {
        this.appendLine(KW_WITH_FEATURE).indent();
        entity.features.forEach(feature => {
          if (typeof feature === 'string') {
            feature = {
              name: feature
            };
          }

          if (feature.name === 'autoId') {
            hasAutoId = true;
          }

          if (feature.args) {
            this.appendLine(feature.name + '(' + feature.args.map(a => JSON.stringify(a)).join(', ') + ')');
          } else {
            this.appendLine(feature.name);
          }
        });
        this.dedent();
      }

      if (!_.isEmpty(entity.fields)) {
        this.appendLine().appendLine(KW_FIELDS).indent();

        _.forOwn(entity.fields, (field, name) => {
          if (!field.type) {
            throw new Error("Assertion failed: field.type");
          }

          let lineInfo = [];
          lineInfo.push(Types.Builtin.has(name) ? Util.quote(name) : name);

          if (field.type !== name) {
            lineInfo.push(':');
            lineInfo.push(field.type);
          }

          this._translateType(field, lineInfo);

          lineInfo.push(KW_COMMENT + ' ' + (field.comment || Util.quote(this.generate_field_comment(enityName, name))));
          this.appendLine(...lineInfo);
        });

        this.dedent();
      }

      if (!_.isEmpty(entity.associations)) {
        this.appendLine().appendLine(KW_ASSOCIATIONS).indent();
        entity.associations.forEach(({
          type,
          from,
          entity,
          through
        }) => {
          if (from) {
            this.appendLine(type, Util.quote(entity, "'"), 'as', Util.quote(from, "'"));
          } else if (through) {
            this.appendLine(type, Util.quote(entity, "'"), 'through', Util.quote(through, "'"));
          } else {
            this.appendLine(type, Util.quote(entity, "'"));
          }
        });
        this.dedent();
      }

      if (entity.key && !hasAutoId) {
        let key = Array.isArray(entity.key) && entity.key.length === 1 ? entity.key[0] : entity.key;

        if (Array.isArray(key)) {
          this.appendLine().appendLine(KW_KEY, '[ ' + key.join(', ') + ' ]');
        } else {
          this.appendLine().appendLine(KW_KEY, key);
        }
      }

      if (!_.isEmpty(entity.indexes)) {
        this.appendLine().appendLine(KW_INDEXES).indent();
        entity.indexes.forEach(i => {
          let indexInfo = [];

          if (Array.isArray(i.fields)) {
            indexInfo.push('[' + i.fields.join(', ') + ']');
          } else {
            indexInfo.push(i.fields);
          }

          if (i.unique) {
            indexInfo.push('is');
            indexInfo.push('unique');
          }

          this.appendLine(...indexInfo);
        });
        this.dedent();
      }

      this.dedent();
    });

    _checkPostcondition5();
  }

  _translateType(field, lineInfo) {
    let extraTypeInfo = _.omit(field, ['type', 'modifiers', 'name']);

    _.forOwn(extraTypeInfo, (v, k) => {
      if (k === 'comment') return;

      if (typeof v === 'boolean' || isNothing(v)) {
        if (v) {
          lineInfo.push(k);
        }
      } else {
        v = _.castArray(v);
        lineInfo.push(k + '(' + this._translateArgs(v) + ')');
      }
    });

    if (field.modifiers) {
      this._translatePipedValue(lineInfo, field);
    }
  }

  _translatePipedValue(lineInfo, value) {
    if (value.modifiers) {
      value.modifiers.forEach(v => {
        switch (v.oolType) {
          case OolTypes.Lang.VALIDATOR:
            lineInfo.push('|~' + this._translateModifier(v));
            break;

          case OolTypes.Lang.PROCESSOR:
            lineInfo.push('|>' + this._translateModifier(v));
            break;

          case OolTypes.Lang.ACTIVATOR:
            lineInfo.push('|=' + this._translateModifier(v));
            break;

          default:
            throw new Error(`Unknown modifier type: "${v.oolType}"!`);
        }
      });
    }
  }

  _translateModifier(f) {
    let r = f.name;

    if (!_.isEmpty(f.args)) {
      r += '(';
      r += this._translateArgs(f.args);
      r += ')';
    }

    return r;
  }

  _translateArgs(args) {
    return args.map(a => this._translateArg(a)).join(', ');
  }

  _translateArg(a) {
    if (_.isPlainObject(a) && a.hasOwnProperty('oolType')) {
      if (a.oolType === 'PipedValue') {
        let pipeline = [this._translateArg(a.value)];

        if (a.modifiers) {
          this._translatePipedValue(pipeline, a);
        }

        return pipeline.join(' ');
      } else if (a.oolType === 'ObjectReference') {
        return '@' + a.name;
      } else {
        throw new Error('Not supported oolType: ' + a.oolType);
      }
    }

    if (typeof a === 'string' && isQuotedWith(a, '/')) return a;
    return JSON.stringify(a);
  }

}

module.exports = OolCodeGen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,