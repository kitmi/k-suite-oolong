"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  glob
} = require('rk-utils');

const Oolong = require('./grammar/oolong');

const OolongParser = Oolong.parser;

const OolTypes = require('./OolTypes');

const Types = require('../runtime/types');

const Entity = require('./Entity');

const Schema = require('./Schema');

const View = require('./View');

const Dataset = require('./Dataset');

const ELEMENT_CLASS_MAP = {
  [OolTypes.Element.ENTITY]: Entity,
  [OolTypes.Element.VIEW]: View,
  [OolTypes.Element.DATASET]: Dataset
};
const OOLONG_SOURCE_EXT = '.ool';
const BUILTINS_PATH = path.resolve(__dirname, 'builtins');

class Linker {
  static getOolongFiles(sourceDir, useJsonSource, recursive) {
    let pattern = '*' + OOLONG_SOURCE_EXT;

    if (useJsonSource) {
      pattern += '.json';
    }

    if (recursive) {
      pattern = '**/' + pattern;
    }

    return glob.sync(path.join(sourceDir, pattern), {
      nodir: true
    });
  }

  constructor(context) {
    this.logger = context.logger;
    this.sourcePath = context.dslSourcePath;
    this.useJsonSource = context.useJsonSource || false;
    this.saveIntermediate = context.saveIntermediate || false;
    this.schemas = {};
    this._oolModules = {};
    this._elementsCache = {};
    this._mapOfReferenceToModuleId = new Map();
  }

  log(level, message, data) {
    if (!this.logger) return;

    if (data) {
      this.logger.log(level, message, data);
    } else {
      this.logger.log(level, message);
    }
  }

  isModuleLoaded(moduleId) {
    return moduleId in this._oolModules;
  }

  getModuleById(moduleId) {
    return this._oolModules[moduleId];
  }

  link(entryFileName) {
    let entryModule = this.loadModule(entryFileName);

    if (!entryModule) {
      throw new Error(`Cannot resolve file "${entryFileName}".`);
    }

    if (_.isEmpty(entryModule.schema)) {
      throw new Error('No schema defined in entry file.');
    }

    _.forOwn(entryModule.schema, (schemaInfo, schemaName) => {
      let schema = new Schema(this, schemaName, entryModule, schemaInfo);
      schema.link();

      if (this.schemas.hasOwnProperty(schemaName)) {
        throw new Error(`Duplicate schema: "${schemaName}".`);
      }

      this.schemas[schemaName] = schema;

      if (this.saveIntermediate) {
        let jsFile = path.resolve(this.sourcePath, entryFileName + '-linked.json');
        fs.writeFileSync(jsFile, JSON.stringify(schema.toJSON(), null, 4));
      }
    });
  }

  loadModule(modulePath) {
    modulePath = path.resolve(this.sourcePath, modulePath);
    let id = this.getModuleIdByPath(modulePath);

    if (this.isModuleLoaded(id)) {
      return this.getModuleById(id);
    }

    if (!fs.existsSync(modulePath)) {
      return undefined;
    }

    let ool = this._compile(modulePath);

    return this._oolModules[id] = ool;
  }

  trackBackType(oolModule, info) {
    if (Types.Builtin.has(info.type)) {
      return info;
    }

    let baseInfo = this.loadElement(oolModule, OolTypes.Element.TYPE, info.type);

    if (!Types.Builtin.has(baseInfo.type)) {
      let uniqueId = this.getElementUniqueId(oolModule, OolTypes.Element.TYPE, value.name);
      let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId.get(uniqueId));
      let rootTypeInfo = this.trackBackType(ownerModule, baseInfo);
      ownerModule.type[baseInfo.type] = rootTypeInfo;
      baseInfo = rootTypeInfo;
    }

    let derivedInfo = { ..._.cloneDeep(_.omit(baseInfo, ['modifiers'])),
      ..._.omit(info, ['type', 'modifiers'])
    };

    if (baseInfo.modifiers || info.modifiers) {
      derivedInfo.modifiers = [...(baseInfo.modifiers || []), ...(info.modifiers || [])];
    }

    if (!derivedInfo.subClass) {
      derivedInfo.subClass = [];
    }

    derivedInfo.subClass.push(info.type);
    return derivedInfo;
  }

  translateOolValue(oolModule, value) {
    if (_.isPlainObject(value)) {
      if (value.oolType === OolTypes.Lang.CONST_REF) {
        let refedValue = this.loadElement(oolModule, OolTypes.Element.CONST, value.name);
        let uniqueId = this.getElementUniqueId(oolModule, OolTypes.Element.CONST, value.name);
        let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId.get(uniqueId));
        return this.translateOolValue(ownerModule, refedValue);
      } else if (value.oolType) {
        throw new Error(`todo: translateOolValue with type: ${value.oolType}`);
      }

      return _.mapValues(value, v => this.translateOolValue(oolModule, v));
    }

    if (Array.isArray(value)) {
      return value.map(v => this.translateOolValue(oolModule, v));
    }

    return value;
  }

  getModuleIdByPath(modulePath) {
    let isBuiltinEntity = _.startsWith(modulePath, BUILTINS_PATH);

    return isBuiltinEntity ? path.relative(BUILTINS_PATH, modulePath) : './' + path.relative(this.sourcePath, modulePath);
  }

  getElementUniqueId(refererModule, elementType, elementName) {
    return elementType + ':' + elementName + '<-' + refererModule.id;
  }

  loadEntity(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.ENTITY, elementName);
  }

  loadType(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.TYPE, elementName);
  }

  loadDataset(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.DATASET, elementName);
  }

  loadView(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.VIEW, elementName);
  }

  loadElement(refererModule, elementType, elementName) {
    let uniqueId = this.getElementUniqueId(refererModule, elementType, elementName);

    if (uniqueId in this._elementsCache) {
      return this._elementsCache[uniqueId];
    }

    let targetModule;

    if (elementType in refererModule && elementName in refererModule[elementType]) {
      targetModule = refererModule;
    } else {
      this.log('verbose', `Searching ${elementType} "${elementName}" from "${refererModule.id}" ...`);

      let index = _.findLastIndex(refererModule.namespace, modulePath => {
        targetModule = this.loadModule(modulePath);
        return targetModule && targetModule[elementType] && elementName in targetModule[elementType];
      });

      if (index === -1) {
        throw new Error(`${elementType} "${elementName}" not found in imported namespaces. Referer: ${refererModule.id}`);
      }
    }

    this.log('verbose', `Found ${elementType} "${elementName}" in "${targetModule.id}". [OK]`);
    let elementSelfId = elementType + ':' + elementName + '@' + targetModule.id;

    if (elementSelfId in this._elementsCache) {
      return this._elementsCache[uniqueId] = this._elementsCache[elementSelfId];
    }

    if (!!this._mapOfReferenceToModuleId.has(uniqueId)) {
      throw new Error(`${elementType} "${elementName}" in "${targetModule.id}" conflicts with ${elementType} in "${this._mapOfReferenceToModuleId.get(uniqueId)}"!`);
    }

    this._mapOfReferenceToModuleId.set(uniqueId, targetModule.id);

    let elementInfo = Object.freeze(targetModule[elementType][elementName]);
    let element;

    if (elementType in ELEMENT_CLASS_MAP) {
      let ElementClass = ELEMENT_CLASS_MAP[elementType];
      element = new ElementClass(this, elementName, targetModule, elementInfo);
      element.link();
    } else {
      element = elementInfo;
    }

    this._elementsCache[elementSelfId] = element;
    this._elementsCache[uniqueId] = element;
    return element;
  }

  _compile(oolFile) {
    let jsFile;

    if (oolFile.endsWith('.json')) {
      jsFile = oolFile;
      oolFile = oolFile.substr(0, oolFile.length - 5);
    } else {
      jsFile = oolFile + '.json';
    }

    let ool, searchExt;

    if (this.useJsonSource) {
      if (!fs.existsSync(jsFile)) {
        throw new Error(`"useJsonSource" enabeld but json file "${jsFile}" not found.`);
      }

      ool = fs.readJsonSync(jsFile);
      searchExt = OOLONG_SOURCE_EXT + '.json';
    } else {
      this.log('debug', 'Compiling ' + oolFile + ' ...');

      try {
        ool = OolongParser.parse(fs.readFileSync(oolFile, 'utf8'));
      } catch (error) {
        throw new Error(`Failed to compile "${oolFile}".\n${error.message || error}`);
      }

      if (!ool) {
        throw new Error('Unknown error occurred while compiling.');
      }

      searchExt = OOLONG_SOURCE_EXT;
    }

    let baseName = path.basename(oolFile, OOLONG_SOURCE_EXT);
    let namespace = [];
    let currentPath = path.dirname(oolFile);

    function expandNs(namespaces, ns, recursive) {
      let stats = fs.statSync(ns);

      if (stats.isFile() && ns.endsWith(searchExt)) {
        namespaces.push(ns);
        return;
      }

      if (stats.isDirectory() && recursive) {
        let files = fs.readdirSync(ns);
        files.forEach(f => expandNs(namespaces, path.join(ns, f), true));
      }
    }

    if (ool.namespace) {
      ool.namespace.forEach(ns => {
        let p;

        if (ns.startsWith('<oolong>/')) {
          ns = path.join(BUILTINS_PATH, ns.substr(9));
        } else if (ns.startsWith('<source>/')) {
          ns = path.join(this.sourcePath, ns.substr(9));
        }

        if (ns.endsWith('/*')) {
          p = path.resolve(currentPath, ns.substr(0, ns.length - 2));
          let files = fs.readdirSync(p);
          files.forEach(f => expandNs(namespace, path.join(p, f), false));
        } else if (ns.endsWith('/**')) {
          p = path.resolve(currentPath, ns.substr(0, ns.length - 3));
          let files = fs.readdirSync(p);
          files.forEach(f => expandNs(namespace, path.join(p, f), true));
        } else {
          namespace.push(path.resolve(currentPath, _.endsWith(ns, OOLONG_SOURCE_EXT) ? ns : ns + OOLONG_SOURCE_EXT));
        }
      });
    }

    ool.namespace = namespace;
    ool.id = this.getModuleIdByPath(oolFile);
    ool.name = baseName;

    if (!this.useJsonSource && this.saveIntermediate) {
      fs.writeFileSync(jsFile, JSON.stringify(ool, null, 4));
    }

    return ool;
  }

}

module.exports = Linker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,