"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  glob
} = require('rk-utils');

const Oolong = require('./grammar/oolong');

const OolongParser = Oolong.parser;

const OolTypes = require('./OolTypes');

const Types = require('../runtime/types');

const Entity = require('./Entity');

const Schema = require('./Schema');

const View = require('./View');

const Dataset = require('./Dataset');

const ELEMENT_CLASS_MAP = {
  [OolTypes.Element.ENTITY]: Entity,
  [OolTypes.Element.VIEW]: View,
  [OolTypes.Element.DATASET]: Dataset
};
const OOLONG_SOURCE_EXT = '.ool';
const BUILTINS_PATH = path.resolve(__dirname, 'builtins');

class Linker {
  static getOolongFiles(sourceDir, useJsonSource, recursive) {
    let pattern = '*' + OOLONG_SOURCE_EXT;

    if (useJsonSource) {
      pattern += '.json';
    }

    if (recursive) {
      pattern = '**/' + pattern;
    }

    return glob.sync(path.join(sourceDir, pattern), {
      nodir: true
    });
  }

  constructor(context) {
    this.logger = context.logger;
    this.sourcePath = context.dslSourcePath;
    this.useJsonSource = context.useJsonSource || false;
    this.saveIntermediate = context.saveIntermediate || false;
    this.schemas = {};
    this._oolModules = {};
    this._elementsCache = {};
    this._mapOfReferenceToModuleId = new Map();
  }

  log(level, message, data) {
    if (!this.logger) return;

    if (data) {
      this.logger.log(level, message, data);
    } else {
      this.logger.log(level, message);
    }
  }

  isModuleLoaded(moduleId) {
    return moduleId in this._oolModules;
  }

  getModuleById(moduleId) {
    return this._oolModules[moduleId];
  }

  link(entryFileName) {
    let entryModule = this.loadModule(entryFileName);

    if (!entryModule) {
      throw new Error(`Cannot resolve file "${entryFileName}".`);
    }

    if (_.isEmpty(entryModule.schema)) {
      throw new Error('No schema defined in entry file.');
    }

    _.forOwn(entryModule.schema, (schemaInfo, schemaName) => {
      let schema = new Schema(this, schemaName, entryModule, schemaInfo);
      schema.link();

      if (this.schemas.hasOwnProperty(schemaName)) {
        throw new Error(`Duplicate schema: "${schemaName}".`);
      }

      this.schemas[schemaName] = schema;

      if (this.saveIntermediate) {
        let jsFile = path.resolve(this.sourcePath, entryFileName + '-linked.json');
        fs.writeFileSync(jsFile, JSON.stringify(schema.toJSON(), null, 4));
      }
    });
  }

  loadModule(modulePath) {
    modulePath = path.resolve(this.sourcePath, modulePath);
    let id = this.getModuleIdByPath(modulePath);

    if (this.isModuleLoaded(id)) {
      return this.getModuleById(id);
    }

    if (!fs.existsSync(modulePath)) {
      return undefined;
    }

    let ool = this._compile(modulePath);

    return this._oolModules[id] = ool;
  }

  trackBackType(oolModule, info) {
    if (Types.Builtin.has(info.type)) {
      return info;
    }

    let baseInfo = this.loadElement(oolModule, OolTypes.Element.TYPE, info.type);

    if (!Types.Builtin.has(baseInfo.type)) {
      let uniqueId = this.getElementUniqueId(oolModule, OolTypes.Element.TYPE, value.name);
      let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId.get(uniqueId));
      let rootTypeInfo = this.trackBackType(ownerModule, baseInfo);
      ownerModule.type[baseInfo.type] = rootTypeInfo;
      baseInfo = rootTypeInfo;
    }

    let derivedInfo = { ..._.cloneDeep(baseInfo),
      ..._.omit(info, 'type')
    };

    if (!derivedInfo.subClass) {
      derivedInfo.subClass = [];
    }

    derivedInfo.subClass.push(info.type);
    return derivedInfo;
  }

  translateOolValue(oolModule, value) {
    if (_.isPlainObject(value)) {
      if (value.oolType === OolTypes.Lang.CONST_REF) {
        let refedValue = this.loadElement(oolModule, OolTypes.Element.CONST, value.name);
        let uniqueId = this.getElementUniqueId(oolModule, OolTypes.Element.CONST, value.name);
        let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId.get(uniqueId));
        return this.translateOolValue(ownerModule, refedValue);
      }

      return _.mapValues(value, v => this.translateOolValue(oolModule, v));
    }

    if (Array.isArray(value)) {
      return value.map(v => this.translateOolValue(oolModule, v));
    }

    return value;
  }

  getModuleIdByPath(modulePath) {
    let isBuiltinEntity = _.startsWith(modulePath, BUILTINS_PATH);

    return isBuiltinEntity ? path.relative(BUILTINS_PATH, modulePath) : './' + path.relative(this.sourcePath, modulePath);
  }

  getElementUniqueId(refererModule, elementType, elementName) {
    return elementType + ':' + elementName + '<-' + refererModule.id;
  }

  loadEntity(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.ENTITY, elementName);
  }

  loadType(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.TYPE, elementName);
  }

  loadDataset(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.DATASET, elementName);
  }

  loadView(refererModule, elementName) {
    return this.loadElement(refererModule, OolTypes.Element.VIEW, elementName);
  }

  loadElement(refererModule, elementType, elementName) {
    let uniqueId = this.getElementUniqueId(refererModule, elementType, elementName);

    if (uniqueId in this._elementsCache) {
      return this._elementsCache[uniqueId];
    }

    let targetModule;

    if (elementType in refererModule && elementName in refererModule[elementType]) {
      if (!!this._elementsCache.hasOwnProperty(elementType + ':' + elementName + '@' + refererModule.id)) {
        throw new Error("Assertion failed: !this._elementsCache.hasOwnProperty(elementType + ':' + elementName + '@' + refererModule.id)");
      }

      targetModule = refererModule;
    } else {
      this.log('verbose', `Searching ${elementType} "${elementName}" from "${refererModule.id}" ...`);

      let index = _.findLastIndex(refererModule.namespace, modulePath => {
        this.log('debug', `Looking for ${elementType} "${elementName}" in "${modulePath}" ...`);
        targetModule = this.loadModule(modulePath);
        return targetModule && targetModule[elementType] && elementName in targetModule[elementType];
      });

      if (index === -1) {
        throw new Error(`${elementType} "${elementName}" not found in imported namespaces.`);
      }
    }

    this.log('verbose', `Found ${elementType} "${elementName}" in "${targetModule.id}". [OK]`);
    let elementSelfId = elementType + ':' + elementName + '@' + targetModule.id;

    if (elementSelfId in this._elementsCache) {
      return this._elementsCache[uniqueId] = this._elementsCache[elementSelfId];
    }

    if (!!this._mapOfReferenceToModuleId.has(uniqueId)) {
      throw new Error(`${elementType} "${elementName}" in "${targetModule.id}" conflicts with ${elementType} in "${this._mapOfReferenceToModuleId.get(uniqueId)}"!`);
    }

    this._mapOfReferenceToModuleId.set(uniqueId, targetModule.id);

    let elementInfo = Object.freeze(targetModule[elementType][elementName]);
    let element;

    if (elementType in ELEMENT_CLASS_MAP) {
      let ElementClass = ELEMENT_CLASS_MAP[elementType];
      element = new ElementClass(this, elementName, targetModule, elementInfo);
      element.link();
    } else {
      element = elementInfo;
    }

    this._elementsCache[elementSelfId] = element;
    this._elementsCache[uniqueId] = element;
    return element;
  }

  _compile(oolFile) {
    let jsFile;

    if (oolFile.endsWith('.json')) {
      jsFile = oolFile;
      oolFile = oolFile.substr(0, oolFile.length - 5);
    } else {
      jsFile = oolFile + '.json';
    }

    let ool, searchExt;

    if (this.useJsonSource) {
      if (!fs.existsSync(jsFile)) {
        throw new Error(`"useJsonSource" enabeld but json file "${jsFile}" not found.`);
      }

      ool = fs.readJsonSync(jsFile);
      searchExt = OOLONG_SOURCE_EXT + '.json';
    } else {
      this.log('debug', 'Compiling ' + oolFile + ' ...');

      try {
        ool = OolongParser.parse(fs.readFileSync(oolFile, 'utf8'));
      } catch (error) {
        throw new Error(`Failed to compile "${oolFile}".\n${error.message || error}`);
      }

      if (!ool) {
        throw new Error('Unknown error occurred while compiling.');
      }

      searchExt = OOLONG_SOURCE_EXT;
    }

    let baseName = path.basename(oolFile, OOLONG_SOURCE_EXT);
    let namespace = [];
    let currentPath = path.dirname(oolFile);

    function expandNs(namespaces, ns, recursive) {
      let stats = fs.statSync(ns);

      if (stats.isFile() && ns.endsWith(searchExt)) {
        namespaces.push(ns);
        return;
      }

      if (stats.isDirectory() && recursive) {
        let files = fs.readdirSync(ns);
        files.forEach(f => expandNs(namespaces, path.join(ns, f), true));
      }
    }

    if (ool.namespace) {
      ool.namespace.forEach(ns => {
        let p;

        if (ns.startsWith('<oolong>/')) {
          ns = path.join(BUILTINS_PATH, ns.substr(9));
        } else if (ns.startsWith('<source>/')) {
          ns = path.join(this.sourcePath, ns.substr(9));
        }

        if (ns.endsWith('/*')) {
          p = path.resolve(currentPath, ns.substr(0, ns.length - 2));
          let files = fs.readdirSync(p);
          files.forEach(f => expandNs(namespace, path.join(p, f), false));
        } else if (ns.endsWith('/**')) {
          p = path.resolve(currentPath, ns.substr(0, ns.length - 3));
          let files = fs.readdirSync(p);
          files.forEach(f => expandNs(namespace, path.join(p, f), true));
        } else {
          namespace.push(path.resolve(currentPath, _.endsWith(ns, OOLONG_SOURCE_EXT) ? ns : ns + OOLONG_SOURCE_EXT));
        }
      });
    }

    ool.namespace = namespace;
    ool.id = this.getModuleIdByPath(oolFile);
    ool.name = baseName;

    if (!this.useJsonSource && this.saveIntermediate) {
      fs.writeFileSync(jsFile, JSON.stringify(ool, null, 4));
    }

    return ool;
  }

}

module.exports = Linker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0xpbmtlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImdsb2IiLCJPb2xvbmciLCJPb2xvbmdQYXJzZXIiLCJwYXJzZXIiLCJPb2xUeXBlcyIsIlR5cGVzIiwiRW50aXR5IiwiU2NoZW1hIiwiVmlldyIsIkRhdGFzZXQiLCJFTEVNRU5UX0NMQVNTX01BUCIsIkVsZW1lbnQiLCJFTlRJVFkiLCJWSUVXIiwiREFUQVNFVCIsIk9PTE9OR19TT1VSQ0VfRVhUIiwiQlVJTFRJTlNfUEFUSCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJMaW5rZXIiLCJnZXRPb2xvbmdGaWxlcyIsInNvdXJjZURpciIsInVzZUpzb25Tb3VyY2UiLCJyZWN1cnNpdmUiLCJwYXR0ZXJuIiwic3luYyIsImpvaW4iLCJub2RpciIsImNvbnN0cnVjdG9yIiwiY29udGV4dCIsImxvZ2dlciIsInNvdXJjZVBhdGgiLCJkc2xTb3VyY2VQYXRoIiwic2F2ZUludGVybWVkaWF0ZSIsInNjaGVtYXMiLCJfb29sTW9kdWxlcyIsIl9lbGVtZW50c0NhY2hlIiwiX21hcE9mUmVmZXJlbmNlVG9Nb2R1bGVJZCIsIk1hcCIsImxvZyIsImxldmVsIiwibWVzc2FnZSIsImRhdGEiLCJpc01vZHVsZUxvYWRlZCIsIm1vZHVsZUlkIiwiZ2V0TW9kdWxlQnlJZCIsImxpbmsiLCJlbnRyeUZpbGVOYW1lIiwiZW50cnlNb2R1bGUiLCJsb2FkTW9kdWxlIiwiRXJyb3IiLCJpc0VtcHR5Iiwic2NoZW1hIiwiZm9yT3duIiwic2NoZW1hSW5mbyIsInNjaGVtYU5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImpzRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJKU09OIiwic3RyaW5naWZ5IiwidG9KU09OIiwibW9kdWxlUGF0aCIsImlkIiwiZ2V0TW9kdWxlSWRCeVBhdGgiLCJleGlzdHNTeW5jIiwidW5kZWZpbmVkIiwib29sIiwiX2NvbXBpbGUiLCJ0cmFja0JhY2tUeXBlIiwib29sTW9kdWxlIiwiaW5mbyIsIkJ1aWx0aW4iLCJoYXMiLCJ0eXBlIiwiYmFzZUluZm8iLCJsb2FkRWxlbWVudCIsIlRZUEUiLCJ1bmlxdWVJZCIsImdldEVsZW1lbnRVbmlxdWVJZCIsInZhbHVlIiwibmFtZSIsIm93bmVyTW9kdWxlIiwiZ2V0Iiwicm9vdFR5cGVJbmZvIiwiZGVyaXZlZEluZm8iLCJjbG9uZURlZXAiLCJvbWl0Iiwic3ViQ2xhc3MiLCJwdXNoIiwidHJhbnNsYXRlT29sVmFsdWUiLCJpc1BsYWluT2JqZWN0Iiwib29sVHlwZSIsIkxhbmciLCJDT05TVF9SRUYiLCJyZWZlZFZhbHVlIiwiQ09OU1QiLCJtYXBWYWx1ZXMiLCJ2IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaXNCdWlsdGluRW50aXR5Iiwic3RhcnRzV2l0aCIsInJlbGF0aXZlIiwicmVmZXJlck1vZHVsZSIsImVsZW1lbnRUeXBlIiwiZWxlbWVudE5hbWUiLCJsb2FkRW50aXR5IiwibG9hZFR5cGUiLCJsb2FkRGF0YXNldCIsImxvYWRWaWV3IiwidGFyZ2V0TW9kdWxlIiwiaW5kZXgiLCJmaW5kTGFzdEluZGV4IiwibmFtZXNwYWNlIiwiZWxlbWVudFNlbGZJZCIsInNldCIsImVsZW1lbnRJbmZvIiwiT2JqZWN0IiwiZnJlZXplIiwiZWxlbWVudCIsIkVsZW1lbnRDbGFzcyIsIm9vbEZpbGUiLCJlbmRzV2l0aCIsInN1YnN0ciIsImxlbmd0aCIsInNlYXJjaEV4dCIsInJlYWRKc29uU3luYyIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwiZXJyb3IiLCJiYXNlTmFtZSIsImJhc2VuYW1lIiwiY3VycmVudFBhdGgiLCJkaXJuYW1lIiwiZXhwYW5kTnMiLCJuYW1lc3BhY2VzIiwibnMiLCJzdGF0cyIsInN0YXRTeW5jIiwiaXNGaWxlIiwiaXNEaXJlY3RvcnkiLCJmaWxlcyIsInJlYWRkaXJTeW5jIiwiZm9yRWFjaCIsImYiLCJwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxN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O0FBQ0FKLFVBQUFBLEtBQUssQ0FBQ0UsT0FBTixDQUFjQyxDQUFDLElBQUlWLFFBQVEsQ0FBQ3JCLFNBQUQsRUFBWXZILElBQUksQ0FBQzhCLElBQUwsQ0FBVXlILENBQVYsRUFBYUQsQ0FBYixDQUFaLEVBQTZCLElBQTdCLENBQTNCO0FBQ0gsU0FKTSxNQUlBO0FBQ0gvQixVQUFBQSxTQUFTLENBQUMxQixJQUFWLENBQWU3RixJQUFJLENBQUNxQixPQUFMLENBQWFxSCxXQUFiLEVBQTBCeEksQ0FBQyxDQUFDOEgsUUFBRixDQUFXYyxFQUFYLEVBQWUzSCxpQkFBZixJQUFvQzJILEVBQXBDLEdBQXlDQSxFQUFFLEdBQUczSCxpQkFBeEUsQ0FBZjtBQUNIO0FBQ0osT0FwQkQ7QUFxQkg7O0FBRURvRCxJQUFBQSxHQUFHLENBQUNnRCxTQUFKLEdBQWdCQSxTQUFoQjtBQUVBaEQsSUFBQUEsR0FBRyxDQUFDSixFQUFKLEdBQVMsS0FBS0MsaUJBQUwsQ0FBdUIyRCxPQUF2QixDQUFUO0FBQ0F4RCxJQUFBQSxHQUFHLENBQUNjLElBQUosR0FBV21ELFFBQVg7O0FBRUEsUUFBSSxDQUFDLEtBQUs5RyxhQUFOLElBQXVCLEtBQUtXLGdCQUFoQyxFQUFrRDtBQUM5Q2xDLE1BQUFBLEVBQUUsQ0FBQzJELGFBQUgsQ0FBaUJELE1BQWpCLEVBQXlCRSxJQUFJLENBQUNDLFNBQUwsQ0FBZU8sR0FBZixFQUFvQixJQUFwQixFQUEwQixDQUExQixDQUF6QjtBQUNIOztBQUVELFdBQU9BLEdBQVA7QUFDSDs7QUExYVE7O0FBNmFiaUYsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEksTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGdsb2IgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IE9vbG9uZyA9IHJlcXVpcmUoJy4vZ3JhbW1hci9vb2xvbmcnKTtcbmNvbnN0IE9vbG9uZ1BhcnNlciA9IE9vbG9uZy5wYXJzZXI7XG5jb25zdCBPb2xUeXBlcyA9IHJlcXVpcmUoJy4vT29sVHlwZXMnKTtcbmNvbnN0IFR5cGVzID0gcmVxdWlyZSgnLi4vcnVudGltZS90eXBlcycpO1xuXG5jb25zdCBFbnRpdHkgPSByZXF1aXJlKCcuL0VudGl0eScpO1xuY29uc3QgU2NoZW1hID0gcmVxdWlyZSgnLi9TY2hlbWEnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuL1ZpZXcnKTtcbmNvbnN0IERhdGFzZXQgPSByZXF1aXJlKCcuL0RhdGFzZXQnKTtcblxuY29uc3QgRUxFTUVOVF9DTEFTU19NQVAgPSB7XG4gICAgW09vbFR5cGVzLkVsZW1lbnQuRU5USVRZXTogRW50aXR5LFxuICAgIFtPb2xUeXBlcy5FbGVtZW50LlZJRVddOiBWaWV3LFxuICAgIFtPb2xUeXBlcy5FbGVtZW50LkRBVEFTRVRdOiBEYXRhc2V0LFxufTtcblxuY29uc3QgT09MT05HX1NPVVJDRV9FWFQgPSAnLm9vbCc7XG5jb25zdCBCVUlMVElOU19QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWx0aW5zJyk7XG5cbi8qKlxuICogTGlua2VyIG9mIG9vbG9uZyBEU0xcbiAqIEBjbGFzcyBPb2xvbmdMaW5rZXJcbiAqL1xuY2xhc3MgTGlua2VyIHtcbiAgICBzdGF0aWMgZ2V0T29sb25nRmlsZXMoc291cmNlRGlyLCB1c2VKc29uU291cmNlLCByZWN1cnNpdmUpIHtcbiAgICAgICAgbGV0IHBhdHRlcm4gPSAnKicgKyBPT0xPTkdfU09VUkNFX0VYVDtcblxuICAgICAgICBpZiAodXNlSnNvblNvdXJjZSkge1xuICAgICAgICAgICAgcGF0dGVybiArPSAnLmpzb24nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgcGF0dGVybiA9ICcqKi8nICsgcGF0dGVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iLnN5bmMocGF0aC5qb2luKHNvdXJjZURpciwgcGF0dGVybiksIHtub2RpcjogdHJ1ZX0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAgICogQHByb3BlcnR5IHtMb2dnZXJ9IGNvbnRleHQubG9nZ2VyIC0gTG9nZ2VyIG9iamVjdFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LmRzbFNvdXJjZVBhdGggLSBPb2xvbmcgc291cmNlIGZpbGVzIHBhdGggICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NvbnRleHQudXNlSnNvblNvdXJjZT1mYWxzZV0gLSBVc2UgLmpzb24gaW50ZXJtZWRpYXRlIHNvdXJjZSBmaWxlIGluc3RlYWQgb2YgLm9vbFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NvbnRleHQuc2F2ZUludGVybWVkaWF0ZT1mYWxzZV0gLSBTYXZlIGludGVybWVkaWF0ZSBzb3VyY2UgZmlsZSB3aGlsZSBsaW5raW5nXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTG9nZ2VyXG4gICAgICAgICAqIEBtZW1iZXIge0xvZ2dlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubG9nZ2VyID0gY29udGV4dC5sb2dnZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9vbG9uZyBzb3VyY2UgZmlsZXMgcGF0aFxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNvdXJjZVBhdGggPSBjb250ZXh0LmRzbFNvdXJjZVBhdGg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZSBqc29uIG9yIG9sc1xuICAgICAgICAgKiBAbWVtYmVyIHtib29sfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51c2VKc29uU291cmNlID0gY29udGV4dC51c2VKc29uU291cmNlIHx8IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYXZlIGludGVybWVkaWF0ZSBmaWxlc1xuICAgICAgICAgKiBAbWVtYmVyIHtib29sfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zYXZlSW50ZXJtZWRpYXRlID0gY29udGV4dC5zYXZlSW50ZXJtZWRpYXRlIHx8IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5rZWQgc2NoZW1hc1xuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3QuPHN0cmluZywgU2NoZW1hPn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZW1hcyA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXJzZWQgb29sb25nIGZpbGVzLCBwYXRoID0+IG1vZHVsZVxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vb2xNb2R1bGVzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVsZW1lbnQgY2FjaGUsIG1hcCBvZiA8cmVmZXJlbmNlSWQsIGVsZW1lbnQ+IGFuZCA8c2VsZklkLCBlbGVtZW50PlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9IFxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZWxlbWVudHNDYWNoZSA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXAgb2YgPHJlZmVyZW5jZUlkLCBtb2R1bGVJZD5cbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbWFwT2ZSZWZlcmVuY2VUb01vZHVsZUlkID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGxvZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXVxuICAgICAqL1xuICAgIGxvZyhsZXZlbCwgbWVzc2FnZSwgZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMubG9nZ2VyKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhsZXZlbCwgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2cobGV2ZWwsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciBhIG1vZHVsZSBpcyBsb2FkZWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc01vZHVsZUxvYWRlZChtb2R1bGVJZCkge1xuICAgICAgICByZXR1cm4gbW9kdWxlSWQgaW4gdGhpcy5fb29sTW9kdWxlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsb2FkZWQgb29sb25lIG1vZHVsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0TW9kdWxlQnlJZChtb2R1bGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb29sTW9kdWxlc1ttb2R1bGVJZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnQgbGlua2luZyBvb2xvbmcgZmlsZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW50cnlGaWxlTmFtZVxuICAgICAqL1xuICAgIGxpbmsoZW50cnlGaWxlTmFtZSkge1xuICAgICAgICAvL2NvbXBpbGUgZW50cnkgZmlsZSAgICAgICAgXG4gICAgICAgIGxldCBlbnRyeU1vZHVsZSA9IHRoaXMubG9hZE1vZHVsZShlbnRyeUZpbGVOYW1lKTtcblxuICAgICAgICBpZiAoIWVudHJ5TW9kdWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXNvbHZlIGZpbGUgXCIke2VudHJ5RmlsZU5hbWV9XCIuYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc0VtcHR5KGVudHJ5TW9kdWxlLnNjaGVtYSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2NoZW1hIGRlZmluZWQgaW4gZW50cnkgZmlsZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uZm9yT3duKGVudHJ5TW9kdWxlLnNjaGVtYSwgKHNjaGVtYUluZm8sIHNjaGVtYU5hbWUpID0+IHtcbiAgICAgICAgICAgIGxldCBzY2hlbWEgPSBuZXcgU2NoZW1hKHRoaXMsIHNjaGVtYU5hbWUsIGVudHJ5TW9kdWxlLCBzY2hlbWFJbmZvKTtcbiAgICAgICAgICAgIHNjaGVtYS5saW5rKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYXMuaGFzT3duUHJvcGVydHkoc2NoZW1hTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBzY2hlbWE6IFwiJHtzY2hlbWFOYW1lfVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zY2hlbWFzW3NjaGVtYU5hbWVdID0gc2NoZW1hO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zYXZlSW50ZXJtZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGpzRmlsZSA9IHBhdGgucmVzb2x2ZSh0aGlzLnNvdXJjZVBhdGgsIGVudHJ5RmlsZU5hbWUgKyAnLWxpbmtlZC5qc29uJyk7XG4gICAgICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhqc0ZpbGUsIEpTT04uc3RyaW5naWZ5KHNjaGVtYS50b0pTT04oKSwgbnVsbCwgNCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTsgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgYSBvb2xvbmcgbW9kdWxlLCByZXR1cm4gdW5kZWZpbmVkIGlmIG5vdCBleGlzdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVQYXRoXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgbG9hZE1vZHVsZShtb2R1bGVQYXRoKSB7ICAgICAgICBcbiAgICAgICAgbW9kdWxlUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLnNvdXJjZVBhdGgsIG1vZHVsZVBhdGgpO1xuXG4gICAgICAgIGxldCBpZCA9IHRoaXMuZ2V0TW9kdWxlSWRCeVBhdGgobW9kdWxlUGF0aCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNNb2R1bGVMb2FkZWQoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNb2R1bGVCeUlkKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhtb2R1bGVQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvb2wgPSB0aGlzLl9jb21waWxlKG1vZHVsZVBhdGgpO1xuXG4gICAgICAgIHJldHVybiAodGhpcy5fb29sTW9kdWxlc1tpZF0gPSBvb2wpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYWNrIGJhY2sgdGhlIHR5cGUgZGVyaXZlZCBjaGFpbi5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb29sTW9kdWxlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluZm9cbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRyYWNrQmFja1R5cGUob29sTW9kdWxlLCBpbmZvKSB7XG4gICAgICAgIGlmIChUeXBlcy5CdWlsdGluLmhhcyhpbmZvLnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBiYXNlSW5mbyA9IHRoaXMubG9hZEVsZW1lbnQob29sTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LlRZUEUsIGluZm8udHlwZSk7XG5cbiAgICAgICAgaWYgKCFUeXBlcy5CdWlsdGluLmhhcyhiYXNlSW5mby50eXBlKSkge1xuICAgICAgICAgICAgLy90aGUgYmFzZSB0eXBlIGlzIG5vdCBhIGJ1aWx0aW4gdHlwZVxuICAgICAgICAgICAgbGV0IHVuaXF1ZUlkID0gdGhpcy5nZXRFbGVtZW50VW5pcXVlSWQob29sTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LlRZUEUsIHZhbHVlLm5hbWUpO1xuICAgICAgICAgICAgbGV0IG93bmVyTW9kdWxlID0gdGhpcy5nZXRNb2R1bGVCeUlkKHRoaXMuX21hcE9mUmVmZXJlbmNlVG9Nb2R1bGVJZC5nZXQodW5pcXVlSWQpKTtcbiAgICAgICAgICAgIGxldCByb290VHlwZUluZm8gPSB0aGlzLnRyYWNrQmFja1R5cGUob3duZXJNb2R1bGUsIGJhc2VJbmZvKTtcbiAgICAgICAgICAgIG93bmVyTW9kdWxlLnR5cGVbYmFzZUluZm8udHlwZV0gPSByb290VHlwZUluZm87XG4gICAgICAgICAgICBiYXNlSW5mbyA9IHJvb3RUeXBlSW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZXJpdmVkSW5mbyA9IHsgLi4uXy5jbG9uZURlZXAoYmFzZUluZm8pLCAuLi5fLm9taXQoaW5mbywgJ3R5cGUnKX07XG4gICAgICAgIGlmICghZGVyaXZlZEluZm8uc3ViQ2xhc3MpIHtcbiAgICAgICAgICAgIGRlcml2ZWRJbmZvLnN1YkNsYXNzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZGVyaXZlZEluZm8uc3ViQ2xhc3MucHVzaChpbmZvLnR5cGUpO1xuICAgICAgICByZXR1cm4gZGVyaXZlZEluZm87XG4gICAgfSAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgYW4gdmFsdWUgYnkgaW5mZXJyaW5nIGFsbCB0aGUgcmVmZXJlbmNlcy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb29sTW9kdWxlIFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgXG4gICAgICogQHJldHVybnMgeyp9IC0gVHJhbnNsYXRlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICB0cmFuc2xhdGVPb2xWYWx1ZShvb2xNb2R1bGUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUub29sVHlwZSA9PT0gT29sVHlwZXMuTGFuZy5DT05TVF9SRUYpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHJlZmVkVmFsdWUgPSB0aGlzLmxvYWRFbGVtZW50KG9vbE1vZHVsZSwgT29sVHlwZXMuRWxlbWVudC5DT05TVCwgdmFsdWUubmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IHVuaXF1ZUlkID0gdGhpcy5nZXRFbGVtZW50VW5pcXVlSWQob29sTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LkNPTlNULCB2YWx1ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBsZXQgb3duZXJNb2R1bGUgPSB0aGlzLmdldE1vZHVsZUJ5SWQodGhpcy5fbWFwT2ZSZWZlcmVuY2VUb01vZHVsZUlkLmdldCh1bmlxdWVJZCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZU9vbFZhbHVlKG93bmVyTW9kdWxlLCByZWZlZFZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF8ubWFwVmFsdWVzKHZhbHVlLCB2ID0+IHRoaXMudHJhbnNsYXRlT29sVmFsdWUob29sTW9kdWxlLCB2KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAodiA9PiB0aGlzLnRyYW5zbGF0ZU9vbFZhbHVlKG9vbE1vZHVsZSwgdikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdW5pcXVlIG1vZHVsZSBpZCBieSBzb3VyY2UgZmlsZSBwYXRoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVQYXRoIC0gVGhlIHBhdGggb2YgYW4gb29sb25nIHNvdXJjZSBmaWxlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIG1vZHVsZSBpZC5cbiAgICAgKi9cbiAgICBnZXRNb2R1bGVJZEJ5UGF0aChtb2R1bGVQYXRoKSB7ICAgICAgICBcbiAgICAgICAgbGV0IGlzQnVpbHRpbkVudGl0eSA9IF8uc3RhcnRzV2l0aChtb2R1bGVQYXRoLCBCVUlMVElOU19QQVRIKTsgICAgICBcbiAgICAgICAgcmV0dXJuIGlzQnVpbHRpbkVudGl0eSA/IFxuICAgICAgICAgICAgcGF0aC5yZWxhdGl2ZShCVUlMVElOU19QQVRILCBtb2R1bGVQYXRoKSA6IFxuICAgICAgICAgICAgJy4vJyArIHBhdGgucmVsYXRpdmUodGhpcy5zb3VyY2VQYXRoLCBtb2R1bGVQYXRoKTsgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdW5pcXVlIG5hbWUgb2YgYW4gZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVmZXJlck1vZHVsZSBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudFR5cGUgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lIFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIHVuaXF1ZSBuYW1lIG9mIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0RWxlbWVudFVuaXF1ZUlkKHJlZmVyZXJNb2R1bGUsIGVsZW1lbnRUeXBlLCBlbGVtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudFR5cGUgKyAnOicgKyBlbGVtZW50TmFtZSArICc8LScgKyByZWZlcmVyTW9kdWxlLmlkO1xuICAgIH1cblxuICAgIGxvYWRFbnRpdHkocmVmZXJlck1vZHVsZSwgZWxlbWVudE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEVsZW1lbnQocmVmZXJlck1vZHVsZSwgT29sVHlwZXMuRWxlbWVudC5FTlRJVFksIGVsZW1lbnROYW1lKTtcbiAgICB9XG5cbiAgICBsb2FkVHlwZShyZWZlcmVyTW9kdWxlLCBlbGVtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkRWxlbWVudChyZWZlcmVyTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LlRZUEUsIGVsZW1lbnROYW1lKTtcbiAgICB9XG5cbiAgICBsb2FkRGF0YXNldChyZWZlcmVyTW9kdWxlLCBlbGVtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkRWxlbWVudChyZWZlcmVyTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LkRBVEFTRVQsIGVsZW1lbnROYW1lKTtcbiAgICB9XG5cbiAgICBsb2FkVmlldyhyZWZlcmVyTW9kdWxlLCBlbGVtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkRWxlbWVudChyZWZlcmVyTW9kdWxlLCBPb2xUeXBlcy5FbGVtZW50LlZJRVcsIGVsZW1lbnROYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGFuIGVsZW1lbnQgYmFzZWQgb24gdGhlIG5hbWVzcGFjZSBjaGFpbi5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVmZXJlck1vZHVsZSBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudFR5cGUgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lIFxuICAgICAqL1xuICAgIGxvYWRFbGVtZW50KHJlZmVyZXJNb2R1bGUsIGVsZW1lbnRUeXBlLCBlbGVtZW50TmFtZSkge1xuICAgICAgICAvLyB0aGUgZWxlbWVudCBpZCB3aXRoIHR5cGUsIHNob3VsZCBiZSB1bmlxdWUgYW1vbmcgdGhlIHdob2xlIHNjaGVtYVxuICAgICAgICBsZXQgdW5pcXVlSWQgPSB0aGlzLmdldEVsZW1lbnRVbmlxdWVJZChyZWZlcmVyTW9kdWxlLCBlbGVtZW50VHlwZSwgZWxlbWVudE5hbWUpO1xuXG4gICAgICAgIC8vIHRoZSBlbGVtZW50IGlkICsgcmVmZXJlclxuICAgICAgICBpZiAodW5pcXVlSWQgaW4gdGhpcy5fZWxlbWVudHNDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRzQ2FjaGVbdW5pcXVlSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRhcmdldE1vZHVsZTsgICAgICAgIFxuXG4gICAgICAgIGlmIChlbGVtZW50VHlwZSBpbiByZWZlcmVyTW9kdWxlICYmIGVsZW1lbnROYW1lIGluIHJlZmVyZXJNb2R1bGVbZWxlbWVudFR5cGVdKSB7XG4gICAgICAgICAgICAvLyBzZWUgaWYgaXQgZXhpc3RzIGluIHRoZSBzYW1lIG1vZHVsZVxuICAgICAgICAgICAgYXNzZXJ0OiAhdGhpcy5fZWxlbWVudHNDYWNoZS5oYXNPd25Qcm9wZXJ0eShlbGVtZW50VHlwZSArICc6JyArIGVsZW1lbnROYW1lICsgJ0AnICsgcmVmZXJlck1vZHVsZS5pZCk7XG4gICAgICAgICAgICB0YXJnZXRNb2R1bGUgPSByZWZlcmVyTW9kdWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VhcmNoIHJldmVyc2VseSBieSB0aGUgbmFtZXNwYWNlc1xuICAgICAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgU2VhcmNoaW5nICR7ZWxlbWVudFR5cGV9IFwiJHtlbGVtZW50TmFtZX1cIiBmcm9tIFwiJHtyZWZlcmVyTW9kdWxlLmlkfVwiIC4uLmApO1xuXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBfLmZpbmRMYXN0SW5kZXgocmVmZXJlck1vZHVsZS5uYW1lc3BhY2UsIG1vZHVsZVBhdGggPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nKCdkZWJ1ZycsIGBMb29raW5nIGZvciAke2VsZW1lbnRUeXBlfSBcIiR7ZWxlbWVudE5hbWV9XCIgaW4gXCIke21vZHVsZVBhdGh9XCIgLi4uYCk7XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRNb2R1bGUgPSB0aGlzLmxvYWRNb2R1bGUobW9kdWxlUGF0aCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0TW9kdWxlICYmIHRhcmdldE1vZHVsZVtlbGVtZW50VHlwZV0gJiYgKGVsZW1lbnROYW1lIGluIHRhcmdldE1vZHVsZVtlbGVtZW50VHlwZV0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2VsZW1lbnRUeXBlfSBcIiR7ZWxlbWVudE5hbWV9XCIgbm90IGZvdW5kIGluIGltcG9ydGVkIG5hbWVzcGFjZXMuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBGb3VuZCAke2VsZW1lbnRUeXBlfSBcIiR7ZWxlbWVudE5hbWV9XCIgaW4gXCIke3RhcmdldE1vZHVsZS5pZH1cIi4gW09LXWApO1xuXG4gICAgICAgIGxldCBlbGVtZW50U2VsZklkID0gZWxlbWVudFR5cGUgKyAnOicgKyBlbGVtZW50TmFtZSArICdAJyArIHRhcmdldE1vZHVsZS5pZDtcbiAgICAgICAgaWYgKGVsZW1lbnRTZWxmSWQgaW4gdGhpcy5fZWxlbWVudHNDYWNoZSkge1xuICAgICAgICAgICAgLy8gYWxyZWFkeSBpbml0aWFsaXplZCAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9lbGVtZW50c0NhY2hlW3VuaXF1ZUlkXSA9IHRoaXMuX2VsZW1lbnRzQ2FjaGVbZWxlbWVudFNlbGZJZF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXNzZXJ0IG5hbWluZyB2YWxpZGF0eVxuICAgICAgICBhc3NlcnQ6ICF0aGlzLl9tYXBPZlJlZmVyZW5jZVRvTW9kdWxlSWQuaGFzKHVuaXF1ZUlkKSwgYCR7ZWxlbWVudFR5cGV9IFwiJHtlbGVtZW50TmFtZX1cIiBpbiBcIiR7dGFyZ2V0TW9kdWxlLmlkfVwiIGNvbmZsaWN0cyB3aXRoICR7ZWxlbWVudFR5cGV9IGluIFwiJHt0aGlzLl9tYXBPZlJlZmVyZW5jZVRvTW9kdWxlSWQuZ2V0KHVuaXF1ZUlkKX1cIiFgO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fbWFwT2ZSZWZlcmVuY2VUb01vZHVsZUlkLnNldCh1bmlxdWVJZCwgdGFyZ2V0TW9kdWxlLmlkKTtcblxuICAgICAgICAvLyByZXRyaWV2ZSB0aGUgY29tcGlsZWQgaW5mb1xuICAgICAgICBsZXQgZWxlbWVudEluZm8gPSBPYmplY3QuZnJlZXplKHRhcmdldE1vZHVsZVtlbGVtZW50VHlwZV1bZWxlbWVudE5hbWVdKTtcbiAgICAgICAgbGV0IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRUeXBlIGluIEVMRU1FTlRfQ0xBU1NfTUFQKSB7XG4gICAgICAgICAgICAvLyBlbGVtZW50IG5lZWQgbGlua2luZ1xuICAgICAgICAgICAgbGV0IEVsZW1lbnRDbGFzcyA9IEVMRU1FTlRfQ0xBU1NfTUFQW2VsZW1lbnRUeXBlXTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBuZXcgRWxlbWVudENsYXNzKHRoaXMsIGVsZW1lbnROYW1lLCB0YXJnZXRNb2R1bGUsIGVsZW1lbnRJbmZvKTsgICBcbiAgICAgICAgICAgIGVsZW1lbnQubGluaygpOyAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRJbmZvO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudHNDYWNoZVtlbGVtZW50U2VsZklkXSA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzQ2FjaGVbdW5pcXVlSWRdID0gZWxlbWVudDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIF9jb21waWxlKG9vbEZpbGUpIHtcbiAgICAgICAgbGV0IGpzRmlsZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChvb2xGaWxlLmVuZHNXaXRoKCcuanNvbicpKSB7XG4gICAgICAgICAgICBqc0ZpbGUgPSBvb2xGaWxlO1xuICAgICAgICAgICAgb29sRmlsZSA9IG9vbEZpbGUuc3Vic3RyKDAsIG9vbEZpbGUubGVuZ3RoIC0gNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqc0ZpbGUgPSBvb2xGaWxlICsgJy5qc29uJztcbiAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBvb2wsIHNlYXJjaEV4dDtcblxuICAgICAgICBpZiAodGhpcy51c2VKc29uU291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoanNGaWxlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJ1c2VKc29uU291cmNlXCIgZW5hYmVsZCBidXQganNvbiBmaWxlIFwiJHtqc0ZpbGV9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvb2wgPSBmcy5yZWFkSnNvblN5bmMoanNGaWxlKTtcbiAgICAgICAgICAgIHNlYXJjaEV4dCA9IE9PTE9OR19TT1VSQ0VfRVhUICsgJy5qc29uJztcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5sb2coJ2RlYnVnJywgJ0NvbXBpbGluZyAnICsgb29sRmlsZSArICcgLi4uJyk7ICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvb2wgPSBPb2xvbmdQYXJzZXIucGFyc2UoZnMucmVhZEZpbGVTeW5jKG9vbEZpbGUsICd1dGY4JykpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb21waWxlIFwiJHsgb29sRmlsZSB9XCIuXFxuJHsgZXJyb3IubWVzc2FnZSB8fCBlcnJvciB9YClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFvb2wpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tcGlsaW5nLicpO1xuICAgICAgICAgICAgfSAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VhcmNoRXh0ID0gT09MT05HX1NPVVJDRV9FWFQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYmFzZU5hbWUgPSBwYXRoLmJhc2VuYW1lKG9vbEZpbGUsIE9PTE9OR19TT1VSQ0VfRVhUKTtcblxuICAgICAgICBsZXQgbmFtZXNwYWNlID0gW107XG5cbiAgICAgICAgbGV0IGN1cnJlbnRQYXRoID0gcGF0aC5kaXJuYW1lKG9vbEZpbGUpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHsqfSBuYW1lc3BhY2VzIC0gU2VhcmNoaW5nIHBhdGhcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5zIC0gSW1wb3J0IGxpbmVcbiAgICAgICAgICogQHBhcmFtIHsqfSByZWN1cnNpdmUgXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBleHBhbmROcyhuYW1lc3BhY2VzLCBucywgcmVjdXJzaXZlKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHMgPSBmcy5zdGF0U3luYyhucyk7XG5cbiAgICAgICAgICAgIC8vaW1wb3J0ICcvcGF0aC91c2VyLm9vbCdcbiAgICAgICAgICAgIGlmIChzdGF0cy5pc0ZpbGUoKSAmJiBucy5lbmRzV2l0aChzZWFyY2hFeHQpKSB7XG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlcy5wdXNoKG5zKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpICYmIHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgIC8vcmVzdXJzaXZlIGV4cGFuZCBzdWItZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVzID0gZnMucmVhZGRpclN5bmMobnMpO1xuICAgICAgICAgICAgICAgIGZpbGVzLmZvckVhY2goZiA9PiBleHBhbmROcyhuYW1lc3BhY2VzLCBwYXRoLmpvaW4obnMsIGYpLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob29sLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgb29sLm5hbWVzcGFjZS5mb3JFYWNoKG5zID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobnMuc3RhcnRzV2l0aCgnPG9vbG9uZz4vJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbnMgPSBwYXRoLmpvaW4oQlVJTFRJTlNfUEFUSCwgbnMuc3Vic3RyKDkpKTsgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5zLnN0YXJ0c1dpdGgoJzxzb3VyY2U+LycpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5zID0gcGF0aC5qb2luKHRoaXMuc291cmNlUGF0aCwgbnMuc3Vic3RyKDkpKTsgICBcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICBpZiAobnMuZW5kc1dpdGgoJy8qJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHBhdGgucmVzb2x2ZShjdXJyZW50UGF0aCwgbnMuc3Vic3RyKDAsIG5zLmxlbmd0aCAtIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVzID0gZnMucmVhZGRpclN5bmMocCk7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLmZvckVhY2goZiA9PiBleHBhbmROcyhuYW1lc3BhY2UsIHBhdGguam9pbihwLCBmKSwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5zLmVuZHNXaXRoKCcvKionKSkge1xuICAgICAgICAgICAgICAgICAgICBwID0gcGF0aC5yZXNvbHZlKGN1cnJlbnRQYXRoLCBucy5zdWJzdHIoMCwgbnMubGVuZ3RoIC0gMykpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhwKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMuZm9yRWFjaChmID0+IGV4cGFuZE5zKG5hbWVzcGFjZSwgcGF0aC5qb2luKHAsIGYpLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlLnB1c2gocGF0aC5yZXNvbHZlKGN1cnJlbnRQYXRoLCBfLmVuZHNXaXRoKG5zLCBPT0xPTkdfU09VUkNFX0VYVCkgPyBucyA6IG5zICsgT09MT05HX1NPVVJDRV9FWFQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9vbC5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cbiAgICAgICAgb29sLmlkID0gdGhpcy5nZXRNb2R1bGVJZEJ5UGF0aChvb2xGaWxlKTsgICAgICAgIFxuICAgICAgICBvb2wubmFtZSA9IGJhc2VOYW1lOyAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy51c2VKc29uU291cmNlICYmIHRoaXMuc2F2ZUludGVybWVkaWF0ZSkgeyAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGpzRmlsZSwgSlNPTi5zdHJpbmdpZnkob29sLCBudWxsLCA0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb29sO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZXI7Il19