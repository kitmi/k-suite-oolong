"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  fieldNaming
} = require('./OolUtils');

const Types = require('../runtime/types');

const RESERVED_KEYS = new Set(['name', 'type', 'modifiers', 'subClass', 'values']);

class Field extends Clonable {
  constructor(name, info) {
    super();
    this.name = fieldNaming(name);
    this.info = info;
  }

  link() {
    if (!Types.Builtin.has(this.info.type)) {
      throw new Error("Assertion failed: Types.Builtin.has(this.info.type)");
    }

    let typeObject = Types[this.info.type];

    _.forOwn(this.info, (value, key) => {
      if (RESERVED_KEYS.has(key)) {
        this[key] = value;
        return;
      }

      if (!typeObject.qualifiers.includes(key)) {
        throw new Error(`Unsupported field qualifier "${key}" for type "${this.info.type}" of field "${this.name}."`);
      }

      this[key] = Array.isArray(value) ? value[0] : value;
    });

    this.displayName = this.comment || generateDisplayName(this.name);
    deepCloneField(this.info, this, 'modifiers');
    this.linked = true;
  }

  hasSameType(targetField) {
    return _.isEqual(this.toJSON(), targetField);
  }

  clone() {
    super.clone();
    let field = new Field(this.name, this.info);
    Object.assign(field, this.toJSON());
    field.linked = true;
    return field;
  }

  toJSON() {
    return _.omit(_.toPlainObject(this), ['name', 'linked', 'info']);
  }

}

module.exports = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0ZpZWxkLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImRlZXBDbG9uZUZpZWxkIiwiQ2xvbmFibGUiLCJmaWVsZE5hbWluZyIsIlR5cGVzIiwiUkVTRVJWRURfS0VZUyIsIlNldCIsIkZpZWxkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5mbyIsImxpbmsiLCJCdWlsdGluIiwiaGFzIiwidHlwZSIsInR5cGVPYmplY3QiLCJmb3JPd24iLCJ2YWx1ZSIsImtleSIsInF1YWxpZmllcnMiLCJpbmNsdWRlcyIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwiZGlzcGxheU5hbWUiLCJjb21tZW50IiwibGlua2VkIiwiaGFzU2FtZVR5cGUiLCJ0YXJnZXRGaWVsZCIsImlzRXF1YWwiLCJ0b0pTT04iLCJjbG9uZSIsImZpZWxkIiwiT2JqZWN0IiwiYXNzaWduIiwib21pdCIsInRvUGxhaW5PYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQSxjQUF2QjtBQUF1Q0MsRUFBQUEsUUFBdkM7QUFBaURDLEVBQUFBO0FBQWpELElBQWlFSixPQUFPLENBQUMsWUFBRCxDQUE5RTs7QUFDQSxNQUFNSyxLQUFLLEdBQUdMLE9BQU8sQ0FBQyxrQkFBRCxDQUFyQjs7QUFDQSxNQUFNTSxhQUFhLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsV0FBakIsRUFBOEIsVUFBOUIsRUFBMEMsUUFBMUMsQ0FBUixDQUF0Qjs7QUFNQSxNQUFNQyxLQUFOLFNBQW9CTCxRQUFwQixDQUE2QjtBQUt6Qk0sRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYTtBQUNwQjtBQUVBLFNBQUtELElBQUwsR0FBWU4sV0FBVyxDQUFDTSxJQUFELENBQXZCO0FBTUEsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7O0FBS0RDLEVBQUFBLElBQUksR0FBRztBQUFBLFNBQ0tQLEtBQUssQ0FBQ1EsT0FBTixDQUFjQyxHQUFkLENBQWtCLEtBQUtILElBQUwsQ0FBVUksSUFBNUIsQ0FETDtBQUFBO0FBQUE7O0FBRUgsUUFBSUMsVUFBVSxHQUFHWCxLQUFLLENBQUMsS0FBS00sSUFBTCxDQUFVSSxJQUFYLENBQXRCOztBQUVBaEIsSUFBQUEsQ0FBQyxDQUFDa0IsTUFBRixDQUFTLEtBQUtOLElBQWQsRUFBb0IsQ0FBQ08sS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0FBQ2hDLFVBQUliLGFBQWEsQ0FBQ1EsR0FBZCxDQUFrQkssR0FBbEIsQ0FBSixFQUE0QjtBQUN4QixhQUFLQSxHQUFMLElBQVlELEtBQVo7QUFDQTtBQUNIOztBQUVELFVBQUksQ0FBQ0YsVUFBVSxDQUFDSSxVQUFYLENBQXNCQyxRQUF0QixDQUErQkYsR0FBL0IsQ0FBTCxFQUEwQztBQUN0QyxjQUFNLElBQUlHLEtBQUosQ0FBVyxnQ0FBK0JILEdBQUksZUFBYyxLQUFLUixJQUFMLENBQVVJLElBQUssZUFBYyxLQUFLTCxJQUFLLElBQW5HLENBQU47QUFDSDs7QUFFRCxXQUFLUyxHQUFMLElBQVlJLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixLQUFkLElBQXVCQSxLQUFLLENBQUMsQ0FBRCxDQUE1QixHQUFrQ0EsS0FBOUM7QUFDSCxLQVhEOztBQWlCQSxTQUFLTyxXQUFMLEdBQW1CLEtBQUtDLE9BQUwsSUFBZ0J6QixtQkFBbUIsQ0FBQyxLQUFLUyxJQUFOLENBQXREO0FBRUFSLElBQUFBLGNBQWMsQ0FBQyxLQUFLUyxJQUFOLEVBQVksSUFBWixFQUFrQixXQUFsQixDQUFkO0FBRUEsU0FBS2dCLE1BQUwsR0FBYyxJQUFkO0FBQ0g7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsV0FBRCxFQUFjO0FBQ3JCLFdBQU85QixDQUFDLENBQUMrQixPQUFGLENBQVUsS0FBS0MsTUFBTCxFQUFWLEVBQXlCRixXQUF6QixDQUFQO0FBQ0g7O0FBTURHLEVBQUFBLEtBQUssR0FBRztBQUNKLFVBQU1BLEtBQU47QUFFQSxRQUFJQyxLQUFLLEdBQUcsSUFBSXpCLEtBQUosQ0FBVSxLQUFLRSxJQUFmLEVBQXFCLEtBQUtDLElBQTFCLENBQVo7QUFDQXVCLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixLQUFkLEVBQXFCLEtBQUtGLE1BQUwsRUFBckI7QUFDQUUsSUFBQUEsS0FBSyxDQUFDTixNQUFOLEdBQWUsSUFBZjtBQUVBLFdBQU9NLEtBQVA7QUFDSDs7QUFNREYsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBT2hDLENBQUMsQ0FBQ3FDLElBQUYsQ0FBT3JDLENBQUMsQ0FBQ3NDLGFBQUYsQ0FBZ0IsSUFBaEIsQ0FBUCxFQUE4QixDQUFFLE1BQUYsRUFBVSxRQUFWLEVBQW9CLE1BQXBCLENBQTlCLENBQVA7QUFDSDs7QUF4RXdCOztBQTJFN0JDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgZ2VuZXJhdGVEaXNwbGF5TmFtZSwgZGVlcENsb25lRmllbGQsIENsb25hYmxlLCBmaWVsZE5hbWluZyB9ID0gcmVxdWlyZSgnLi9Pb2xVdGlscycpO1xuY29uc3QgVHlwZXMgPSByZXF1aXJlKCcuLi9ydW50aW1lL3R5cGVzJyk7XG5jb25zdCBSRVNFUlZFRF9LRVlTID0gbmV3IFNldChbJ25hbWUnLCAndHlwZScsICdtb2RpZmllcnMnLCAnc3ViQ2xhc3MnLCAndmFsdWVzJ10pO1xuXG4vKipcbiAqIE9vbG9uZyBlbnRpdHkgZmllbGQgY2xhc3MuXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgRmllbGQgZXh0ZW5kcyBDbG9uYWJsZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5mb1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGluZm8pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBmaWVsZE5hbWluZyhuYW1lKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3JpZ2luYWwgdHlwZSBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmZvID0gaW5mbzsgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpbmtpbmcgdGhlIFxuICAgICAqL1xuICAgIGxpbmsoKSB7XG4gICAgICAgIGFzc2VydDogVHlwZXMuQnVpbHRpbi5oYXModGhpcy5pbmZvLnR5cGUpO1xuICAgICAgICBsZXQgdHlwZU9iamVjdCA9IFR5cGVzW3RoaXMuaW5mby50eXBlXTtcblxuICAgICAgICBfLmZvck93bih0aGlzLmluZm8sICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoUkVTRVJWRURfS0VZUy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gICAgICAgXG5cbiAgICAgICAgICAgIGlmICghdHlwZU9iamVjdC5xdWFsaWZpZXJzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGZpZWxkIHF1YWxpZmllciBcIiR7a2V5fVwiIGZvciB0eXBlIFwiJHt0aGlzLmluZm8udHlwZX1cIiBvZiBmaWVsZCBcIiR7dGhpcy5uYW1lfS5cImApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzW2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlWzBdIDogdmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCBuYW1lIG9mIHRoZSBmaWVsZFxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3BsYXlOYW1lID0gdGhpcy5jb21tZW50IHx8IGdlbmVyYXRlRGlzcGxheU5hbWUodGhpcy5uYW1lKTsgICAgICAgIFxuXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMuaW5mbywgdGhpcywgJ21vZGlmaWVycycpO1xuXG4gICAgICAgIHRoaXMubGlua2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoYXNTYW1lVHlwZSh0YXJnZXRGaWVsZCkge1xuICAgICAgICByZXR1cm4gXy5pc0VxdWFsKHRoaXMudG9KU09OKCksIHRhcmdldEZpZWxkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgZmllbGQgICAgIFxuICAgICAqIEByZXR1cm5zIHtGaWVsZH1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgc3VwZXIuY2xvbmUoKTtcblxuICAgICAgICBsZXQgZmllbGQgPSBuZXcgRmllbGQodGhpcy5uYW1lLCB0aGlzLmluZm8pO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkLCB0aGlzLnRvSlNPTigpKTtcbiAgICAgICAgZmllbGQubGlua2VkID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgdGhlIGZpZWxkIGludG8gYSBwbGFpbiBKU09OIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gXy5vbWl0KF8udG9QbGFpbk9iamVjdCh0aGlzKSwgWyAnbmFtZScsICdsaW5rZWQnLCAnaW5mbycgXSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpZWxkOyJdfQ==