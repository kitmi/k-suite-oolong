"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  schemaNaming
} = require('./OolUtils');

class Schema extends Clonable {
  constructor(linker, name, oolModule, info) {
    super();
    this.entities = {};
    this.datasets = {};
    this.views = {};
    this.linker = linker;
    this.name = schemaNaming(name);
    this.oolModule = oolModule;
    this.info = info;
  }

  link() {
    if (!!this.linked) {
      throw new Error("Function  precondition failed: !this.linked");
    }

    this.linker.log('debug', 'Linking schema [' + this.name + '] ...');

    if (this.info.comment) {
      this.comment = this.info.comment;
    }

    this.displayName = this.comment || generateDisplayName(this.name);

    if (!!_.isEmpty(this.info.entities)) {
      throw new Error("Assertion failed: !_.isEmpty(this.info.entities)");
    }

    this.info.entities.forEach(entityEntry => {
      let entity = this.linker.loadEntity(this.oolModule, entityEntry.entity);

      if (!entity.linked) {
        throw new Error("Assertion failed: entity.linked");
      }

      this.addEntity(entity);
    });

    if (!_.isEmpty(this.info.views)) {
      this.info.views.forEach(viewName => {
        this.linker.loadView(this.oolModule, viewName);

        if (!view.linked) {
          throw new Error("Assertion failed: view.linked");
        }

        this.addView(view);
      });
    }

    this.linked = true;
    return this;
  }

  hasEntity(entityName) {
    return entityName in this.entities;
  }

  addEntity(entity) {
    if (!!this.hasEntity(entity.name)) {
      throw new Error(`Entity name [${entity.name}] conflicts in schema [${this.name}].`);
    }

    this.entities[entity.name] = entity;
    return this;
  }

  hasView(viewName) {
    return viewName in this.views;
  }

  addView(view) {
    if (!!this.hasView(view.name)) {
      throw new Error(`View name [${view.name}] conflicts in schema [${this.name}].`);
    }

    this.views[view.name] = view;
    return this;
  }

  getDocumentHierachy(fromModule, datasetName) {
    if (datasetName in this.datasets) {
      return this.datasets[datasetName];
    }

    let dataset = this.linker.loadDataset(fromModule, datasetName);
    return this.datasets[datasetName] = dataset.buildHierarchy(this);
  }

  getReferencedEntity(refererModule, entityName) {
    let entity = this.liner.loadEntity(refererModule, entityName);

    if (!this.hasEntity(entity.name)) {
      throw new Error(`Entity "${entity.name}" not exists in schema "${this.name}".`);
    }

    return entity;
  }

  clone() {
    super.clone();
    let schema = new Schema(this.linker, this.name, this.oolModule, this.info);
    deepCloneField(this, schema, 'displayName');
    deepCloneField(this, schema, 'comment');
    deepCloneField(this, schema, 'entities');
    deepCloneField(this, schema, 'datasets');
    deepCloneField(this, schema, 'views');
    schema.linked = true;
    return schema;
  }

  toJSON() {
    return {
      name: this.name,
      displayName: this.displayName,
      comment: this.comment,
      entities: _.mapValues(this.entities, entity => entity.toJSON()),
      datasets: _.mapValues(this.datasets, dataset => dataset.toJSON()),
      views: _.mapValues(this.views, view => view.toJSON())
    };
  }

}

module.exports = Schema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,