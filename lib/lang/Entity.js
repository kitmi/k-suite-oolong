"use strict";

require("source-map-support/register");

const EventEmitter = require('events');

const path = require('path');

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  entityNaming,
  fieldNaming,
  prefixNaming
} = require('./OolUtils');

const Field = require('./Field');

class Entity extends Clonable {
  constructor(linker, name, oolModule, info) {
    super();
    this._events = new EventEmitter();
    this.fields = {};
    this.linker = linker;
    this.name = entityNaming(name);
    this.oolModule = oolModule;
    this.info = info;
  }

  on(eventName, listener) {
    return this._events.on(eventName, listener);
  }

  link() {
    if (!!this.linked) {
      throw new Error("Function  precondition failed: !this.linked");
    }

    this.linker.log('debug', 'Linking entity [' + this.name + '] ...');

    if (this.info.base) {
      let baseEntity = this.linker.loadEntity(this.oolModule, this.info.base);

      if (!baseEntity.linked) {
        throw new Error("Assertion failed: baseEntity.linked");
      }

      this._inherit(baseEntity);
    }

    if (this.info.comment) {
      this.comment = this.info.comment;
    }

    this.displayName = this.comment || generateDisplayName(this.name);

    this._events.emit('featuresMixingIn');

    if (this.info.features) {
      this.info.features.forEach(feature => {
        let featureName;

        if (typeof feature === 'string') {
          featureName = feature;
        } else {
          featureName = feature.name;
        }

        let fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));

        fn(this, this.linker.translateOolValue(this.oolModule, feature.args));
      });
    }

    this._events.emit('beforeAddingFields');

    if (this.info.fields) {
      _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));
    }

    this._events.emit('afterAddingFields');

    if (this.info.key) {
      this.key = this.info.key;

      if (Array.isArray(this.key) && this.key.length === 1) {
        this.key = this.key[0];
      }
    }

    this._events.emit('beforeAddingInterfaces');

    if (!_.isEmpty(this.info.interfaces)) {
      this.interfaces = _.cloneDeep(this.info.interfaces);

      _.forOwn(this.interfaces, intf => {
        if (!_.isEmpty(intf.accept)) {
          intf.accept = _.map(intf.accept, param => {
            return this.linker.trackBackType(this.oolModule, param);
          });
        }
      });
    }

    this._events.emit('afterAddingInterfaces');

    this.linked = true;
    return this;
  }

  hasIndexOn(fields) {
    fields = fields.concat();
    fields.sort();
    return _.findIndex(this.indexes, index => {
      return _.findIndex(index.fields, (f, idx) => fields.length <= idx || fields[idx] !== f) === -1;
    }) != -1;
  }

  addIndexes() {
    if (this.info.indexes) {
      _.each(this.info.indexes, index => {
        this.addIndex(index);
      });
    }
  }

  addIndex(index) {
    if (!this.indexes) {
      this.indexes = [];
    }

    index = _.cloneDeep(index);

    if (!index.fields) {
      throw new Error("Assertion failed: index.fields");
    }

    if (!_.isArray(index.fields)) {
      index.fields = [index.fields];
    }

    let fields = index.fields;
    index.fields = _.map(fields, field => {
      let normalizedField = _.camelCase(field);

      if (!this.hasField(normalizedField)) {
        throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);
      }

      return normalizedField;
    });
    index.fields.sort();

    if (this.hasIndexOn(index.fields)) {
      throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);
    }

    this.indexes.push(index);
    return this;
  }

  getEntityAttribute(fieldId) {
    if (fieldId[0] === '$') {
      let token = fieldId.substr(1);

      switch (token) {
        case "key":
          return this.fields[this.key];

        case 'feature':
          return this.features;

        default:
          throw new Error(`Filed accessor "${token}" not supported!`);
      }
    } else {
      if (!this.hasField(fieldId)) {
        throw new Error(`Field "${fieldId}" not exists in entity "${this.name}".`);
      }

      return this.fields[fieldId];
    }
  }

  hasField(name) {
    if (Array.isArray(name)) {
      return _.every(name, fn => this.hasField(fn));
    }

    return name in this.fields;
  }

  addAssociation(name, destEntity, props) {
    if (!this.associations) {
      this.associations = {};
    }

    this.associations[name] = {
      entity: destEntity.name,
      ...props
    };
  }

  addAssocField(name, destEntity, destField) {
    let localField = this.fields[name];

    if (localField) {
      throw new Error(`Field "${name}" already exists in entity "${this.name}".`);
    }

    let destFieldInfo = _.omit(destField, ['default', 'auto', 'writeOnce', 'startFrom', 'readOnly', 'forceUpdate', 'freezeAfterNonDefault']);

    destFieldInfo.name = name;
    this.addField(name, destFieldInfo);
    this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));
  }

  addField(name, rawInfo) {
    if (this.hasField(name)) {
      throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);
    }

    if (!rawInfo.type) {
      throw new Error("Assertion failed: rawInfo.type");
    }

    let field;

    if (rawInfo instanceof Field) {
      field = rawInfo.clone();
      field.name = name;
    } else {
      let fullRawInfo = this.linker.trackBackType(this.oolModule, rawInfo);
      field = new Field(name, fullRawInfo);
      field.link();
    }

    this.fields[name] = field;

    if (!this.key) {
      this.key = name;
    }

    return this;
  }

  addFeature(name, feature, allowMultiple) {
    if (!this.features) {
      this.features = {};
    }

    if (allowMultiple) {
      if (!this.features[name]) {
        this.features[name] = [];
      }

      this.features[name].push(feature);
    } else {
      if (feature.name in this.features) {
        throw new Error(`Duplicate feature found: ${name}. Turn on allowMultiple to enable multiple occurrence of a feature.`);
      }

      this.features[name] = feature;
    }

    return this;
  }

  setKey(name) {
    this.key = name;
    return this;
  }

  getReferenceTo(entityName, includes, excludes) {
    return this.info.associations && _.find(this.info.associations, assoc => {
      if (includes) {
        if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;
      }

      if (excludes) {
        if (excludes.association && assoc === excludes.association) return false;
        if (excludes.type && assoc.type === excludes.type) return false;
        if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;
        if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;
        if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;
      }

      return assoc.destEntity === entityName;
    });
  }

  getKeyField() {
    return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];
  }

  clone() {
    super.clone();
    let entity = new Entity(this.linker, this.name, this.oolModule, this.info);
    deepCloneField(this, entity, 'displayName');
    deepCloneField(this, entity, 'comment');
    deepCloneField(this, entity, 'features');
    deepCloneField(this, entity, 'fields');
    deepCloneField(this, entity, 'associations');
    deepCloneField(this, entity, 'key');
    deepCloneField(this, entity, 'indexes');
    deepCloneField(this, entity, 'interfaces');
    entity.linked = true;
    return entity;
  }

  toJSON() {
    return {
      name: this.name,
      displayName: this.displayName,
      comment: this.comment,
      features: this.features,
      fields: _.mapValues(this.fields, field => field.toJSON()),
      associations: this.associations,
      key: this.key,
      indexes: this.indexes
    };
  }

  _inherit(baseEntity) {
    deepCloneField(baseEntity, this, 'features');
    deepCloneField(baseEntity, this, 'fields');
    deepCloneField(baseEntity, this, 'key');
    deepCloneField(baseEntity, this, 'indexes');
  }

}

module.exports = Entity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0VudGl0eS5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwicGF0aCIsIl8iLCJnZW5lcmF0ZURpc3BsYXlOYW1lIiwiZGVlcENsb25lRmllbGQiLCJDbG9uYWJsZSIsImVudGl0eU5hbWluZyIsImZpZWxkTmFtaW5nIiwicHJlZml4TmFtaW5nIiwiRmllbGQiLCJFbnRpdHkiLCJjb25zdHJ1Y3RvciIsImxpbmtlciIsIm5hbWUiLCJvb2xNb2R1bGUiLCJpbmZvIiwiX2V2ZW50cyIsImZpZWxkcyIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJsaW5rIiwibGlua2VkIiwibG9nIiwiYmFzZSIsImJhc2VFbnRpdHkiLCJsb2FkRW50aXR5IiwiX2luaGVyaXQiLCJjb21tZW50IiwiZGlzcGxheU5hbWUiLCJlbWl0IiwiZmVhdHVyZXMiLCJmb3JFYWNoIiwiZmVhdHVyZSIsImZlYXR1cmVOYW1lIiwiZm4iLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwidHJhbnNsYXRlT29sVmFsdWUiLCJhcmdzIiwiZWFjaCIsImZpZWxkSW5mbyIsImZpZWxkTmFtZSIsImFkZEZpZWxkIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaXNFbXB0eSIsImludGVyZmFjZXMiLCJjbG9uZURlZXAiLCJmb3JPd24iLCJpbnRmIiwiYWNjZXB0IiwibWFwIiwicGFyYW0iLCJ0cmFja0JhY2tUeXBlIiwiaGFzSW5kZXhPbiIsImNvbmNhdCIsInNvcnQiLCJmaW5kSW5kZXgiLCJpbmRleGVzIiwiaW5kZXgiLCJmIiwiaWR4IiwiYWRkSW5kZXhlcyIsImFkZEluZGV4IiwiZmllbGQiLCJub3JtYWxpemVkRmllbGQiLCJjYW1lbENhc2UiLCJoYXNGaWVsZCIsIkVycm9yIiwiam9pbiIsInB1c2giLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZElkIiwidG9rZW4iLCJzdWJzdHIiLCJldmVyeSIsImFkZEFzc29jaWF0aW9uIiwiZGVzdEVudGl0eSIsInByb3BzIiwiYXNzb2NpYXRpb25zIiwiZW50aXR5IiwiYWRkQXNzb2NGaWVsZCIsImRlc3RGaWVsZCIsImxvY2FsRmllbGQiLCJkZXN0RmllbGRJbmZvIiwib21pdCIsInJhd0luZm8iLCJ0eXBlIiwiY2xvbmUiLCJmdWxsUmF3SW5mbyIsImFkZEZlYXR1cmUiLCJhbGxvd011bHRpcGxlIiwic2V0S2V5IiwiZ2V0UmVmZXJlbmNlVG8iLCJlbnRpdHlOYW1lIiwiaW5jbHVkZXMiLCJleGNsdWRlcyIsImZpbmQiLCJhc3NvYyIsInZhbHVlIiwicHJvcCIsImlzRXF1YWwiLCJhc3NvY2lhdGlvbiIsImluZGV4T2YiLCJ0eXBlcyIsImdldEtleUZpZWxkIiwia2YiLCJ0b0pTT04iLCJtYXBWYWx1ZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBNUI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBUUYsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQSxtQkFBRjtBQUF1QkMsRUFBQUEsY0FBdkI7QUFBdUNDLEVBQUFBLFFBQXZDO0FBQWlEQyxFQUFBQSxZQUFqRDtBQUErREMsRUFBQUEsV0FBL0Q7QUFBNEVDLEVBQUFBO0FBQTVFLElBQTZGUixPQUFPLENBQUMsWUFBRCxDQUExRzs7QUFFQSxNQUFNUyxLQUFLLEdBQUdULE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQVlBLE1BQU1VLE1BQU4sU0FBcUJMLFFBQXJCLENBQThCO0FBZTFCTSxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxFQUFlQyxTQUFmLEVBQTBCQyxJQUExQixFQUFnQztBQUN2QztBQUR1QyxTQWQzQ0MsT0FjMkMsR0FkakMsSUFBSWpCLFlBQUosRUFjaUM7QUFBQSxTQVIzQ2tCLE1B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R0FQUDtBQVFIaUIsTUFBQUEsT0FBTyxFQUFFLEtBQUtBO0FBUlgsS0FBUDtBQVVIOztBQUVEbEMsRUFBQUEsUUFBUSxDQUFDRixVQUFELEVBQWE7QUFDakJyQixJQUFBQSxjQUFjLENBQUNxQixVQUFELEVBQWEsSUFBYixFQUFtQixVQUFuQixDQUFkO0FBQ0FyQixJQUFBQSxjQUFjLENBQUNxQixVQUFELEVBQWEsSUFBYixFQUFtQixRQUFuQixDQUFkO0FBQ0FyQixJQUFBQSxjQUFjLENBQUNxQixVQUFELEVBQWEsSUFBYixFQUFtQixLQUFuQixDQUFkO0FBQ0FyQixJQUFBQSxjQUFjLENBQUNxQixVQUFELEVBQWEsSUFBYixFQUFtQixTQUFuQixDQUFkO0FBQ0g7O0FBMWN5Qjs7QUE2YzlCdUYsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkcsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IGdlbmVyYXRlRGlzcGxheU5hbWUsIGRlZXBDbG9uZUZpZWxkLCBDbG9uYWJsZSwgZW50aXR5TmFtaW5nLCBmaWVsZE5hbWluZywgcHJlZml4TmFtaW5nIH0gPSByZXF1aXJlKCcuL09vbFV0aWxzJyk7XG5cbmNvbnN0IEZpZWxkID0gcmVxdWlyZSgnLi9GaWVsZCcpO1xuXG4vKipcbiAqIEVudGl0eSBldmVudCBsaXN0ZW5lclxuICogQGNhbGxiYWNrIE9vbG9uZ0VudGl0eS5ldmVudExpc3RlbmVyXG4gKiByZXR1cm5zIHsqfVxuICovXG5cbi8qKlxuICogT29sb25nIGVudGl0eVxuICogQGNsYXNzIE9vbG9uZ0VudGl0eVxuICovXG5jbGFzcyBFbnRpdHkgZXh0ZW5kcyBDbG9uYWJsZSB7XG4gICAgX2V2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEZpZWxkcyBvZiB0aGUgZW50aXR5LCBtYXAgb2YgPGZpZWxkTmFtZSwgZmllbGRPYmplY3Q+XG4gICAgICogQG1lbWJlciB7b2JqZWN0LjxzdHJpbmcsIE9vbG9uZ0ZpZWxkPn1cbiAgICAgKi9cbiAgICBmaWVsZHMgPSB7fTtcblxuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtMaW5rZXJ9IGxpbmtlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSBvb2xNb2R1bGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5mb1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxpbmtlciwgbmFtZSwgb29sTW9kdWxlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbmtlciB0byBwcm9jZXNzIHRoaXMgZW50aXR5XG4gICAgICAgICAqIEBtZW1iZXIge09vbG9uZ0xpbmtlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGlua2VyID0gbGlua2VyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYW1lIG9mIHRoaXMgZW50aXR5XG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IGVudGl0eU5hbWluZyhuYW1lKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3duZXIgb29sb25nIG1vZHVsZVxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9vbE1vZHVsZSA9IG9vbE1vZHVsZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmF3IG1ldGFkYXRhXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gb24gYW4gZXZlbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHtPb2xvbmdFbnRpdHkuZXZlbnRMaXN0ZW5lcn0gbGlzdGVuZXJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICAgICAqL1xuICAgIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBsaW5raW5nIHRoaXMgZW50aXR5XG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBsaW5rKCkge1xuICAgICAgICBwcmU6ICF0aGlzLmxpbmtlZDtcblxuICAgICAgICAvLzEuaW5oZXJpdCBmcm9tIGJhc2UgZW50aXR5IGlmIGFueVxuICAgICAgICAvLzIuaW5pdGlhbGl6ZSBmZWF0dXJlc1xuICAgICAgICAvLzMuYWRkIGZpZWxkcyAgICAgICAgXG4gICAgICAgIC8vNC5hcGlcblxuICAgICAgICAvL2luZGV4ZXMgd2lsbCBwcm9jZXNzZWQgYWZ0ZXIgcHJvY2Vzc2luZyBmb3JlaWduIHJlbGF0aW9uc2hpcFxuXG4gICAgICAgIHRoaXMubGlua2VyLmxvZygnZGVidWcnLCAnTGlua2luZyBlbnRpdHkgWycgKyB0aGlzLm5hbWUgKyAnXSAuLi4nKTtcblxuICAgICAgICBpZiAodGhpcy5pbmZvLmJhc2UpIHtcbiAgICAgICAgICAgIC8vaW5oZXJpdCBmaWVsZHMsIHByb2Nlc3NlZCBmZWF0dXJlcywga2V5IGFuZCBpbmRleGVzXG4gICAgICAgICAgICBsZXQgYmFzZUVudGl0eSA9IHRoaXMubGlua2VyLmxvYWRFbnRpdHkodGhpcy5vb2xNb2R1bGUsIHRoaXMuaW5mby5iYXNlKTtcbiAgICAgICAgICAgIGFzc2VydDogYmFzZUVudGl0eS5saW5rZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuX2luaGVyaXQoYmFzZUVudGl0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbmZvLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNvbW1lbnQgPSB0aGlzLmluZm8uY29tbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3BsYXlOYW1lID0gdGhpcy5jb21tZW50IHx8IGdlbmVyYXRlRGlzcGxheU5hbWUodGhpcy5uYW1lKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZpcmVzIE9vbG9uZ0VudGl0eSNmZWF0dXJlc01peGluZ0luXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgnZmVhdHVyZXNNaXhpbmdJbicpO1xuXG4gICAgICAgIC8vIGxvYWQgZmVhdHVyZXNcbiAgICAgICAgaWYgKHRoaXMuaW5mby5mZWF0dXJlcykge1xuICAgICAgICAgICAgdGhpcy5pbmZvLmZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVOYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlTmFtZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU5hbWUgPSBmZWF0dXJlLm5hbWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGZuID0gcmVxdWlyZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBgLi9lbnRpdHlGZWF0dXJlcy8ke2ZlYXR1cmVOYW1lfS5qc2ApKTtcbiAgICAgICAgICAgICAgICBmbih0aGlzLCB0aGlzLmxpbmtlci50cmFuc2xhdGVPb2xWYWx1ZSh0aGlzLm9vbE1vZHVsZSwgZmVhdHVyZS5hcmdzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZmlyZXMgT29sb25nRW50aXR5I2JlZm9yZUFkZGluZ0ZpZWxkc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2JlZm9yZUFkZGluZ0ZpZWxkcycpO1xuXG4gICAgICAgIC8vIHByb2Nlc3MgZmllbGRzXG4gICAgICAgIGlmICh0aGlzLmluZm8uZmllbGRzKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5pbmZvLmZpZWxkcywgKGZpZWxkSW5mbywgZmllbGROYW1lKSA9PiB0aGlzLmFkZEZpZWxkKGZpZWxkTmFtZSwgZmllbGRJbmZvKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZpcmVzIE9vbG9uZ0VudGl0eSNhZnRlckFkZGluZ0ZpZWxkc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2FmdGVyQWRkaW5nRmllbGRzJyk7ICAgXG5cbiAgICAgICAgaWYgKHRoaXMuaW5mby5rZXkpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0gdGhpcy5pbmZvLmtleTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5rZXkpICYmIHRoaXMua2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gdGhpcy5rZXlbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZpcmVzIE9vbG9uZ0VudGl0eSNiZWZvcmVBZGRpbmdJbnRlcmZhY2VzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgnYmVmb3JlQWRkaW5nSW50ZXJmYWNlcycpOyAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLmluZm8uaW50ZXJmYWNlcykpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJmYWNlcyA9IF8uY2xvbmVEZWVwKHRoaXMuaW5mby5pbnRlcmZhY2VzKTtcblxuICAgICAgICAgICAgXy5mb3JPd24odGhpcy5pbnRlcmZhY2VzLCAoaW50ZikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGludGYuYWNjZXB0KSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRmLmFjY2VwdCA9IF8ubWFwKGludGYuYWNjZXB0LCBwYXJhbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saW5rZXIudHJhY2tCYWNrVHlwZSh0aGlzLm9vbE1vZHVsZSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZmlyZXMgT29sb25nRW50aXR5I2FmdGVyQWRkaW5nSW50ZXJmYWNlc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2FmdGVyQWRkaW5nSW50ZXJmYWNlcycpOyAgICAgICAgXG5cbiAgICAgICAgdGhpcy5saW5rZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGVudGl0eSBoYXMgYW4gaW5kZXggb24gdGhlIGdpdmVuIGZpZWxkc1xuICAgICAqIEBwYXJhbSB7YXJyYXl9IGZpZWxkc1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc0luZGV4T24oZmllbGRzKSB7XG4gICAgICAgIGZpZWxkcyA9IGZpZWxkcy5jb25jYXQoKTtcbiAgICAgICAgZmllbGRzLnNvcnQoKTtcblxuICAgICAgICByZXR1cm4gXy5maW5kSW5kZXgodGhpcy5pbmRleGVzLCBpbmRleCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmluZEluZGV4KGluZGV4LmZpZWxkcywgKGYsIGlkeCkgPT4gKGZpZWxkcy5sZW5ndGggPD0gaWR4IHx8IGZpZWxkc1tpZHhdICE9PSBmKSkgPT09IC0xO1xuICAgICAgICAgICAgfSkgIT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFsbCBpbmRleGVzXG4gICAgICovXG4gICAgYWRkSW5kZXhlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5mby5pbmRleGVzKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5pbmZvLmluZGV4ZXMsIGluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGluZGV4XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluZGV4XG4gICAgICogQHByb3BlcnR5IHthcnJheX0gaW5kZXguZmllbGRzIC0gRmllbGRzIG9mIHRoZSBpbmRleFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gaW5kZXgudW5pcXVlIC0gRmxhZyBvZiB1bmlxdWVuZXNzIG9mIHRoZSBpbmRleFxuICAgICAqIEByZXR1cm5zIHtFbnRpdHl9XG4gICAgICovXG4gICAgYWRkSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBfLmNsb25lRGVlcChpbmRleCk7XG5cbiAgICAgICAgYXNzZXJ0OiBpbmRleC5maWVsZHM7XG5cbiAgICAgICAgaWYgKCFfLmlzQXJyYXkoaW5kZXguZmllbGRzKSkge1xuICAgICAgICAgICAgaW5kZXguZmllbGRzID0gWyBpbmRleC5maWVsZHMgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWVsZHMgPSBpbmRleC5maWVsZHM7IFxuXG4gICAgICAgIGluZGV4LmZpZWxkcyA9IF8ubWFwKGZpZWxkcywgZmllbGQgPT4ge1xuXG4gICAgICAgICAgICBsZXQgbm9ybWFsaXplZEZpZWxkID0gXy5jYW1lbENhc2UoZmllbGQpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzRmllbGQobm9ybWFsaXplZEZpZWxkKSkge1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCByZWZlcmVuY2VzIG5vbi1leGlzdCBmaWVsZDogJHtmaWVsZH0sIGVudGl0eTogJHt0aGlzLm5hbWV9LmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZEZpZWxkO1xuICAgICAgICB9KTtcblxuICAgICAgICBpbmRleC5maWVsZHMuc29ydCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0luZGV4T24oaW5kZXguZmllbGRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCBvbiBbJHtpbmRleC5maWVsZHMuam9pbignLCAnKX1dIGFscmVhZHkgZXhpc3QgaW4gZW50aXR5IFske3RoaXMubmFtZX1dLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbmRleGVzLnB1c2goaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIGZpZWxkIG9iamVjdCBieSBmaWVsZCBuYW1lIG9yIGZpZWxkIGFjY2Vzb3IuXG4gICAgICogQHBhcmFtIGZpZWxkSWRcbiAgICAgKiBAcmV0dXJucyB7T29sb25nRmllbGR9XG4gICAgICovXG4gICAgZ2V0RW50aXR5QXR0cmlidXRlKGZpZWxkSWQpIHtcbiAgICAgICAgaWYgKGZpZWxkSWRbMF0gPT09ICckJykge1xuICAgICAgICAgICAgbGV0IHRva2VuID0gZmllbGRJZC5zdWJzdHIoMSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwia2V5XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkc1t0aGlzLmtleV07XG5cbiAgICAgICAgICAgICAgICBjYXNlICdmZWF0dXJlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmVhdHVyZXM7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGVkIGFjY2Vzc29yIFwiJHt0b2tlbn1cIiBub3Qgc3VwcG9ydGVkIWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0ZpZWxkKGZpZWxkSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCBcIiR7ZmllbGRJZH1cIiBub3QgZXhpc3RzIGluIGVudGl0eSBcIiR7dGhpcy5uYW1lfVwiLmApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkc1tmaWVsZElkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGVudGl0eSBoYXMgYSBmaWVsZCB3aXRoIGdpdmVuIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc0ZpZWxkKG5hbWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmV2ZXJ5KG5hbWUsIGZuID0+IHRoaXMuaGFzRmllbGQoZm4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lIGluIHRoaXMuZmllbGRzO1xuICAgIH1cblxuICAgIGFkZEFzc29jaWF0aW9uKG5hbWUsIGRlc3RFbnRpdHksIHByb3BzKSB7XG4gICAgICAgIGlmICghdGhpcy5hc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFzc29jaWF0aW9uc1tuYW1lXSA9IHtcbiAgICAgICAgICAgIGVudGl0eTogZGVzdEVudGl0eS5uYW1lLFxuICAgICAgICAgICAgLi4ucHJvcHNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBhc3NvY2lhdGlvbiBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBkZXN0RW50aXR5XG4gICAgICogQHBhcmFtIHtPb2xvbmdGaWVsZH0gZGVzdEZpZWxkXG4gICAgICovXG4gICAgYWRkQXNzb2NGaWVsZChuYW1lLCBkZXN0RW50aXR5LCBkZXN0RmllbGQpIHtcbiAgICAgICAgbGV0IGxvY2FsRmllbGQgPSB0aGlzLmZpZWxkc1tuYW1lXTtcblxuICAgICAgICBpZiAobG9jYWxGaWVsZCkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIGlmICghbG9jYWxGaWVsZC5oYXNTYW1lVHlwZShkZXN0RmllbGQudG9KU09OKCkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgdHlwZSBvZiBzb3VyY2UgZmllbGQgXCIke3RoaXMubmFtZX0uJHtuYW1lfVwiIGlzIGRpZmZlcmVudCBmcm9tIHRoZSByZWZlcmVuY2VkIGZpZWxkIFwiJHtkZXN0RW50aXR5Lm5hbWV9LiR7ZGVzdEZpZWxkLm5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHMgaW4gZW50aXR5IFwiJHt0aGlzLm5hbWV9XCIuYCk7XG4gICAgICAgICAgICAvL3JldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZXN0RmllbGRJbmZvID0gXy5vbWl0KGRlc3RGaWVsZCwgWydkZWZhdWx0JywgJ2F1dG8nLCAnd3JpdGVPbmNlJywgJ3N0YXJ0RnJvbScsICdyZWFkT25seScsICdmb3JjZVVwZGF0ZScsICdmcmVlemVBZnRlck5vbkRlZmF1bHQnXSk7XG4gICAgICAgIGRlc3RGaWVsZEluZm8ubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgdGhpcy5hZGRGaWVsZChuYW1lLCBkZXN0RmllbGRJbmZvKTsgICAgXG4gICAgICAgIHRoaXMuZmllbGRzW25hbWVdLmRpc3BsYXlOYW1lID0gZmllbGROYW1pbmcocHJlZml4TmFtaW5nKGRlc3RFbnRpdHkubmFtZSwgZGVzdEZpZWxkLm5hbWUpKTsgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBmaWVsZCBpbnRvIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByYXdJbmZvXG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBhZGRGaWVsZChuYW1lLCByYXdJbmZvKSB7ICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuaGFzRmllbGQobmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgbmFtZSBbJHtuYW1lfV0gY29uZmxpY3RzIGluIGVudGl0eSBbJHt0aGlzLm5hbWV9XS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydDogcmF3SW5mby50eXBlO1xuXG4gICAgICAgIGxldCBmaWVsZDtcblxuICAgICAgICBpZiAocmF3SW5mbyBpbnN0YW5jZW9mIEZpZWxkKSB7XG4gICAgICAgICAgICBmaWVsZCA9IHJhd0luZm8uY2xvbmUoKTtcbiAgICAgICAgICAgIGZpZWxkLm5hbWUgPSBuYW1lOyAvLyB0b2RvOiBkaXNwbGF5TmFtZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZ1bGxSYXdJbmZvID0gdGhpcy5saW5rZXIudHJhY2tCYWNrVHlwZSh0aGlzLm9vbE1vZHVsZSwgcmF3SW5mbyk7XG5cbiAgICAgICAgICAgIGZpZWxkID0gbmV3IEZpZWxkKG5hbWUsIGZ1bGxSYXdJbmZvKTtcbiAgICAgICAgICAgIGZpZWxkLmxpbmsoKTtcbiAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZmllbGRzW25hbWVdID0gZmllbGQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmtleSkge1xuICAgICAgICAgICAgLy9tYWtlIHRoZSBmaXJzdCBmaWVsZCBhcyB0aGUgZGVmYXVsdCBrZXlcbiAgICAgICAgICAgIHRoaXMua2V5ID0gbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGZlYXR1cmUgaW50byB0aGUgZW50aXR5LCBlLmcuIGF1dG8gaW5jcmVtZW50IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0geyp9IGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFthbGxvd011bHRpcGxlPWZhbHNlXSAtIEFsbG93IG11bHRpcGxlIG9jY3VycmVuY2VcbiAgICAgKiBAcmV0dXJucyB7RW50aXR5fVxuICAgICAqL1xuICAgIGFkZEZlYXR1cmUobmFtZSwgZmVhdHVyZSwgYWxsb3dNdWx0aXBsZSkge1xuICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGxvd011bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzW25hbWVdID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbbmFtZV0ucHVzaChmZWF0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLm5hbWUgaW4gdGhpcy5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGZlYXR1cmUgZm91bmQ6ICR7bmFtZX0uIFR1cm4gb24gYWxsb3dNdWx0aXBsZSB0byBlbmFibGUgbXVsdGlwbGUgb2NjdXJyZW5jZSBvZiBhIGZlYXR1cmUuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbbmFtZV0gPSBmZWF0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGtleSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXkuPHN0cmluZz59IG5hbWUgLSBGaWVsZCBuYW1lIHRvIGJlIHVzZWQgYXMgdGhlIGtleVxuICAgICAqIEByZXR1cm5zIHtFbnRpdHl9XG4gICAgICovXG4gICAgc2V0S2V5KG5hbWUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhc3NvY2lhdGlvbiBpbmZvIGlmIHRoZXJlIGlzIGNvbm5lY3Rpb24gdG8gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIGVudGl0eS5cbiAgICAgKi9cbiAgICBnZXRSZWZlcmVuY2VUbyhlbnRpdHlOYW1lLCBpbmNsdWRlcywgZXhjbHVkZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mby5hc3NvY2lhdGlvbnMgJiYgXy5maW5kKFxuICAgICAgICAgICAgdGhpcy5pbmZvLmFzc29jaWF0aW9ucywgYXNzb2MgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5maW5kKGluY2x1ZGVzLCAodmFsdWUsIHByb3ApID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/ICF2YWx1ZShhc3NvY1twcm9wXSkgOiAhXy5pc0VxdWFsKGFzc29jW3Byb3BdLCB2YWx1ZSkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlcy5hc3NvY2lhdGlvbiAmJiBhc3NvYyA9PT0gZXhjbHVkZXMuYXNzb2NpYXRpb24pIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzLnR5cGUgJiYgYXNzb2MudHlwZSA9PT0gZXhjbHVkZXMudHlwZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZXMuYXNzb2NpYXRpb25zICYmIGV4Y2x1ZGVzLmFzc29jaWF0aW9ucy5pbmRleE9mKGFzc29jKSA+IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlcy50eXBlcyAmJiBleGNsdWRlcy50eXBlcy5pbmRleE9mKGFzc29jLnR5cGUpID4gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzLnByb3BzICYmIF8uZmluZChleGNsdWRlcy5wcm9wcywgcHJvcCA9PiBhc3NvY1twcm9wXSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzb2MuZGVzdEVudGl0eSA9PT0gZW50aXR5TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQga2V5IGZpZWxkIFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldEtleUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmtleSkgPyB0aGlzLmtleS5tYXAoa2YgPT4gdGhpcy5maWVsZHNba2ZdKSA6IHRoaXMuZmllbGRzW3RoaXMua2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHtNYXB9IFtzdGFja10gLSBSZWZlcmVuY2Ugc3RhY2sgdG8gYXZvaWQgcmVjdXJyZW5jZSBjb3B5XG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHsgICAgICAgIFxuICAgICAgICBzdXBlci5jbG9uZSgpO1xuXG4gICAgICAgIGxldCBlbnRpdHkgPSBuZXcgRW50aXR5KHRoaXMubGlua2VyLCB0aGlzLm5hbWUsIHRoaXMub29sTW9kdWxlLCB0aGlzLmluZm8pOyAgICAgICAgXG5cbiAgICAgICAgZGVlcENsb25lRmllbGQodGhpcywgZW50aXR5LCAnZGlzcGxheU5hbWUnKTtcbiAgICAgICAgZGVlcENsb25lRmllbGQodGhpcywgZW50aXR5LCAnY29tbWVudCcpO1xuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdmZWF0dXJlcycpO1xuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdmaWVsZHMnKTsgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2Fzc29jaWF0aW9ucycpOyAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2tleScpOyAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2luZGV4ZXMnKTsgICAgICAgIFxuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdpbnRlcmZhY2VzJyk7XG5cbiAgICAgICAgZW50aXR5LmxpbmtlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG4gXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIHRoZSBlbnRpdHkgaW50byBhIHBsYWluIEpTT04gb2JqZWN0XG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIGNvbW1lbnQ6IHRoaXMuY29tbWVudCwgICAgICAgICAgICBcbiAgICAgICAgICAgIGZlYXR1cmVzOiB0aGlzLmZlYXR1cmVzLCAgICAgICAgICAgIFxuICAgICAgICAgICAgZmllbGRzOiBfLm1hcFZhbHVlcyh0aGlzLmZpZWxkcywgZmllbGQgPT4gZmllbGQudG9KU09OKCkpLFxuICAgICAgICAgICAgYXNzb2NpYXRpb25zOiB0aGlzLmFzc29jaWF0aW9ucyxcbiAgICAgICAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICAgICAgICBpbmRleGVzOiB0aGlzLmluZGV4ZXNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdChiYXNlRW50aXR5KSB7ICAgICAgICBcbiAgICAgICAgZGVlcENsb25lRmllbGQoYmFzZUVudGl0eSwgdGhpcywgJ2ZlYXR1cmVzJyk7XG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKGJhc2VFbnRpdHksIHRoaXMsICdmaWVsZHMnKTtcbiAgICAgICAgZGVlcENsb25lRmllbGQoYmFzZUVudGl0eSwgdGhpcywgJ2tleScpOyAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKGJhc2VFbnRpdHksIHRoaXMsICdpbmRleGVzJyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGl0eTsiXX0=