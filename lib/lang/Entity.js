"use strict";

require("source-map-support/register");

const EventEmitter = require('events');

const path = require('path');

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  entityNaming,
  fieldNaming,
  prefixNaming
} = require('./OolUtils');

const Field = require('./Field');

class Entity extends Clonable {
  constructor(linker, name, oolModule, info) {
    super();
    this._events = new EventEmitter();
    this.fields = {};
    this.linker = linker;
    this.name = entityNaming(name);
    this.oolModule = oolModule;
    this.info = info;
  }

  on(eventName, listener) {
    return this._events.on(eventName, listener);
  }

  link() {
    if (!!this.linked) {
      throw new Error("Function  precondition failed: !this.linked");
    }

    this.linker.log('debug', 'Linking entity [' + this.name + '] ...');

    if (this.info.base) {
      let baseEntity = this.linker.loadEntity(this.oolModule, this.info.base);

      if (!baseEntity.linked) {
        throw new Error("Assertion failed: baseEntity.linked");
      }

      this._inherit(baseEntity);
    }

    if (this.info.comment) {
      this.comment = this.info.comment;
    }

    this.displayName = this.comment || generateDisplayName(this.name);

    this._events.emit('featuresMixingIn');

    if (this.info.features) {
      this.info.features.forEach(feature => {
        let featureName;

        if (typeof feature === 'string') {
          featureName = feature;
        } else {
          featureName = feature.name;
        }

        let fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));

        fn(this, this.linker.translateOolValue(this.oolModule, feature.args));
      });
    }

    this._events.emit('beforeAddingFields');

    if (this.info.fields) {
      _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));
    }

    this._events.emit('afterAddingFields');

    if (this.info.key) {
      this.key = this.info.key;

      if (Array.isArray(this.key) && this.key.length === 1) {
        this.key = this.key[0];
      }
    }

    this._events.emit('beforeAddingInterfaces');

    if (!_.isEmpty(this.info.interfaces)) {
      this.interfaces = _.cloneDeep(this.info.interfaces);

      _.forOwn(this.interfaces, intf => {
        if (!_.isEmpty(intf.accept)) {
          intf.accept = _.map(intf.accept, param => {
            return this.linker.trackBackType(this.oolModule, param);
          });
        }
      });
    }

    this._events.emit('afterAddingInterfaces');

    this.linked = true;
    return this;
  }

  hasIndexOn(fields) {
    fields = fields.concat();
    fields.sort();
    return _.findIndex(this.indexes, index => {
      return _.findIndex(index.fields, (f, idx) => fields.length <= idx || fields[idx] !== f) === -1;
    }) != -1;
  }

  addIndexes() {
    if (this.info.indexes) {
      _.each(this.info.indexes, index => {
        this.addIndex(index);
      });
    }
  }

  addIndex(index) {
    if (!this.indexes) {
      this.indexes = [];
    }

    index = _.cloneDeep(index);

    if (!index.fields) {
      throw new Error("Assertion failed: index.fields");
    }

    if (!_.isArray(index.fields)) {
      index.fields = [index.fields];
    }

    let fields = index.fields;
    index.fields = _.map(fields, field => {
      let normalizedField = _.camelCase(field);

      if (!this.hasField(normalizedField)) {
        throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);
      }

      return normalizedField;
    });
    index.fields.sort();

    if (this.hasIndexOn(index.fields)) {
      throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);
    }

    this.indexes.push(index);
    return this;
  }

  getEntityAttribute(fieldId) {
    if (fieldId[0] === '$') {
      let token = fieldId.substr(1);

      switch (token) {
        case "key":
          return this.fields[this.key];

        case 'feature':
          return this.features;

        default:
          throw new Error(`Filed accessor "${token}" not supported!`);
      }
    } else {
      if (!this.hasField(fieldId)) {
        throw new Error(`Field "${fieldId}" not exists in entity "${this.name}".`);
      }

      return this.fields[fieldId];
    }
  }

  hasField(name) {
    if (Array.isArray(name)) {
      return _.every(name, fn => this.hasField(fn));
    }

    return name in this.fields;
  }

  addAssociation(name, destEntity, props) {
    if (!this.associations) {
      this.associations = {};
    }

    this.associations[name] = {
      entity: destEntity.name,
      ...props
    };
  }

  addAssocField(name, destEntity, destField) {
    let localField = this.fields[name];

    if (localField) {
      throw new Error(`Field "${name}" already exists in entity "${this.name}".`);
    }

    let destFieldInfo = _.omit(destField, ['default', 'auto', 'writeOnce', 'startFrom', 'readOnly', 'forceUpdate', 'freezeAfterNonDefault']);

    destFieldInfo.name = name;
    this.addField(name, destFieldInfo);
    this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));
  }

  addField(name, rawInfo) {
    if (this.hasField(name)) {
      throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);
    }

    if (!rawInfo.type) {
      throw new Error("Assertion failed: rawInfo.type");
    }

    let field;

    if (rawInfo instanceof Field) {
      field = rawInfo.clone();
      field.name = name;
    } else {
      let fullRawInfo = this.linker.trackBackType(this.oolModule, rawInfo);
      field = new Field(name, fullRawInfo);
      field.link();
    }

    this.fields[name] = field;

    if (!this.key) {
      this.key = name;
    }

    return this;
  }

  addFeature(name, feature, allowMultiple) {
    if (!this.features) {
      this.features = {};
    }

    if (allowMultiple) {
      if (!this.features[name]) {
        this.features[name] = [];
      }

      this.features[name].push(feature);
    } else {
      if (feature.name in this.features) {
        throw new Error(`Duplicate feature found: ${name}. Turn on allowMultiple to enable multiple occurrence of a feature.`);
      }

      this.features[name] = feature;
    }

    return this;
  }

  setKey(name) {
    this.key = name;
    return this;
  }

  getReferenceTo(entityName, excludes) {
    return this.info.associations && _.find(this.info.associations, assoc => {
      if (excludes) {
        if (excludes.association && assoc === excludes.association) return false;
        if (excludes.type && assoc.type === excludes.type) return false;
        if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;
        if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;
      }

      return assoc.destEntity === entityName;
    });
  }

  getKeyField() {
    return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];
  }

  clone() {
    super.clone();
    let entity = new Entity(this.linker, this.name, this.oolModule, this.info);
    deepCloneField(this, entity, 'displayName');
    deepCloneField(this, entity, 'comment');
    deepCloneField(this, entity, 'features');
    deepCloneField(this, entity, 'fields');
    deepCloneField(this, entity, 'associations');
    deepCloneField(this, entity, 'key');
    deepCloneField(this, entity, 'indexes');
    deepCloneField(this, entity, 'interfaces');
    entity.linked = true;
    return entity;
  }

  toJSON() {
    return {
      name: this.name,
      displayName: this.displayName,
      comment: this.comment,
      features: this.features,
      fields: _.mapValues(this.fields, field => field.toJSON()),
      associations: this.associations,
      key: this.key,
      indexes: this.indexes
    };
  }

  _inherit(baseEntity) {
    deepCloneField(baseEntity, this, 'features');
    deepCloneField(baseEntity, this, 'fields');
    deepCloneField(baseEntity, this, 'key');
    deepCloneField(baseEntity, this, 'indexes');
  }

}

module.exports = Entity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,