"use strict";

require("source-map-support/register");

const EventEmitter = require('events');

const path = require('path');

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  deepClone,
  Clonable,
  entityNaming
} = require('./OolUtils');

const Field = require('./Field');

const {
  FunctionalQualifiers
} = require('../runtime/types');

class Entity extends Clonable {
  constructor(linker, name, oolModule, info) {
    super();
    this._events = new EventEmitter();
    this.fields = {};
    this.linker = linker;
    this.name = entityNaming(name);
    this.oolModule = oolModule;
    this.info = info;
  }

  on(eventName, listener) {
    return this._events.on(eventName, listener);
  }

  link() {
    if (!!this.linked) {
      throw new Error("Function  precondition failed: !this.linked");
    }

    this.linker.log('debug', 'Linking entity [' + this.name + '] ...');

    if (this.info.base) {
      let baseClasses = _.castArray(this.info.base);

      baseClasses.forEach(base => {
        let baseEntity = this.linker.loadEntity(this.oolModule, base);

        if (!baseEntity.linked) {
          throw new Error("Assertion failed: baseEntity.linked");
        }

        this._inherit(baseEntity);
      });
      this.baseClasses = baseClasses;
    }

    if (this.info.comment) {
      this.comment = this.info.comment;
    }

    this.displayName = this.comment || generateDisplayName(this.name);

    this._events.emit('featuresMixingIn');

    if (this.info.features) {
      this.info.features.forEach(feature => {
        let featureName;

        if (typeof feature === 'string') {
          featureName = feature;
        } else {
          featureName = feature.name;
        }

        let fn;

        try {
          fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));
        } catch (err) {
          if (err.code === 'MODULE_NOT_FOUND') {
            throw new Error(`Unknow feature "${featureName}" reference in entity "${this.name}"`);
          }
        }

        fn(this, this.linker.translateOolValue(this.oolModule, feature.args));
      });
    }

    this._events.emit('beforeAddingFields');

    if (this.info.fields) {
      _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));
    }

    this._events.emit('afterAddingFields');

    if (this.info.key) {
      this.key = this.info.key;

      if (Array.isArray(this.key) && this.key.length === 1) {
        this.key = this.key[0];
      }
    }

    this._events.emit('beforeAddingInterfaces');

    if (!_.isEmpty(this.info.interfaces)) {
      this.interfaces = _.cloneDeep(this.info.interfaces);

      _.forOwn(this.interfaces, intf => {
        if (!_.isEmpty(intf.accept)) {
          intf.accept = _.map(intf.accept, param => {
            return this.linker.trackBackType(this.oolModule, param);
          });
        }
      });
    }

    this._events.emit('afterAddingInterfaces');

    this.linked = true;
    return this;
  }

  hasIndexOn(fields) {
    fields = fields.concat();
    fields.sort();
    return _.findIndex(this.indexes, index => {
      return _.findIndex(index.fields, (f, idx) => fields.length <= idx || fields[idx] !== f) === -1;
    }) != -1;
  }

  addIndexes() {
    if (this.info.indexes) {
      _.each(this.info.indexes, index => {
        this.addIndex(index);
      });
    }
  }

  addIndex(index) {
    if (!this.indexes) {
      this.indexes = [];
    }

    index = _.cloneDeep(index);

    if (!index.fields) {
      throw new Error("Assertion failed: index.fields");
    }

    if (!_.isArray(index.fields)) {
      index.fields = [index.fields];
    }

    let fields = index.fields;
    index.fields = _.map(fields, field => {
      let normalizedField = _.camelCase(field);

      if (!this.hasField(normalizedField)) {
        throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);
      }

      return normalizedField;
    });
    index.fields.sort();

    if (this.hasIndexOn(index.fields)) {
      throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);
    }

    this.indexes.push(index);
    return this;
  }

  getEntityAttribute(fieldId) {
    if (fieldId[0] === '$') {
      let token = fieldId.substr(1);

      switch (token) {
        case "key":
          return this.fields[this.key];

        case 'feature':
          return this.features;

        default:
          throw new Error(`Filed accessor "${token}" not supported!`);
      }
    } else {
      if (!this.hasField(fieldId)) {
        throw new Error(`Field "${fieldId}" not exists in entity "${this.name}".`);
      }

      return this.fields[fieldId];
    }
  }

  hasField(name) {
    if (Array.isArray(name)) {
      return _.every(name, fn => this.hasField(fn));
    }

    return name in this.fields;
  }

  addAssociation(name, props) {
    if (!this.associations) {
      this.associations = {};
    }

    if (name in this.associations) {
      throw new Error(`Association "${name}" already exists in entity "${this.name}". Props: ` + JSON.stringify(props));
    }

    this.associations[name] = props;
  }

  addAssocField(name, destEntity, destField, extraProps) {
    let localField = this.fields[name];

    if (localField) {
      throw new Error(`Field "${name}" already exists in entity "${this.name}".`);
    }

    let destFieldInfo = _.omit(destField.toJSON(), FunctionalQualifiers);

    Object.assign(destFieldInfo, extraProps);
    this.addField(name, destFieldInfo);
  }

  addField(name, rawInfo) {
    if (this.hasField(name)) {
      throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);
    }

    if (!rawInfo.type) {
      throw new Error("Assertion failed: rawInfo.type");
    }

    let field;

    if (rawInfo instanceof Field) {
      field = rawInfo.clone();
      field.name = name;
    } else {
      let fullRawInfo = this.linker.trackBackType(this.oolModule, rawInfo);
      field = new Field(name, fullRawInfo);
      field.link();
    }

    this.fields[name] = field;

    if (!this.key) {
      this.key = name;
    }

    return this;
  }

  addFeature(name, feature, allowMultiple) {
    if (!this.features) {
      this.features = {};
    }

    if (allowMultiple) {
      if (!this.features[name]) {
        this.features[name] = [];
      }

      this.features[name].push(feature);
    } else {
      if (feature.name in this.features) {
        throw new Error(`Duplicate feature found: ${name}. Turn on allowMultiple to enable multiple occurrence of a feature.`);
      }

      this.features[name] = feature;
    }

    return this;
  }

  setKey(name) {
    this.key = name;
    return this;
  }

  getReferenceTo(entityName, includes, excludes) {
    return this.info.associations && _.find(this.info.associations, assoc => {
      if (includes) {
        if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;
      }

      if (excludes) {
        if (excludes.association && assoc === excludes.association) return false;
        if (excludes.type && assoc.type === excludes.type) return false;
        if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;
        if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;
        if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;
      }

      return assoc.destEntity === entityName;
    });
  }

  getKeyField() {
    return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];
  }

  clone() {
    super.clone();
    let entity = new Entity(this.linker, this.name, this.oolModule, this.info);
    deepCloneField(this, entity, 'displayName');
    deepCloneField(this, entity, 'comment');
    deepCloneField(this, entity, 'features');
    deepCloneField(this, entity, 'fields');
    deepCloneField(this, entity, 'associations');
    deepCloneField(this, entity, 'key');
    deepCloneField(this, entity, 'indexes');
    deepCloneField(this, entity, 'interfaces');
    entity.linked = true;
    return entity;
  }

  toJSON() {
    return {
      name: this.name,
      displayName: this.displayName,
      comment: this.comment,
      ...(this.baseClasses ? {
        baseClasses: this.baseClasses
      } : {}),
      features: this.features,
      fields: _.mapValues(this.fields, field => field.toJSON()),
      associations: this.associations,
      key: this.key,
      indexes: this.indexes
    };
  }

  _inherit(baseEntity) {
    let overrideInfo = {};

    if (baseEntity.baseClasses) {
      let baseClasses = baseEntity.baseClasses;

      if (this.baseClasses) {
        this.baseClasses = _.uniq(baseClasses.concat(this.baseClasses));
      } else {
        this.baseClasses = baseClasses.concat();
      }
    }

    if (baseEntity.features) {
      let baseFeatures = deepClone(baseEntity.features);
      this.features = { ...this.features,
        ...baseFeatures
      };
    }

    if (baseEntity.fields) {
      let fields = deepClone(baseEntity.fields);
      this.fields = { ...this.fields,
        ...fields
      };
    }

    deepCloneField(baseEntity, this, 'key');

    if (baseEntity.info.indexes) {
      let indexes = deepClone(baseEntity.info.indexes);

      if (this.info.indexes) {
        indexes = indexes.concat(this.info.indexes);
      }

      overrideInfo.indexes = indexes;
    }

    if (baseEntity.info.associations) {
      let assocs = deepClone(baseEntity.info.associations);
      assocs = assocs.map(assoc => {
        if (assoc.destEntity === baseEntity.name) {
          return { ...assoc,
            destEntity: this.name
          };
        }

        return assoc;
      });

      if (this.info.associations) {
        assocs = assocs.concat(this.info.associations);
      }

      overrideInfo.associations = assocs;
    }

    if (!_.isEmpty(overrideInfo)) {
      this.info = Object.freeze({ ...this.info,
        ...overrideInfo
      });
    }
  }

}

module.exports = Entity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0VudGl0eS5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwicGF0aCIsIl8iLCJnZW5lcmF0ZURpc3BsYXlOYW1lIiwiZGVlcENsb25lRmllbGQiLCJkZWVwQ2xvbmUiLCJDbG9uYWJsZSIsImVudGl0eU5hbWluZyIsIkZpZWxkIiwiRnVuY3Rpb25hbFF1YWxpZmllcnMiLCJFbnRpdHkiLCJjb25zdHJ1Y3RvciIsImxpbmtlciIsIm5hbWUiLCJvb2xNb2R1bGUiLCJpbmZvIiwiX2V2ZW50cyIsImZpZWxkcyIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJsaW5rIiwibGlua2VkIiwibG9nIiwiYmFzZSIsImJhc2VDbGFzc2VzIiwiY2FzdEFycmF5IiwiZm9yRWFjaCIsImJhc2VFbnRpdHkiLCJsb2FkRW50aXR5IiwiX2luaGVyaXQiLCJjb21tZW50IiwiZGlzcGxheU5hbWUiLCJlbWl0IiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiZmVhdHVyZU5hbWUiLCJmbiIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJlcnIiLCJjb2RlIiwiRXJyb3IiLCJ0cmFuc2xhdGVPb2xWYWx1ZSIsImFyZ3MiLCJlYWNoIiwiZmllbGRJbmZvIiwiZmllbGROYW1lIiwiYWRkRmllbGQiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJpc0VtcHR5IiwiaW50ZXJmYWNlcyIsImNsb25lRGVlcCIsImZvck93biIsImludGYiLCJhY2NlcHQiLCJtYXAiLCJwYXJhbSIsInRyYWNrQmFja1R5cGUiLCJoYXNJbmRleE9uIiwiY29uY2F0Iiwic29ydCIsImZpbmRJbmRleCIsImluZGV4ZXMiLCJpbmRleCIsImYiLCJpZHgiLCJhZGRJbmRleGVzIiwiYWRkSW5kZXgiLCJmaWVsZCIsIm5vcm1hbGl6ZWRGaWVsZCIsImNhbWVsQ2FzZSIsImhhc0ZpZWxkIiwiam9pbiIsInB1c2giLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZElkIiwidG9rZW4iLCJzdWJzdHIiLCJldmVyeSIsImFkZEFzc29jaWF0aW9uIiwicHJvcHMiLCJhc3NvY2lhdGlvbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkQXNzb2NGaWVsZCIsImRlc3RFbnRpdHkiLCJkZXN0RmllbGQiLCJleHRyYVByb3BzIiwibG9jYWxGaWVsZCIsImRlc3RGaWVsZEluZm8iLCJvbWl0IiwidG9KU09OIiwiT2JqZWN0IiwiYXNzaWduIiwicmF3SW5mbyIsInR5cGUiLCJjbG9uZSIsImZ1bGxSYXdJbmZvIiwiYWRkRmVhdHVyZSIsImFsbG93TXVsdGlwbGUiLCJzZXRLZXkiLCJnZXRSZWZlcmVuY2VUbyIsImVudGl0eU5hbWUiLCJpbmNsdWRlcyIsImV4Y2x1ZGVzIiwiZmluZCIsImFzc29jIiwidmFsdWUiLCJwcm9wIiwiaXNFcXVhbCIsImFzc29jaWF0aW9uIiwiaW5kZXhPZiIsInR5cGVzIiwiZ2V0S2V5RmllbGQiLCJrZiIsImVudGl0eSIsIm1hcFZhbHVlcyIsIm92ZXJyaWRlSW5mbyIsInVuaXEiLCJiYXNlRmVhdHVyZXMiLCJhc3NvY3MiLCJmcmVlemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBNUI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBUUYsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQSxtQkFBRjtBQUF1QkMsRUFBQUEsY0FBdkI7QUFBdUNDLEVBQUFBLFNBQXZDO0FBQWtEQyxFQUFBQSxRQUFsRDtBQUE0REMsRUFBQUE7QUFBNUQsSUFBNkVQLE9BQU8sQ0FBQyxZQUFELENBQTFGOztBQUVBLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQTtBQUFGLElBQTJCVCxPQUFP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Q0FBQ3JCLFVBQU4sS0FBcUI3RCxVQUFVLENBQUNmLElBQXBDLEVBQTBDO0FBQ3RDLGlCQUFPLEVBQ0gsR0FBR2lHLEtBREE7QUFFSHJCLFlBQUFBLFVBQVUsRUFBRSxLQUFLNUU7QUFGZCxXQUFQO0FBSUg7O0FBRUQsZUFBT2lHLEtBQVA7QUFDSCxPQVRRLENBQVQ7O0FBV0EsVUFBSSxLQUFLL0YsSUFBTCxDQUFVc0UsWUFBZCxFQUE0QjtBQUN4QnVDLFFBQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDN0QsTUFBUCxDQUFjLEtBQUtoRCxJQUFMLENBQVVzRSxZQUF4QixDQUFUO0FBQ0g7O0FBRURvQyxNQUFBQSxZQUFZLENBQUNwQyxZQUFiLEdBQTRCdUMsTUFBNUI7QUFDSDs7QUFFRCxRQUFJLENBQUMxSCxDQUFDLENBQUNtRCxPQUFGLENBQVVvRSxZQUFWLENBQUwsRUFBOEI7QUFDMUIsV0FBSzFHLElBQUwsR0FBWWlGLE1BQU0sQ0FBQzZCLE1BQVAsQ0FBYyxFQUFFLEdBQUcsS0FBSzlHLElBQVY7QUFBZ0IsV0FBRzBHO0FBQW5CLE9BQWQsQ0FBWjtBQUNIO0FBQ0o7O0FBM2hCeUI7O0FBOGhCOUJLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJILE1BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBnZW5lcmF0ZURpc3BsYXlOYW1lLCBkZWVwQ2xvbmVGaWVsZCwgZGVlcENsb25lLCBDbG9uYWJsZSwgZW50aXR5TmFtaW5nIH0gPSByZXF1aXJlKCcuL09vbFV0aWxzJyk7XG5cbmNvbnN0IEZpZWxkID0gcmVxdWlyZSgnLi9GaWVsZCcpO1xuY29uc3QgeyBGdW5jdGlvbmFsUXVhbGlmaWVycyB9ID0gcmVxdWlyZSgnLi4vcnVudGltZS90eXBlcycpO1xuXG4vKipcbiAqIEVudGl0eSBldmVudCBsaXN0ZW5lclxuICogQGNhbGxiYWNrIE9vbG9uZ0VudGl0eS5ldmVudExpc3RlbmVyXG4gKiByZXR1cm5zIHsqfVxuICovXG5cbi8qKlxuICogT29sb25nIGVudGl0eVxuICogQGNsYXNzIE9vbG9uZ0VudGl0eVxuICovXG5jbGFzcyBFbnRpdHkgZXh0ZW5kcyBDbG9uYWJsZSB7XG4gICAgX2V2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEZpZWxkcyBvZiB0aGUgZW50aXR5LCBtYXAgb2YgPGZpZWxkTmFtZSwgZmllbGRPYmplY3Q+XG4gICAgICogQG1lbWJlciB7b2JqZWN0LjxzdHJpbmcsIE9vbG9uZ0ZpZWxkPn1cbiAgICAgKi9cbiAgICBmaWVsZHMgPSB7fTtcblxuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtMaW5rZXJ9IGxpbmtlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSBvb2xNb2R1bGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5mb1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxpbmtlciwgbmFtZSwgb29sTW9kdWxlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbmtlciB0byBwcm9jZXNzIHRoaXMgZW50aXR5XG4gICAgICAgICAqIEBtZW1iZXIge09vbG9uZ0xpbmtlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGlua2VyID0gbGlua2VyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYW1lIG9mIHRoaXMgZW50aXR5XG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IGVudGl0eU5hbWluZyhuYW1lKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3duZXIgb29sb25nIG1vZHVsZVxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9vbE1vZHVsZSA9IG9vbE1vZHVsZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmF3IG1ldGFkYXRhXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gb24gYW4gZXZlbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHtPb2xvbmdFbnRpdHkuZXZlbnRMaXN0ZW5lcn0gbGlzdGVuZXJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICAgICAqL1xuICAgIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBsaW5raW5nIHRoaXMgZW50aXR5XG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBsaW5rKCkge1xuICAgICAgICBwcmU6ICF0aGlzLmxpbmtlZDtcblxuICAgICAgICAvLzEuaW5oZXJpdCBmcm9tIGJhc2UgZW50aXR5IGlmIGFueVxuICAgICAgICAvLzIuaW5pdGlhbGl6ZSBmZWF0dXJlc1xuICAgICAgICAvLzMuYWRkIGZpZWxkcyAgICAgICAgXG4gICAgICAgIC8vNC5hcGlcblxuICAgICAgICAvL2luZGV4ZXMgd2lsbCBwcm9jZXNzZWQgYWZ0ZXIgcHJvY2Vzc2luZyBmb3JlaWduIHJlbGF0aW9uc2hpcFxuXG4gICAgICAgIHRoaXMubGlua2VyLmxvZygnZGVidWcnLCAnTGlua2luZyBlbnRpdHkgWycgKyB0aGlzLm5hbWUgKyAnXSAuLi4nKTtcblxuICAgICAgICBpZiAodGhpcy5pbmZvLmJhc2UpIHtcbiAgICAgICAgICAgIC8vaW5oZXJpdCBmaWVsZHMsIHByb2Nlc3NlZCBmZWF0dXJlcywga2V5IGFuZCBpbmRleGVzXG4gICAgICAgICAgICBsZXQgYmFzZUNsYXNzZXMgPSBfLmNhc3RBcnJheSh0aGlzLmluZm8uYmFzZSk7XG4gICAgICAgICAgICBiYXNlQ2xhc3Nlcy5mb3JFYWNoKGJhc2UgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiYXNlRW50aXR5ID0gdGhpcy5saW5rZXIubG9hZEVudGl0eSh0aGlzLm9vbE1vZHVsZSwgYmFzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0OiBiYXNlRW50aXR5LmxpbmtlZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2luaGVyaXQoYmFzZUVudGl0eSk7XG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcblxuICAgICAgICAgICAgdGhpcy5iYXNlQ2xhc3NlcyA9IGJhc2VDbGFzc2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5mby5jb21tZW50KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jb21tZW50ID0gdGhpcy5pbmZvLmNvbW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9IHRoaXMuY29tbWVudCB8fCBnZW5lcmF0ZURpc3BsYXlOYW1lKHRoaXMubmFtZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmaXJlcyBPb2xvbmdFbnRpdHkjZmVhdHVyZXNNaXhpbmdJblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2ZlYXR1cmVzTWl4aW5nSW4nKTtcblxuICAgICAgICAvLyBsb2FkIGZlYXR1cmVzXG4gICAgICAgIGlmICh0aGlzLmluZm8uZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5mby5mZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlTmFtZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU5hbWUgPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVOYW1lID0gZmVhdHVyZS5uYW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBmbjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmbiA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgYC4vZW50aXR5RmVhdHVyZXMvJHtmZWF0dXJlTmFtZX0uanNgKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ01PRFVMRV9OT1RfRk9VTkQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vdyBmZWF0dXJlIFwiJHtmZWF0dXJlTmFtZX1cIiByZWZlcmVuY2UgaW4gZW50aXR5IFwiJHt0aGlzLm5hbWV9XCJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmbih0aGlzLCB0aGlzLmxpbmtlci50cmFuc2xhdGVPb2xWYWx1ZSh0aGlzLm9vbE1vZHVsZSwgZmVhdHVyZS5hcmdzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZmlyZXMgT29sb25nRW50aXR5I2JlZm9yZUFkZGluZ0ZpZWxkc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2JlZm9yZUFkZGluZ0ZpZWxkcycpO1xuXG4gICAgICAgIC8vIHByb2Nlc3MgZmllbGRzXG4gICAgICAgIGlmICh0aGlzLmluZm8uZmllbGRzKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5pbmZvLmZpZWxkcywgKGZpZWxkSW5mbywgZmllbGROYW1lKSA9PiB0aGlzLmFkZEZpZWxkKGZpZWxkTmFtZSwgZmllbGRJbmZvKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZpcmVzIE9vbG9uZ0VudGl0eSNhZnRlckFkZGluZ0ZpZWxkc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2FmdGVyQWRkaW5nRmllbGRzJyk7ICAgXG5cbiAgICAgICAgaWYgKHRoaXMuaW5mby5rZXkpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0gdGhpcy5pbmZvLmtleTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5rZXkpICYmIHRoaXMua2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gdGhpcy5rZXlbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZpcmVzIE9vbG9uZ0VudGl0eSNiZWZvcmVBZGRpbmdJbnRlcmZhY2VzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgnYmVmb3JlQWRkaW5nSW50ZXJmYWNlcycpOyAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLmluZm8uaW50ZXJmYWNlcykpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJmYWNlcyA9IF8uY2xvbmVEZWVwKHRoaXMuaW5mby5pbnRlcmZhY2VzKTtcblxuICAgICAgICAgICAgXy5mb3JPd24odGhpcy5pbnRlcmZhY2VzLCAoaW50ZikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGludGYuYWNjZXB0KSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRmLmFjY2VwdCA9IF8ubWFwKGludGYuYWNjZXB0LCBwYXJhbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saW5rZXIudHJhY2tCYWNrVHlwZSh0aGlzLm9vbE1vZHVsZSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZmlyZXMgT29sb25nRW50aXR5I2FmdGVyQWRkaW5nSW50ZXJmYWNlc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ2FmdGVyQWRkaW5nSW50ZXJmYWNlcycpOyAgICAgICAgXG5cbiAgICAgICAgdGhpcy5saW5rZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGVudGl0eSBoYXMgYW4gaW5kZXggb24gdGhlIGdpdmVuIGZpZWxkc1xuICAgICAqIEBwYXJhbSB7YXJyYXl9IGZpZWxkc1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc0luZGV4T24oZmllbGRzKSB7XG4gICAgICAgIGZpZWxkcyA9IGZpZWxkcy5jb25jYXQoKTtcbiAgICAgICAgZmllbGRzLnNvcnQoKTtcblxuICAgICAgICByZXR1cm4gXy5maW5kSW5kZXgodGhpcy5pbmRleGVzLCBpbmRleCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmluZEluZGV4KGluZGV4LmZpZWxkcywgKGYsIGlkeCkgPT4gKGZpZWxkcy5sZW5ndGggPD0gaWR4IHx8IGZpZWxkc1tpZHhdICE9PSBmKSkgPT09IC0xO1xuICAgICAgICAgICAgfSkgIT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFsbCBpbmRleGVzXG4gICAgICovXG4gICAgYWRkSW5kZXhlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5mby5pbmRleGVzKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5pbmZvLmluZGV4ZXMsIGluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGluZGV4XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluZGV4XG4gICAgICogQHByb3BlcnR5IHthcnJheX0gaW5kZXguZmllbGRzIC0gRmllbGRzIG9mIHRoZSBpbmRleFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gaW5kZXgudW5pcXVlIC0gRmxhZyBvZiB1bmlxdWVuZXNzIG9mIHRoZSBpbmRleFxuICAgICAqIEByZXR1cm5zIHtFbnRpdHl9XG4gICAgICovXG4gICAgYWRkSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBfLmNsb25lRGVlcChpbmRleCk7XG5cbiAgICAgICAgYXNzZXJ0OiBpbmRleC5maWVsZHM7XG5cbiAgICAgICAgaWYgKCFfLmlzQXJyYXkoaW5kZXguZmllbGRzKSkge1xuICAgICAgICAgICAgaW5kZXguZmllbGRzID0gWyBpbmRleC5maWVsZHMgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWVsZHMgPSBpbmRleC5maWVsZHM7IFxuXG4gICAgICAgIGluZGV4LmZpZWxkcyA9IF8ubWFwKGZpZWxkcywgZmllbGQgPT4ge1xuXG4gICAgICAgICAgICBsZXQgbm9ybWFsaXplZEZpZWxkID0gXy5jYW1lbENhc2UoZmllbGQpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzRmllbGQobm9ybWFsaXplZEZpZWxkKSkge1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCByZWZlcmVuY2VzIG5vbi1leGlzdCBmaWVsZDogJHtmaWVsZH0sIGVudGl0eTogJHt0aGlzLm5hbWV9LmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZEZpZWxkO1xuICAgICAgICB9KTtcblxuICAgICAgICBpbmRleC5maWVsZHMuc29ydCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0luZGV4T24oaW5kZXguZmllbGRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCBvbiBbJHtpbmRleC5maWVsZHMuam9pbignLCAnKX1dIGFscmVhZHkgZXhpc3QgaW4gZW50aXR5IFske3RoaXMubmFtZX1dLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbmRleGVzLnB1c2goaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIGZpZWxkIG9iamVjdCBieSBmaWVsZCBuYW1lIG9yIGZpZWxkIGFjY2Vzb3IuXG4gICAgICogQHBhcmFtIGZpZWxkSWRcbiAgICAgKiBAcmV0dXJucyB7T29sb25nRmllbGR9XG4gICAgICovXG4gICAgZ2V0RW50aXR5QXR0cmlidXRlKGZpZWxkSWQpIHtcbiAgICAgICAgaWYgKGZpZWxkSWRbMF0gPT09ICckJykge1xuICAgICAgICAgICAgbGV0IHRva2VuID0gZmllbGRJZC5zdWJzdHIoMSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwia2V5XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkc1t0aGlzLmtleV07XG5cbiAgICAgICAgICAgICAgICBjYXNlICdmZWF0dXJlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmVhdHVyZXM7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGVkIGFjY2Vzc29yIFwiJHt0b2tlbn1cIiBub3Qgc3VwcG9ydGVkIWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0ZpZWxkKGZpZWxkSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCBcIiR7ZmllbGRJZH1cIiBub3QgZXhpc3RzIGluIGVudGl0eSBcIiR7dGhpcy5uYW1lfVwiLmApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkc1tmaWVsZElkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGVudGl0eSBoYXMgYSBmaWVsZCB3aXRoIGdpdmVuIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc0ZpZWxkKG5hbWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmV2ZXJ5KG5hbWUsIGZuID0+IHRoaXMuaGFzRmllbGQoZm4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lIGluIHRoaXMuZmllbGRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhc3NvY2lhdGlvbiwgZGJtcy1zcGVjaWZpY1xuICAgICAqIEBwYXJhbSB7Kn0gbmFtZSBcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIFxuICAgICAqIEBleGFtcGxlXG4gICAgICogZS5nLiBteXNxbFxuICAgICAqICBlbnRpdHkgLSBBc3NvY2lhdGVkIGVudGl0eSBuYW1lXG4gICAgICogIGpvaW4gLSBKb2luIHR5cGUsIGUuZy4gSU5ORVIsIExFRlQsIFJJR0hULCBPVVRFUlxuICAgICAqICBleGNsdWRlIC0gRXhjbHVkZSBpbiBvdXRwdXQgY29sdW1uc1xuICAgICAqICBhbGlhcyAtIEFsaWFzIFxuICAgICAqICBvbiAtIE9uIGNvbmRpdGlvbnNcbiAgICAgKiAgZGF0YXNldCAtIFN1YiBxdWVyeVxuICAgICAqICBhc3NvY3MgLSBDaGlsZCBhc3NvY2lhdGlvbnNcbiAgICAgKiAgb3B0aW9uYWwgLSBPcHRpb25hbFxuICAgICAqICAnZGVmYXVsdCcgLSBEZWZhdWx0IHZhbHVlXG4gICAgICogIGxpc3QgLSBJcyBhIGxpc3RcbiAgICAgKi9cbiAgICBhZGRBc3NvY2lhdGlvbihuYW1lLCBwcm9wcykge1xuICAgICAgICBpZiAoIXRoaXMuYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmFzc29jaWF0aW9ucyA9IHt9O1xuICAgICAgICB9ICAgIFxuXG4gICAgICAgIGlmIChuYW1lIGluIHRoaXMuYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFzc29jaWF0aW9uIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzIGluIGVudGl0eSBcIiR7dGhpcy5uYW1lfVwiLiBQcm9wczogYCArIEpTT04uc3RyaW5naWZ5KHByb3BzKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFzc29jaWF0aW9uc1tuYW1lXSA9IHByb3BzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGFzc29jaWF0aW9uIGZpZWxkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtPb2xvbmdFbnRpdHl9IGRlc3RFbnRpdHlcbiAgICAgKiBAcGFyYW0ge09vbG9uZ0ZpZWxkfSBkZXN0RmllbGRcbiAgICAgKi9cbiAgICBhZGRBc3NvY0ZpZWxkKG5hbWUsIGRlc3RFbnRpdHksIGRlc3RGaWVsZCwgZXh0cmFQcm9wcykge1xuICAgICAgICBsZXQgbG9jYWxGaWVsZCA9IHRoaXMuZmllbGRzW25hbWVdO1xuXG4gICAgICAgIGlmIChsb2NhbEZpZWxkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzIGluIGVudGl0eSBcIiR7dGhpcy5uYW1lfVwiLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlc3RGaWVsZEluZm8gPSBfLm9taXQoZGVzdEZpZWxkLnRvSlNPTigpLCBGdW5jdGlvbmFsUXVhbGlmaWVycyk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZGVzdEZpZWxkSW5mbywgZXh0cmFQcm9wcyk7ICAgICAgIFxuXG4gICAgICAgIHRoaXMuYWRkRmllbGQobmFtZSwgZGVzdEZpZWxkSW5mbyk7ICAgIFxuICAgICAgICAvL3RoaXMuZmllbGRzW25hbWVdLmRpc3BsYXlOYW1lID0gZmllbGROYW1pbmcocHJlZml4TmFtaW5nKGRlc3RFbnRpdHkubmFtZSwgZGVzdEZpZWxkLm5hbWUpKTsgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBmaWVsZCBpbnRvIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByYXdJbmZvXG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBhZGRGaWVsZChuYW1lLCByYXdJbmZvKSB7ICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuaGFzRmllbGQobmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgbmFtZSBbJHtuYW1lfV0gY29uZmxpY3RzIGluIGVudGl0eSBbJHt0aGlzLm5hbWV9XS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydDogcmF3SW5mby50eXBlO1xuXG4gICAgICAgIGxldCBmaWVsZDtcblxuICAgICAgICBpZiAocmF3SW5mbyBpbnN0YW5jZW9mIEZpZWxkKSB7XG4gICAgICAgICAgICBmaWVsZCA9IHJhd0luZm8uY2xvbmUoKTtcbiAgICAgICAgICAgIGZpZWxkLm5hbWUgPSBuYW1lOyAvLyB0b2RvOiBkaXNwbGF5TmFtZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZ1bGxSYXdJbmZvID0gdGhpcy5saW5rZXIudHJhY2tCYWNrVHlwZSh0aGlzLm9vbE1vZHVsZSwgcmF3SW5mbyk7XG5cbiAgICAgICAgICAgIGZpZWxkID0gbmV3IEZpZWxkKG5hbWUsIGZ1bGxSYXdJbmZvKTtcbiAgICAgICAgICAgIGZpZWxkLmxpbmsoKTtcbiAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZmllbGRzW25hbWVdID0gZmllbGQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmtleSkge1xuICAgICAgICAgICAgLy9tYWtlIHRoZSBmaXJzdCBmaWVsZCBhcyB0aGUgZGVmYXVsdCBrZXlcbiAgICAgICAgICAgIHRoaXMua2V5ID0gbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGZlYXR1cmUgaW50byB0aGUgZW50aXR5LCBlLmcuIGF1dG8gaW5jcmVtZW50IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0geyp9IGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFthbGxvd011bHRpcGxlPWZhbHNlXSAtIEFsbG93IG11bHRpcGxlIG9jY3VycmVuY2VcbiAgICAgKiBAcmV0dXJucyB7RW50aXR5fVxuICAgICAqL1xuICAgIGFkZEZlYXR1cmUobmFtZSwgZmVhdHVyZSwgYWxsb3dNdWx0aXBsZSkge1xuICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGxvd011bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzW25hbWVdID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbbmFtZV0ucHVzaChmZWF0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLm5hbWUgaW4gdGhpcy5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGZlYXR1cmUgZm91bmQ6ICR7bmFtZX0uIFR1cm4gb24gYWxsb3dNdWx0aXBsZSB0byBlbmFibGUgbXVsdGlwbGUgb2NjdXJyZW5jZSBvZiBhIGZlYXR1cmUuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbbmFtZV0gPSBmZWF0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGtleSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXkuPHN0cmluZz59IG5hbWUgLSBGaWVsZCBuYW1lIHRvIGJlIHVzZWQgYXMgdGhlIGtleVxuICAgICAqIEByZXR1cm5zIHtFbnRpdHl9XG4gICAgICovXG4gICAgc2V0S2V5KG5hbWUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhc3NvY2lhdGlvbiBpbmZvIGlmIHRoZXJlIGlzIGNvbm5lY3Rpb24gdG8gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIGVudGl0eS5cbiAgICAgKi9cbiAgICBnZXRSZWZlcmVuY2VUbyhlbnRpdHlOYW1lLCBpbmNsdWRlcywgZXhjbHVkZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mby5hc3NvY2lhdGlvbnMgJiYgXy5maW5kKFxuICAgICAgICAgICAgdGhpcy5pbmZvLmFzc29jaWF0aW9ucywgYXNzb2MgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5maW5kKGluY2x1ZGVzLCAodmFsdWUsIHByb3ApID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/ICF2YWx1ZShhc3NvY1twcm9wXSkgOiAhXy5pc0VxdWFsKGFzc29jW3Byb3BdLCB2YWx1ZSkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlcy5hc3NvY2lhdGlvbiAmJiBhc3NvYyA9PT0gZXhjbHVkZXMuYXNzb2NpYXRpb24pIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzLnR5cGUgJiYgYXNzb2MudHlwZSA9PT0gZXhjbHVkZXMudHlwZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZXMuYXNzb2NpYXRpb25zICYmIGV4Y2x1ZGVzLmFzc29jaWF0aW9ucy5pbmRleE9mKGFzc29jKSA+IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlcy50eXBlcyAmJiBleGNsdWRlcy50eXBlcy5pbmRleE9mKGFzc29jLnR5cGUpID4gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzLnByb3BzICYmIF8uZmluZChleGNsdWRlcy5wcm9wcywgcHJvcCA9PiBhc3NvY1twcm9wXSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzb2MuZGVzdEVudGl0eSA9PT0gZW50aXR5TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQga2V5IGZpZWxkIFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldEtleUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmtleSkgPyB0aGlzLmtleS5tYXAoa2YgPT4gdGhpcy5maWVsZHNba2ZdKSA6IHRoaXMuZmllbGRzW3RoaXMua2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHtNYXB9IFtzdGFja10gLSBSZWZlcmVuY2Ugc3RhY2sgdG8gYXZvaWQgcmVjdXJyZW5jZSBjb3B5XG4gICAgICogQHJldHVybnMge0VudGl0eX1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHsgICAgICAgIFxuICAgICAgICBzdXBlci5jbG9uZSgpO1xuXG4gICAgICAgIGxldCBlbnRpdHkgPSBuZXcgRW50aXR5KHRoaXMubGlua2VyLCB0aGlzLm5hbWUsIHRoaXMub29sTW9kdWxlLCB0aGlzLmluZm8pOyAgICAgICAgXG5cbiAgICAgICAgZGVlcENsb25lRmllbGQodGhpcywgZW50aXR5LCAnZGlzcGxheU5hbWUnKTtcbiAgICAgICAgZGVlcENsb25lRmllbGQodGhpcywgZW50aXR5LCAnY29tbWVudCcpO1xuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdmZWF0dXJlcycpO1xuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdmaWVsZHMnKTsgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2Fzc29jaWF0aW9ucycpOyAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2tleScpOyAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMsIGVudGl0eSwgJ2luZGV4ZXMnKTsgICAgICAgIFxuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLCBlbnRpdHksICdpbnRlcmZhY2VzJyk7XG5cbiAgICAgICAgZW50aXR5LmxpbmtlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG4gXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIHRoZSBlbnRpdHkgaW50byBhIHBsYWluIEpTT04gb2JqZWN0XG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsICAgICAgICAgICAgXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIGNvbW1lbnQ6IHRoaXMuY29tbWVudCwgICAgICAgICAgICBcbiAgICAgICAgICAgIC4uLih0aGlzLmJhc2VDbGFzc2VzID8geyBiYXNlQ2xhc3NlczogdGhpcy5iYXNlQ2xhc3NlcyB9IDoge30pLFxuICAgICAgICAgICAgZmVhdHVyZXM6IHRoaXMuZmVhdHVyZXMsICAgICAgICAgICAgXG4gICAgICAgICAgICBmaWVsZHM6IF8ubWFwVmFsdWVzKHRoaXMuZmllbGRzLCBmaWVsZCA9PiBmaWVsZC50b0pTT04oKSksXG4gICAgICAgICAgICBhc3NvY2lhdGlvbnM6IHRoaXMuYXNzb2NpYXRpb25zLFxuICAgICAgICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgICAgICAgIGluZGV4ZXM6IHRoaXMuaW5kZXhlc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9pbmhlcml0KGJhc2VFbnRpdHkpIHsgIFxuICAgICAgICBsZXQgb3ZlcnJpZGVJbmZvID0ge307XG5cbiAgICAgICAgaWYgKGJhc2VFbnRpdHkuYmFzZUNsYXNzZXMpIHtcbiAgICAgICAgICAgIGxldCBiYXNlQ2xhc3NlcyA9IGJhc2VFbnRpdHkuYmFzZUNsYXNzZXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJhc2VDbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlQ2xhc3NlcyA9IF8udW5pcShiYXNlQ2xhc3Nlcy5jb25jYXQodGhpcy5iYXNlQ2xhc3NlcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VDbGFzc2VzID0gYmFzZUNsYXNzZXMuY29uY2F0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmFzZUVudGl0eS5mZWF0dXJlcykge1xuICAgICAgICAgICAgbGV0IGJhc2VGZWF0dXJlcyA9IGRlZXBDbG9uZShiYXNlRW50aXR5LmZlYXR1cmVzKTtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7IC4uLnRoaXMuZmVhdHVyZXMsIC4uLmJhc2VGZWF0dXJlcyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJhc2VFbnRpdHkuZmllbGRzKSB7XG4gICAgICAgICAgICBsZXQgZmllbGRzID0gZGVlcENsb25lKGJhc2VFbnRpdHkuZmllbGRzKTtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzID0geyAuLi50aGlzLmZpZWxkcywgLi4uZmllbGRzIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKGJhc2VFbnRpdHksIHRoaXMsICdrZXknKTsgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChiYXNlRW50aXR5LmluZm8uaW5kZXhlcykge1xuICAgICAgICAgICAgbGV0IGluZGV4ZXMgPSBkZWVwQ2xvbmUoYmFzZUVudGl0eS5pbmZvLmluZGV4ZXMpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pbmZvLmluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBpbmRleGVzID0gaW5kZXhlcy5jb25jYXQodGhpcy5pbmZvLmluZGV4ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdmVycmlkZUluZm8uaW5kZXhlcyA9IGluZGV4ZXM7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGlmIChiYXNlRW50aXR5LmluZm8uYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgYXNzb2NzID0gZGVlcENsb25lKGJhc2VFbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMpO1xuXG4gICAgICAgICAgICBhc3NvY3MgPSBhc3NvY3MubWFwKGFzc29jID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzb2MuZGVzdEVudGl0eSA9PT0gYmFzZUVudGl0eS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hc3NvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RFbnRpdHk6IHRoaXMubmFtZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBhc3NvYztcbiAgICAgICAgICAgIH0pOyAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICh0aGlzLmluZm8uYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgYXNzb2NzID0gYXNzb2NzLmNvbmNhdCh0aGlzLmluZm8uYXNzb2NpYXRpb25zKTtcbiAgICAgICAgICAgIH0gICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG92ZXJyaWRlSW5mby5hc3NvY2lhdGlvbnMgPSBhc3NvY3M7XG4gICAgICAgIH0gICAgIFxuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KG92ZXJyaWRlSW5mbykpIHsgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbmZvID0gT2JqZWN0LmZyZWV6ZSh7IC4uLnRoaXMuaW5mbywgLi4ub3ZlcnJpZGVJbmZvIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGl0eTsiXX0=