"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const {
  _,
  fs,
  eachAsync_
} = Util;

const Linker = require('./Linker');

const Connector = require('../runtime/Connector');

const Validators = require('../runtime/Validators');

function createConnector(context, schemaName) {
  let deployment = context.schemaDeployment[schemaName];

  if (!deployment) {
    throw new Error(`Schema "${schemaName}" has no configured deployment and is ignored in modeling.`);
  }

  let {
    dataSource,
    connectionString,
    options
  } = deployment;
  let [driver] = dataSource.split('.');
  return Connector.createConnector(driver, connectionString, {
    logger: context.logger,
    ...options
  });
}

async function importDataFiles(migrator, folderName) {
  let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);
  let dataListFile = path.join(dataSetPath, 'index.list');

  if (!fs.existsSync(dataListFile)) {
    throw new Error(`Entry file of dataset "${folderName}" not found.`);
  }

  let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);
  return eachAsync_(dataList, async line => {
    line = line.trim();

    if (line.length > 0) {
      let dataFile = path.join(dataSetPath, line);

      if (!fs.existsSync(dataFile)) {
        throw new Error(`Data file "${dataFile}" not found.`);
      }

      await migrator.load_(dataFile);
    }
  });
}

exports.build_ = async context => {
  context.logger.log('verbose', 'Start building models ...');
  let linker = new Linker(context);
  context.linker = linker;
  let schemaFiles = Linker.getOolongFiles(context.dslSourcePath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));

  let schemaToConnector = _.mapValues(linker.schemas, (_, schemaName) => {
    let connector = createConnector(context, schemaName);

    if (!connector) {
      throw new Error("Assertion failed: connector");
    }

    return connector;
  });

  return eachAsync_(linker.schemas, async (schema, schemaName) => {
    context.logger.log('verbose', `Processing schema "${schemaName}" ...`);
    let deploymentSetting = context.schemaDeployment[schemaName];
    let connector = schemaToConnector[schemaName];

    try {
      let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

      let dbModeler = new DbModeler(context, connector, deploymentSetting.extraOptions);
      let refinedSchema = dbModeler.modeling(schema, schemaToConnector);
      schemaToConnector[schemaName] = connector.database;

      const DaoModeler = require('../modeler/Dao');

      let daoModeler = new DaoModeler(context, connector);
      await daoModeler.modeling_(refinedSchema);
    } catch (error) {
      throw error;
    } finally {
      await connector.end_();
    }
  });
};

exports.migrate_ = async (context, reset = false) => {
  context.logger.log('verbose', 'Start deploying models ...');

  if (reset) {
    await eachAsync_(Object.keys(context.schemaDeployment).reverse(), async schemaName => {
      let connector = createConnector(context, schemaName);

      if (!connector) {
        throw new Error("Assertion failed: connector");
      }

      try {
        let Migration = require(`../migration/${connector.driver}`);

        let migration = new Migration(context, schemaName, connector);
        await migration.reset_();
      } catch (error) {
        throw error;
      } finally {
        await connector.end_();
      }
    });
  }

  return eachAsync_(context.schemaDeployment, async (deployment, schemaName) => {
    let connector = createConnector(context, schemaName);

    if (!connector) {
      throw new Error("Assertion failed: connector");
    }

    try {
      let Migration = require(`../migration/${connector.driver}`);

      let migration = new Migration(context, schemaName, connector);
      await migration.create_(deployment.extraOptions);
      await importDataFiles(migration, '_init');
    } catch (error) {
      throw error;
    } finally {
      await connector.end_();
    }
  });
};

exports.dataset_ = async (context, schemaName) => {
  let connector = createConnector(context, schemaName);

  if (!connector) {
    throw new Error("Assertion failed: connector");
  }

  let dataSetPath = path.join(context.scriptSourcePath, connector.driver, connector.database, 'data');

  if (!fs.existsSync(dataSetPath)) {
    return [];
  } else {
    let dataSets = fs.readdirSync(dataSetPath);
    let validDs = [];
    dataSets.forEach(ds => {
      let indexFile = path.join(dataSetPath, ds, 'index.list');

      if (fs.existsSync(indexFile)) {
        validDs.push(ds);
      }
    });
    return validDs;
  }
};

exports.import_ = async (context, schemaName, datasetName) => {
  let connector = createConnector(context, schemaName);

  if (!connector) {
    throw new Error("Assertion failed: connector");
  }

  try {
    let Migration = require(`../migration/${connector.driver}`);

    let migration = new Migration(context, schemaName, connector);
    await importDataFiles(migration, datasetName);
  } catch (error) {
    throw error;
  } finally {
    await connector.end_();
  }
};

exports.reverse_ = async context => {
  let ReserveEngineering = require(`../modeler/database/${context.driver}/ReverseEngineering`);

  let {
    connection: connectionString,
    ...options
  } = context.connOptions;
  let connector = Connector.createConnector(context.driver, connectionString, {
    logger: context.logger,
    ...options
  });

  if (!connector) {
    throw new Error("Assertion failed: connector");
  }

  try {
    let modeler = new ReserveEngineering(context, connector);
    await modeler.reverse_(context.dslReverseOutputPath);
  } catch (error) {
    throw error;
  } finally {
    await connector.end_();
  }
};

exports.getValidatorList = () => {
  return Object.keys(Validators);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,