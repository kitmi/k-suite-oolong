"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const {
  _,
  fs,
  eachAsync_
} = Util;

const Linker = require('./Linker');

const Connector = require('../runtime/Connector');

function createConnector(context, schemaName) {
  let deployment = context.schemaDeployment[schemaName];

  if (!deployment) {
    context.logger.log('warn', `Schema "${schemaName}" has no configured deployment and is ignored in modeling.`);
    return;
  }

  let {
    dataSource,
    connectionString,
    options
  } = deployment;
  let [driver] = dataSource.split('.');
  return Connector.createConnector(driver, connectionString, {
    logger: context.logger,
    ...options
  });
}

async function importDataFiles(migrator, folderName) {
  let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);
  let dataListFile = path.join(dataSetPath, 'index.list');

  if (!fs.existsSync(dataListFile)) {
    return;
  }

  let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);
  return eachAsync_(dataList, async line => {
    line = line.trim();

    if (line.length > 0) {
      let dataFile = path.join(dataSetPath, line);

      if (!fs.existsSync(dataFile)) {
        return Promise.reject(`Data file "${dataFile}" not found.`);
      }

      await migrator.load_(dataFile);
    }
  });
}

exports.build_ = async context => {
  context.logger.log('verbose', 'Start building models ...');
  let linker = new Linker(context);
  context.linker = linker;
  let schemaFiles = Linker.getOolongFiles(context.dslSourcePath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));
  return eachAsync_(linker.schemas, async (schema, schemaName) => {
    let connector = createConnector(context, schemaName);

    if (!connector) {
      throw new Error("Assertion failed: connector");
    }

    try {
      let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

      let dbModeler = new DbModeler(context, connector);
      let refinedSchema = dbModeler.modeling(schema);

      const DaoModeler = require('../modeler/Dao');

      let daoModeler = new DaoModeler(context, connector);
      await daoModeler.modeling_(refinedSchema);
    } catch (error) {
      throw error;
    } finally {
      await connector.end_();
    }
  });
};

exports.migrate_ = async (context, reset = false) => {
  context.logger.log('verbose', 'Start deploying models ...');
  return eachAsync_(context.schemaDeployment, async (deployment, schemaName) => {
    let connector = createConnector(context, schemaName);

    if (!connector) {
      throw new Error("Assertion failed: connector");
    }

    try {
      let Migration = require(`../migration/${connector.driver}`);

      let migration = new Migration(context, schemaName, connector);

      if (reset) {
        await migration.reset_();
      }

      await migration.create_();
      await importDataFiles(migration, '_init');
    } catch (error) {
      throw error;
    } finally {
      await connector.end_();
    }
  });
};

exports.import = async (context, db, dataSetDir) => {
  let [dbType] = db.split(':');
  let dataListFile = path.join(dataSetDir, 'index.list');

  if (!fs.existsSync(dataListFile)) {
    return Promise.reject(`Data entry list file "${dataListFile}" not found.`);
  }

  let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);

  let Deployer = require(`../deployer/db/${dbType}.js`);

  let service = context.currentApp.getService(db);
  let deployer = new Deployer(context, service);
  return Util.eachAsync_(dataList, async line => {
    line = line.trim();

    if (line.length > 0) {
      let dataFile = path.join(dataSetDir, line);

      if (!fs.existsSync(dataFile)) {
        return Promise.reject(`Data file "${dataFile}" not found.`);
      }

      await deployer.loadData(dataFile);
    }
  });
};

exports.reverse_ = async context => {
  let ReserveEngineering = require(`../modeler/database/${context.driver}/ReverseEngineering`);

  let {
    connection: connectionString,
    ...options
  } = context.connOptions;
  let connector = Connector.createConnector(context.driver, connectionString, {
    logger: context.logger,
    ...options
  });

  if (!connector) {
    throw new Error("Assertion failed: connector");
  }

  try {
    let modeler = new ReserveEngineering(context, connector);
    await modeler.reverse_(context.dslReverseOutputDir);
  } catch (error) {
    throw error;
  } finally {
    await connector.end_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,