/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,21,27,38,84,203,209],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,45,76,78,79,83,94,95,121,122,123,125,127,135,165,202,205,218,225,227,229,230,245,257,267],$Vc=[1,56],$Vd=[1,66],$Ve=[1,69],$Vf=[1,60],$Vg=[1,61],$Vh=[1,62],$Vi=[1,65],$Vj=[1,67],$Vk=[1,68],$Vl=[1,70],$Vm=[17,76,78,79,94],$Vn=[2,63],$Vo=[2,94],$Vp=[1,107],$Vq=[17,20,76,78,79,153,154,166,174,179,180,194,205,241,243,245,267,275,276,278,279,280,281,282,283,286,287],$Vr=[1,118],$Vs=[1,124],$Vt=[17,94],$Vu=[2,69],$Vv=[1,133],$Vw=[1,134],$Vx=[1,135],$Vy=[17,76,78,79,94,257],$Vz=[1,137],$VA=[1,150],$VB=[1,151],$VC=[1,152],$VD=[1,153],$VE=[1,154],$VF=[1,155],$VG=[1,156],$VH=[1,167],$VI=[17,20,76,78,79,95,153,154,166,174,179,180,194,205,241,243,245,267,275,276,278,279,280,281,282,283,286,287],$VJ=[179,267],$VK=[1,172],$VL=[17,20,153,154,166,174,179,180,194,205,241,243,245,267,275,276,278,279,280,281,282,283,286,287],$VM=[2,248],$VN=[1,174],$VO=[2,103],$VP=[1,177],$VQ=[17,20,94,153,154,166,174,179,180,194,205,241,243,245,267,275,276,278,279,280,281,282,283,286,287],$VR=[20,95,98,104,128,130,136,139],$VS=[1,197],$VT=[16,257],$VU=[2,197],$VV=[1,211],$VW=[1,212],$VX=[1,213],$VY=[1,214],$VZ=[17,20,76,78,79,94,153,154,166,174,179,180,194,205,241,243,245,267,275,276,278,279,280,281,282,283,286,287],$V_=[1,225],$V$=[17,135,205],$V01=[2,136],$V11=[1,246],$V21=[194,245],$V31=[1,268],$V41=[1,269],$V51=[1,270],$V61=[1,271],$V71=[1,274],$V81=[20,231,234,235,246,249],$V91=[1,291],$Va1=[1,290],$Vb1=[1,288],$Vc1=[1,289],$Vd1=[1,286],$Ve1=[1,287],$Vf1=[20,95,153,154,165,225,227,229,230,231,234,235,246,249],$Vg1=[17,95],$Vh1=[20,234,235,246,249],$Vi1=[1,330],$Vj1=[1,332],$Vk1=[16,177,192,247,248,257,258,259,260,261,262,266,276],$Vl1=[16,20,257],$Vm1=[17,127],$Vn1=[1,349],$Vo1=[17,125,127],$Vp1=[20,235,246,249],$Vq1=[17,20,153,154,166,174],$Vr1=[17,20,153,154,166,174,179,286,287],$Vs1=[1,374],$Vt1=[1,376],$Vu1=[1,375],$Vv1=[1,372],$Vw1=[1,373],$Vx1=[1,377],$Vy1=[1,378],$Vz1=[1,379],$VA1=[1,380],$VB1=[1,381],$VC1=[1,392],$VD1=[20,246,249],$VE1=[1,411],$VF1=[1,412],$VG1=[1,442],$VH1=[1,443],$VI1=[20,249],$VJ1=[1,451],$VK1=[17,240,241,242,243,245],$VL1=[1,460],$VM1=[20,174],$VN1=[20,153,154,174],$VO1=[1,492],$VP1=[17,245],$VQ1=[1,518],$VR1=[1,521],$VS1=[20,170,171],$VT1=[1,541],$VU1=[17,20,165,170,171];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"const":21,"const_statement_item":22,"const_statement_block":23,"identifier":24,"=":25,"literal":26,"schema":27,"identifier_or_string":28,"schema_statement_block":29,"comment_or_not":30,"schema_entities":31,"schema_views_or_not":32,"schema_views":33,"entities":34,"schema_entities_block":35,"views":36,"schema_views_block":37,"type":38,"type_statement_item":39,"type_statement_block":40,"type_base":41,"type_info_or_not":42,"type_modifiers_or_not":43,"field_comment_or_not":44,":":45,"types":46,"int_keyword":47,"number_keyword":48,"text_keyword":49,"bool_keyword":50,"binary_keyword":51,"datetime_keyword":52,"any":53,"enum":54,"array":55,"object":56,"int":57,"integer":58,"number":59,"float":60,"decimal":61,"text":62,"string":63,"bool":64,"boolean":65,"blob":66,"binary":67,"buffer":68,"datetime":69,"timestamp":70,"type_infos":71,"type_info":72,"narrow_function_call":73,"type_modifiers":74,"type_modifier":75,"|~":76,"general_function_call":77,"|>":78,"|=":79,"entity_statement_header":80,"entity_statement_block":81,"entity_statement_header0":82,"extends":83,"entity":84,"entity_sub_items":85,"entity_sub_item":86,"with_features":87,"has_fields":88,"associations_statement":89,"key_statement":90,"index_statement":91,"data_statement":92,"interfaces_statement":93,"--":94,"with":95,"with_features_block":96,"feature_inject":97,"has":98,"has_fields_block":99,"field_item":100,"field_item_body":101,"modifiable_field":102,"type_base_or_not":103,"associations":104,"associations_block":105,"association_item":106,"hasOne":107,"association_item_option0":108,"association_item_option1":109,"hasMany":110,"association_item_option2":111,"association_item_option3":112,"association_item_option4":113,"refersTo":114,"association_item_option5":115,"association_item_option6":116,"belongsTo":117,"association_item_option7":118,"association_item_option8":119,"association_through":120,"through":121,"connected":122,"by":123,"association_as":124,"as":125,"association_optional":126,"optional":127,"key":128,"array_of_identifier_or_string":129,"index":130,"index_item":131,"index_statement_block":132,"index_item_body":133,"index_item_option0":134,"unique":135,"data":136,"inline_object":137,"inline_array":138,"interface":139,"interfaces_statement_block":140,"interface_definition":141,"interface_definition_body":142,"accept_or_not":143,"implementation":144,"return_or_not":145,"accept_statement":146,"accept":147,"modifiable_param":148,"accept_block":149,"operation":150,"find_one_operation":151,"find_one_keywords":152,"findOne":153,"find":154,"article_keyword":155,"selection_inline_keywords":156,"conditional_expression":157,"case_statement":158,"cases_keywords":159,"cases":160,"below":161,"case_condition_block":162,"otherwise_statement":163,"case_condition_item":164,"when":165,"=>":166,"condition_as_result_expression":167,"otherwise_keywords":168,"stop_controll_flow_expression":169,"otherwise":170,"else":171,"return_expression":172,"throw_error_expression":173,"return":174,"modifiable_value":175,"throw":176,"(":177,"gfc_param_list":178,")":179,"unless":180,"return_condition_block":181,"return_condition_item":182,"update_operation":183,"update":184,"where_expr":185,"create_operation":186,"create":187,"delete_operation":188,"delete":189,"coding_block":190,"do":191,"{":192,"javascript":193,"}":194,"assign_operation":195,"set":196,"identifier_or_member_access":197,"<-":198,"value":199,"variable_modifier_or_not":200,"entity_fields_selections":201,"->":202,"dataset":203,"dataset_statement_block":204,"is":205,"article_keyword_or_not":206,"dataset_join_with_item":207,"dataset_join_with_block":208,"view":209,"view_statement_block":210,"view_main_entity":211,"view_selection_or_not":212,"group_by_or_not":213,"having_or_not":214,"order_by_or_not":215,"skip_or_not":216,"limit_or_not":217,"list":218,"view_selection":219,"a":220,"an":221,"the":222,"one":223,"selection_attributive_keywords":224,"of":225,"which":226,"where":227,"selection_keywords":228,"selectedBy":229,"selected":230,"group":231,"identifier_string_or_dotname_list":232,"identifier_string_or_dotname_block":233,"having":234,"order":235,"order_by_list":236,"order_by_block":237,"order_by_clause":238,"identifier_string_or_dotname":239,"ascend":240,"<":241,"descend":242,">":243,"order_by_list0":244,",":245,"offset":246,"INTEGER":247,"REFERENCE":248,"limit":249,"gfc_param0":250,"nfc_param_list":251,"nfc_param":252,"nfc_param_list0":253,"gfc_param_list0":254,"DOTNAME":255,"identifier_string_or_dotname_list0":256,"NAME":257,"FLOAT":258,"BOOL":259,"REGEXP":260,"SCRIPT":261,"SYMBOL":262,"kv_pairs":263,"kv_pair_item":264,"kv_pairs0":265,"[":266,"]":267,"identifier_or_string_list":268,"identifier_or_string_list0":269,"simple_expression":270,"logical_expression":271,"boolean_expression":272,"unary_expression":273,"binary_expression":274,"exists":275,"not":276,"null":277,"~":278,">=":279,"<=":280,"==":281,"!=":282,"in":283,"logical_expression_right":284,"logical_operators":285,"and":286,"or":287,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",21:"const",25:"=",27:"schema",34:"entities",36:"views",38:"type",45:":",53:"any",54:"enum",55:"array",56:"object",57:"int",58:"integer",59:"number",60:"float",61:"decimal",62:"text",63:"string",64:"bool",65:"boolean",66:"blob",67:"binary",68:"buffer",69:"datetime",70:"timestamp",76:"|~",78:"|>",79:"|=",83:"extends",84:"entity",94:"--",95:"with",98:"has",104:"associations",107:"hasOne",110:"hasMany",114:"refersTo",117:"belongsTo",121:"through",122:"connected",123:"by",125:"as",127:"optional",128:"key",130:"index",135:"unique",136:"data",139:"interface",147:"accept",153:"findOne",154:"find",160:"cases",161:"below",165:"when",166:"=>",170:"otherwise",171:"else",174:"return",176:"throw",177:"(",179:")",180:"unless",184:"update",185:"where_expr",187:"create",189:"delete",191:"do",192:"{",193:"javascript",194:"}",196:"set",197:"identifier_or_member_access",198:"<-",200:"variable_modifier_or_not",202:"->",203:"dataset",205:"is",209:"view",218:"list",220:"a",221:"an",222:"the",223:"one",225:"of",226:"which",227:"where",229:"selectedBy",230:"selected",231:"group",234:"having",235:"order",240:"ascend",241:"<",242:"descend",243:">",245:",",246:"offset",247:"INTEGER",248:"REFERENCE",249:"limit",255:"DOTNAME",257:"NAME",258:"FLOAT",259:"BOOL",260:"REGEXP",261:"SCRIPT",262:"SYMBOL",266:"[",267:"]",275:"exists",276:"not",277:"null",278:"~",279:">=",280:"<=",281:"==",282:"!=",283:"in",286:"and",287:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[19,2],[19,3],[9,3],[9,5],[22,3],[23,2],[23,3],[11,6],[29,3],[32,0],[32,1],[31,5],[35,2],[35,3],[33,5],[37,2],[37,3],[10,3],[10,5],[39,5],[40,2],[40,3],[41,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[50,1],[50,1],[51,1],[51,1],[51,1],[52,1],[52,1],[42,0],[42,1],[71,1],[71,2],[72,1],[72,1],[43,0],[43,1],[74,1],[74,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[12,2],[12,5],[80,1],[80,3],[82,2],[81,2],[85,1],[85,2],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[30,0],[30,3],[87,5],[96,2],[96,3],[88,5],[99,2],[99,3],[100,2],[44,0],[44,2],[101,1],[103,0],[103,1],[89,5],[105,2],[105,3],[106,4],[106,5],[106,4],[106,4],[120,2],[120,3],[124,2],[126,1],[90,3],[90,3],[91,3],[91,5],[132,2],[132,3],[131,1],[131,3],[133,1],[133,1],[92,3],[92,3],[93,5],[140,1],[140,2],[141,5],[142,3],[143,0],[143,1],[146,3],[146,5],[149,2],[149,3],[144,1],[144,2],[150,1],[152,1],[152,2],[151,4],[151,3],[159,1],[159,2],[159,4],[158,5],[158,6],[164,4],[162,1],[162,2],[163,4],[163,4],[163,7],[168,1],[168,1],[169,1],[169,1],[167,2],[167,5],[172,2],[173,2],[173,2],[173,5],[145,0],[145,2],[145,6],[182,4],[182,4],[181,2],[181,3],[183,6],[186,5],[188,4],[190,5],[195,6],[201,1],[201,3],[14,6],[204,3],[208,1],[208,2],[207,2],[207,7],[13,6],[210,9],[211,3],[211,4],[212,0],[212,1],[219,3],[206,0],[206,1],[155,1],[155,1],[155,1],[155,1],[224,2],[224,1],[224,1],[224,1],[228,1],[228,2],[156,1],[156,1],[213,0],[213,4],[213,6],[214,0],[214,3],[215,0],[215,4],[215,6],[237,2],[237,3],[238,1],[238,2],[238,2],[238,2],[238,2],[236,1],[236,2],[244,2],[244,3],[216,0],[216,3],[216,3],[217,0],[217,3],[217,3],[102,4],[175,1],[175,2],[148,1],[97,1],[97,1],[73,4],[251,1],[251,2],[253,2],[253,3],[252,1],[252,1],[77,4],[178,1],[178,2],[254,2],[254,3],[250,1],[250,1],[250,1],[239,1],[239,1],[239,1],[233,2],[233,3],[232,1],[232,2],[256,2],[256,3],[28,1],[28,1],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[137,2],[137,3],[264,3],[264,3],[263,1],[263,2],[265,2],[265,3],[138,2],[138,3],[129,3],[268,1],[268,2],[269,2],[269,3],[199,1],[199,1],[157,1],[157,1],[157,1],[270,1],[270,1],[270,3],[273,2],[273,3],[273,3],[273,4],[273,4],[272,3],[272,3],[272,3],[274,3],[274,3],[274,3],[274,3],[274,3],[274,3],[274,3],[274,4],[271,2],[284,2],[285,1],[285,1],[108,0],[108,1],[109,0],[109,1],[111,0],[111,1],[112,0],[112,1],[113,0],[113,1],[115,0],[115,1],[116,0],[116,1],[118,0],[118,1],[119,0],[119,1],[134,0],[134,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-1] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-1] };
break;
case 30: case 97: case 109: case 123: case 140: case 175: case 219: case 260:
this.$ = [ $$[$0-1] ];
break;
case 31: case 98: case 110: case 124: case 141: case 176: case 220: case 261:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 185: case 284:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 102: case 133: case 283: case 285:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 142: case 155: case 186: case 226: case 228: case 243: case 245: case 250: case 252: case 262: case 264: case 289: case 291:
this.$ = [ $$[$0] ];
break;
case 72: case 143: case 156: case 187: case 227: case 229: case 244: case 246: case 251: case 253: case 265: case 290: case 292:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ];
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { comment: $$[$0-1] };
break;
case 96:
this.$ = { features: $$[$0-1] };
break;
case 99:
this.$ = { fields: $$[$0-1] };
break;
case 100:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 101:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 104:
this.$ = { comment: $$[$0] };
break;
case 108:
this.$ = { associations: $$[$0-1] };
break;
case 111:
this.$ = { type: 'hasOne', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 112:
this.$ = { type: 'hasMany', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 113:
this.$ = { type: 'refersTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 114:
this.$ = { type: 'belongsTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 115: case 116:
this.$ = { connectedBy: $$[$0] };
break;
case 117:
this.$ = { srcField: $$[$0] };
break;
case 118:
this.$ = { optional: true };
break;
case 119: case 120:
this.$ = { key: $$[$0-1] };
break;
case 121:
this.$ = { indexes: [$$[$0-1]] };
break;
case 122:
this.$ = { indexes: $$[$0-1] };
break;
case 126:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 127: case 128:
this.$ = { fields: $$[$0] };
break;
case 129: case 130:
this.$ = { data: $$[$0-1] };
break;
case 131:
this.$ = { interfaces: $$[$0-1] };
break;
case 132:
this.$ = Object.assign({}, $$[$0]);
break;
case 134:
this.$ = { [$$[$0-4]]: $$[$0-1] };
break;
case 135:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 138:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 139:
this.$ = { accept: $$[$0-1] };
break;
case 147:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 148:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 152:
this.$ = { oolType: 'cases', items: $$[$0-1] };
break;
case 153:
this.$ = { oolType: 'cases', items: $$[$0-2], else: $$[$0-1] } ;
break;
case 154:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 157: case 158: case 188: case 279: case 287: case 288: case 300:
this.$ = $$[$0-1];
break;
case 159: case 165:
this.$ = $$[$0-2];
break;
case 166:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 167:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 168:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 169:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 171:
 this.$ = { return: $$[$0-1] }; 
break;
case 172:
 this.$ = { return: Object.assign($$[$0-5], { exceptions: $$[$0-1] }) }; 
break;
case 173: case 174:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 177:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 178:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 179:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 180:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 181:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 182:
this.$ = { entity: $$[$0] }     ;
break;
case 183:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 184:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 189:
this.$ = { ...$$[$0-6], with: $$[$0-1] };
break;
case 190:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 191:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 192:
this.$ = { dataset: $$[$0] };
break;
case 193:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 196:
this.$ = { condition: $$[$0-1] };
break;
case 212: case 213:
this.$ = { groupBy: $$[$0-1] };
break;
case 215:
this.$ = { having: $$[$0-1] };
break;
case 217: case 218:
this.$ = { orderBy: $$[$0-1] };
break;
case 221:
this.$ = { field: $$[$0], ascend: true };
break;
case 222: case 223:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 224: case 225:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 231: case 232:
this.$ = { offset: $$[$0-1] };
break;
case 234: case 235:
this.$ = { limit: $$[$0-1] };
break;
case 236:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 238:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 242: case 249:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 248:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 263:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 278:
this.$ = {};
break;
case 280: case 281:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 286:
this.$ = [];
break;
case 294:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 301:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 302:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 303:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 304:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 305:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 306: case 307:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 308:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 309:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 310:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 311:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 312:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 313:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 314:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 315:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 316:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 317:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 318:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 319:
this.$ = { operator: 'and' };
break;
case 320:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,84:$V4,203:$V5,209:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,84:$V4,203:$V5,209:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],22:26,24:28,257:$V8},{16:$V9,17:[1,31],24:33,28:32,39:30,257:$V8},{16:$V9,24:33,28:35,257:$V8},{17:[1,36]},{16:$V9,24:33,28:37,257:$V8},{16:$V9,24:33,28:38,257:$V8},{17:[2,81],83:[1,39]},{16:$V9,24:33,28:40,257:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{25:[1,45]},o([17,20,25,45,76,78,79,83,94,95,121,122,123,125,127,135,153,154,165,166,174,177,179,180,194,202,205,218,225,227,229,230,240,241,242,243,245,257,267,275,276,278,279,280,281,282,283,286,287],[2,268]),{17:[1,46]},{18:[1,47]},{41:48,45:$Va},o($Vb,[2,266]),o($Vb,[2,267]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,24:33,28:54,257:$V8},o([17,83],[2,83]),o($V7,[2,13]),{16:$Vc,19:55},o($V7,[2,17]),{22:58,23:57,24:28,257:$V8},{16:$Vd,26:59,137:63,138:64,192:$Ve,247:$Vf,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($V7,[2,32]),{16:$V9,24:33,28:32,39:72,40:71,257:$V8},o($Vm,$Vn,{42:73,71:74,72:75,24:76,73:77,257:$V8}),{16:$V9,24:33,28:89,46:78,47:79,48:80,49:81,50:82,51:83,52:84,53:[1,85],54:[1,86],55:[1,87],56:[1,88],57:[1,90],58:[1,91],59:[1,92],60:[1,93],61:[1,94],62:[1,95],63:[1,96],64:[1,97],65:[1,98],66:[1,99],67:[1,100],68:[1,101],69:[1,102],70:[1,103],257:$V8},{18:[1,104]},o([95,98,104,128,130,136,139],$Vo,{81:105,30:106,94:$Vp}),{18:[1,108]},{18:[1,109]},{17:[2,82]},{20:[1,110]},{17:[1,111]},{20:[1,112]},{17:[1,113]},{17:[2,19]},o($Vq,[2,269]),o($Vq,[2,270]),o($Vq,[2,271]),o($Vq,[2,272]),o($Vq,[2,273]),o($Vq,[2,274]),o($Vq,[2,275]),o($Vq,[2,276]),o($Vq,[2,277]),{16:$V9,24:33,28:117,194:[1,114],247:$Vr,257:$V8,263:115,264:116},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:121,178:120,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,267:[1,119]},{20:[1,128]},{17:[1,129]},o($Vt,$Vu,{43:130,74:131,75:132,76:$Vv,78:$Vw,79:$Vx}),o($Vm,[2,64]),o($Vm,[2,65],{72:75,24:76,73:77,71:136,257:$V8}),o($Vy,[2,67],{177:$Vz}),o($Vy,[2,68]),o($Vy,[2,37]),o($Vy,[2,38]),o($Vy,[2,39]),o($Vy,[2,40]),o($Vy,[2,41]),o($Vy,[2,42]),o($Vy,[2,43]),o($Vy,[2,44]),o($Vy,[2,45]),o($Vy,[2,46]),o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),o($Vy,[2,50]),o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,[2,62]),{29:138,30:139,34:$Vo,94:$Vp},{20:[1,140]},{85:141,86:142,87:143,88:144,89:145,90:146,91:147,92:148,93:149,95:$VA,98:$VB,104:$VC,128:$VD,130:$VE,136:$VF,139:$VG},{16:[1,157]},{205:[1,160],210:158,211:159},{204:161,205:[1,162]},o($V7,[2,14]),{16:$Vc,19:163,20:[2,15]},o($V7,[2,18]),{20:[2,20],22:58,23:164,24:28,257:$V8},o($Vq,[2,278]),{194:[1,165]},{194:[2,282],245:$VH,265:166},{45:[1,168]},{45:[1,169]},o($VI,[2,286]),{267:[1,170]},o($VJ,[2,250],{254:171,245:$VK}),o($VL,[2,237],{75:132,74:173,76:$Vv,78:$Vw,79:$Vx}),o($Vq,[2,254]),o($Vq,[2,255]),o($Vq,[2,256]),o($Vq,[2,247]),o($Vq,$VM,{177:$VN}),o($V7,[2,33]),{16:$V9,20:[2,35],24:33,28:32,39:72,40:175,257:$V8},{17:$VO,44:176,94:$VP},o($Vt,[2,70]),o($VQ,[2,71],{75:132,74:178,76:$Vv,78:$Vw,79:$Vx}),{24:179,77:180,257:$V8},{24:181,77:182,257:$V8},{24:183,77:184,257:$V8},o($Vm,[2,66]),{16:$Vd,24:187,26:126,137:63,138:64,192:$Ve,247:$Vf,251:185,252:186,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{20:[1,188]},{31:189,34:[1,190]},o($V7,[2,80]),{20:[2,84]},{20:[2,85],85:191,86:142,87:143,88:144,89:145,90:146,91:147,92:148,93:149,95:$VA,98:$VB,104:$VC,128:$VD,130:$VE,136:$VF,139:$VG},o($VR,[2,87]),o($VR,[2,88]),o($VR,[2,89]),o($VR,[2,90]),o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,93]),{17:[1,192]},{17:[1,193]},{17:[1,194]},{16:$V9,24:33,28:195,129:196,257:$V8,266:$VS},{16:$V9,17:[1,199],24:33,28:201,129:202,131:198,133:200,257:$V8,266:$VS},{137:203,138:204,192:$Ve,266:$Vl},{17:[1,205]},{17:[1,206]},{20:[1,207]},{17:[1,208]},o($VT,$VU,{206:209,155:210,220:$VV,221:$VW,222:$VX,223:$VY}),{20:[1,215]},o($VT,$VU,{155:210,206:216,220:$VV,221:$VW,222:$VX,223:$VY}),{20:[2,16]},{20:[2,21]},o($Vq,[2,279]),{194:[2,283]},{16:$V9,24:33,28:117,247:$Vr,257:$V8,264:217},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:218,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:219,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($VI,[2,287]),o($VJ,[2,251]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:220,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($VL,[2,238]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:121,178:221,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{20:[2,36]},{17:[2,34]},{16:[1,222]},o($VQ,[2,72]),o($VZ,[2,73],{177:$VN}),o($VZ,[2,74]),o($VZ,[2,75],{177:$VN}),o($VZ,[2,76]),o($VZ,[2,77],{177:$VN}),o($VZ,[2,78]),{179:[1,223]},{179:[2,243],245:$V_,253:224},o([179,245],$VM),o($V7,[2,22]),{20:[2,24],32:226,33:227,36:[1,228]},{17:[1,229]},{20:[2,86]},{18:[1,230]},{18:[1,231]},{18:[1,232]},{17:[1,233]},{17:[1,234]},{16:$V9,24:33,28:236,257:$V8,268:235},{17:[1,237]},{18:[1,238]},{17:[2,125],134:239,135:[2,339],205:[1,240]},o($V$,[2,127]),o($V$,[2,128]),{17:[1,241]},{17:[1,242]},{18:[1,243]},o([34,95,98,104,128,130,136,139],[2,95]),o($V7,[2,190]),o([20,95,165,225,227,229,230,231,234,235,246,249],$V01,{143:244,146:245,147:$V11}),{16:$V9,24:33,28:247,257:$V8},o($VT,[2,198]),o($VT,[2,199]),o($VT,[2,200]),o($VT,[2,201]),o($VT,[2,202]),o($V7,[2,184]),{16:$V9,24:33,28:250,201:249,207:248,257:$V8},{194:[2,284],245:$VH,265:251},o($V21,[2,280]),o($V21,[2,281]),o($VJ,[2,252],{254:252,245:$VK}),{179:[1,253]},{17:[2,104]},o($Vy,[2,242]),{179:[2,244]},{16:$Vd,24:187,26:126,137:63,138:64,192:$Ve,247:$Vf,252:254,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{20:[2,23]},{20:[2,25]},{17:[1,255]},{18:[1,256]},{24:259,73:260,96:257,97:258,257:$V8},{16:$V9,24:33,28:265,99:261,100:262,101:263,102:264,257:$V8},{105:266,106:267,107:$V31,110:$V41,114:$V51,117:$V61},o($VR,[2,119]),o($VR,[2,120]),{267:[1,272]},{245:$V71,267:[2,289],269:273},o($VR,[2,121]),{16:$V9,24:33,28:201,129:202,131:276,132:275,133:200,257:$V8,266:$VS},{135:[1,277]},{135:[2,340]},o($VR,[2,129]),o($VR,[2,130]),{16:$V9,24:33,28:280,140:278,141:279,257:$V8},o($V81,[2,194],{212:281,219:282,156:283,228:284,224:285,95:$V91,165:$Va1,225:$Vb1,227:$Vc1,229:$Vd1,230:$Ve1}),o($Vf1,[2,137]),{16:$V9,17:[1,293],24:33,28:265,102:294,148:292,257:$V8},{17:[2,192],218:[1,295]},{20:[2,185]},{17:[1,296],95:[1,297]},o($Vg1,[2,182],{202:[1,298]}),{194:[2,285]},o($VJ,[2,253]),o($VZ,[2,249]),{179:[2,245],245:$V_,253:299},{18:[1,300]},{16:$V9,24:33,28:302,35:301,257:$V8},{20:[1,303]},{17:[1,304]},{17:[2,240],177:$Vz},{17:[2,241]},{20:[1,305]},{17:[1,306]},{17:$VO,44:307,94:$VP},o($Vt,[2,105]),o($Vy,[2,106],{103:308,41:309,45:$Va}),{20:[1,310]},{17:[1,311]},{16:$V9,24:33,28:312,257:$V8},{16:$V9,24:33,28:313,257:$V8},{16:$V9,24:33,28:314,257:$V8},{16:$V9,24:33,28:315,257:$V8},o($V$,[2,288]),{267:[2,290]},{16:$V9,24:33,28:316,257:$V8},{20:[1,317]},{17:[1,318]},{17:[2,126]},{20:[1,319]},{16:$V9,20:[2,132],24:33,28:280,140:320,141:279,257:$V8},{17:[1,321]},o($Vh1,[2,211],{213:322,231:[1,323]}),o($V81,[2,195]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:324,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},o($Vk1,[2,209]),o($Vk1,[2,210]),o($Vk1,[2,207]),{123:[1,333]},{226:[1,334]},o($Vk1,[2,204]),o($Vk1,[2,205]),o($Vk1,[2,206]),{17:[1,335]},{18:[1,336]},{17:[2,239]},{17:[2,193]},o($Vl1,[2,188]),{45:[1,337]},{138:338,266:$Vl},{179:[2,246]},{16:$V9,24:33,28:340,37:339,257:$V8},{20:[1,341]},{17:[1,342]},o($VR,[2,96]),{20:[2,97],24:259,73:260,96:343,97:258,257:$V8},o($VR,[2,99]),{16:$V9,20:[2,100],24:33,28:265,99:344,100:262,101:263,102:264,257:$V8},{17:[2,102]},o($Vm,$Vn,{71:74,72:75,24:76,73:77,42:345,257:$V8}),o($Vy,[2,107]),o($VR,[2,108]),{20:[2,109],105:346,106:267,107:$V31,110:$V41,114:$V51,117:$V61},o($Vm1,[2,321],{108:347,124:348,125:$Vn1}),o($Vo1,[2,325],{111:350,120:351,121:[1,352],122:[1,353]}),o($Vm1,[2,331],{115:354,124:355,125:$Vn1}),o($Vm1,[2,335],{118:356,124:357,125:$Vn1}),{245:$V71,267:[2,291],269:358},o($VR,[2,122]),{16:$V9,20:[2,123],24:33,28:201,129:202,131:276,132:359,133:200,257:$V8,266:$VS},o($VR,[2,131]),{20:[2,133]},{18:[1,360]},o($Vp1,[2,214],{214:361,234:[1,362]}),{123:[1,363]},{17:[1,364]},o($Vq1,[2,295],{284:365,285:366,286:[1,367],287:[1,368]}),o($Vq1,[2,296]),o($Vq1,[2,297]),o($Vr1,[2,298]),o($Vr1,[2,299]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:370,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:369,273:328,274:329,276:$Vj1},{205:$Vs1,241:$Vt1,243:$Vu1,275:$Vv1,276:$Vw1,278:[1,371],279:$Vx1,280:$Vy1,281:$Vz1,282:$VA1,283:$VB1},{177:[1,382]},o($Vk1,[2,208]),o($Vk1,[2,203]),o($Vf1,[2,138]),{16:$V9,24:33,28:265,102:294,148:384,149:383,257:$V8},{17:[1,385]},o($Vg1,[2,183]),{20:[1,386]},{17:[1,387]},o([20,36],[2,26]),{16:$V9,20:[2,27],24:33,28:302,35:388,257:$V8},{20:[2,98]},{20:[2,101]},o($Vt,$Vu,{74:131,75:132,43:389,76:$Vv,78:$Vw,79:$Vx}),{20:[2,110]},{17:[2,323],109:390,126:391,127:$VC1},o($Vm1,[2,322]),{16:$V9,24:33,28:393,257:$V8},o($Vm1,[2,327],{112:394,124:395,125:$Vn1}),o($Vo1,[2,326]),{16:$V9,24:33,28:396,257:$V8},{123:[1,397]},{17:[2,333],116:398,126:399,127:$VC1},o($Vm1,[2,332]),{17:[2,337],119:400,126:401,127:$VC1},o($Vm1,[2,336]),{267:[2,292]},{20:[2,124]},o([153,154],$V01,{146:245,142:402,143:403,147:$V11}),o($VD1,[2,216],{215:404,235:[1,405]}),{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:406,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{16:$VE1,17:[1,408],24:410,232:407,239:409,255:$VF1,257:$V8},o($V81,[2,196]),o($Vq1,[2,317]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:370,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:413,273:328,274:329,276:$Vj1},o($Vk1,[2,319]),o($Vk1,[2,320]),{179:[1,414]},{205:$Vs1,241:$Vt1,243:$Vu1,275:$Vv1,276:$Vw1,279:$Vx1,280:$Vy1,281:$Vz1,282:$VA1,283:$VB1},{24:415,77:417,257:$V8,260:[1,416]},o($Vr1,[2,301]),{275:[1,418],283:[1,419]},{276:[1,421],277:[1,420]},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:422,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:423,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:424,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:425,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:426,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:427,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:428,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:370,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:429,273:328,274:329,276:$Vj1},{20:[1,430]},{17:[1,431]},{18:[1,432]},{20:[2,29]},{16:$V9,20:[2,30],24:33,28:340,37:433,257:$V8},{20:[2,28]},o($Vt,[2,236]),{17:[2,111]},{17:[2,324]},{17:[2,118]},o($Vm1,[2,117]),{17:[2,329],113:434,126:435,127:$VC1},o($Vm1,[2,328]),o($Vo1,[2,115]),{16:$V9,24:33,28:436,257:$V8},{17:[2,113]},{17:[2,334]},{17:[2,114]},{17:[2,338]},{20:[1,437]},{144:438,150:439,151:440,152:441,153:$VG1,154:$VH1},o($VI1,[2,230],{216:444,246:[1,445]}),{123:[1,446]},{17:[1,447]},{17:[1,448]},{18:[1,449]},{17:[2,262],245:$VJ1,256:450},o($VK1,[2,257]),o($VK1,[2,258]),o($VK1,[2,259]),o($Vq1,[2,318]),o($Vr1,[2,300]),o($Vq1,[2,306],{177:$VN}),o($Vq1,[2,307]),o($Vq1,[2,308]),o($Vr1,[2,302]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:452,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($Vr1,[2,303]),{277:[1,453]},o($Vr1,[2,309]),o($Vr1,[2,310]),o($Vr1,[2,311]),o($Vr1,[2,312]),o($Vr1,[2,313]),o($Vr1,[2,314]),o($Vr1,[2,315]),{179:[1,454]},o($Vf1,[2,139]),{16:$V9,20:[2,140],24:33,28:265,102:294,148:384,149:455,257:$V8},{16:$V9,24:33,28:250,201:249,207:457,208:456,257:$V8},{20:[2,31]},{17:[2,112]},{17:[2,330]},o($Vo1,[2,116]),o($Vl1,[2,134]),{20:[2,170],145:458,172:459,174:$VL1},o($VM1,[2,142],{150:439,151:440,152:441,144:461,153:$VG1,154:$VH1}),o($VN1,[2,144]),{16:$V9,24:33,28:462,257:$V8},o($VT,[2,145]),{155:463,220:$VV,221:$VW,222:$VX,223:$VY},{20:[2,233],217:464,249:[1,465]},{247:[1,466],248:[1,467]},{16:$VE1,17:[1,469],24:410,236:468,238:470,239:471,255:$VF1,257:$V8},o($Vp1,[2,215]),o($Vh1,[2,212]),{16:$VE1,24:410,233:472,239:473,255:$VF1,257:$V8},{17:[2,263]},{16:$VE1,24:410,239:474,255:$VF1,257:$V8},o($Vr1,[2,316]),o($Vr1,[2,304]),o($Vr1,[2,305]),{20:[2,141]},{20:[1,475]},{16:$V9,20:[2,186],24:33,28:250,201:249,207:457,208:476,257:$V8},{20:[2,135]},{17:[1,477],180:[1,478]},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:479,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($VM1,[2,143]),{45:[1,483],95:$V91,123:[1,484],156:480,158:481,159:482,165:$Va1,224:285,225:$Vb1,227:$Vc1,228:284,229:$Vd1,230:$Ve1},o($VT,[2,146]),{20:[2,191]},{247:[1,485],248:[1,486]},{17:[1,487]},{17:[1,488]},{17:[1,489]},{18:[1,490]},{17:[2,226],244:491,245:$VO1},o($VP1,[2,221],{240:[1,493],241:[1,494],242:[1,495],243:[1,496]}),{20:[1,497]},{17:[1,498]},{17:[2,264],245:$VJ1,256:499},o($Vl1,[2,189]),{20:[2,187]},{20:[2,171]},{17:[1,500]},o([17,180],[2,166]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:501,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},o($VN1,[2,148]),{17:[1,502]},{17:[2,149]},{160:[1,503]},{17:[1,504]},{17:[1,505]},o($VI1,[2,231]),o($VI1,[2,232]),o($VD1,[2,217]),{16:$VE1,24:410,237:506,238:507,239:471,255:$VF1,257:$V8},{17:[2,227]},{16:$VE1,24:410,238:508,239:471,255:$VF1,257:$V8},o($VP1,[2,222]),o($VP1,[2,223]),o($VP1,[2,224]),o($VP1,[2,225]),o($Vh1,[2,213]),{16:$VE1,20:[2,260],24:410,233:509,239:473,255:$VF1,257:$V8},{17:[2,265]},{18:[1,510]},o($VN1,[2,147]),{18:[1,511]},{17:[2,150],125:[1,512]},{20:[2,234]},{20:[2,235]},{20:[1,513]},{17:[1,514]},{17:[2,228],244:515,245:$VO1},{20:[2,261]},{165:$VQ1,181:516,182:517},{162:519,164:520,165:$VR1},{161:[1,522]},o($VD1,[2,218]),{16:$VE1,20:[2,219],24:410,237:523,238:507,239:471,255:$VF1,257:$V8},{17:[2,229]},{20:[1,524]},{17:[1,525]},{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:526,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{20:[1,527],163:528,168:529,170:[1,530],171:[1,531]},o($VS1,[2,155],{164:520,162:532,165:$VR1}),{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:533,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{17:[2,151]},{20:[2,220]},{20:[2,172]},{20:[2,175],165:$VQ1,181:534,182:517},{166:[1,535]},o($VN1,[2,152]),{20:[1,536]},{166:[1,537]},{166:[2,160]},{166:[2,161]},o($VS1,[2,156]),{166:[1,538]},{20:[2,176]},{16:$Vd,24:127,26:126,77:125,137:63,138:64,173:540,175:539,176:$VT1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},o($VN1,[2,153]),{16:$Vd,17:[1,544],24:127,26:126,77:125,137:63,138:64,157:545,167:542,169:543,172:546,173:547,174:$VL1,175:331,176:$VT1,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{16:$Vd,17:[1,549],24:127,26:126,77:125,137:63,138:64,157:545,167:548,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{17:[2,173]},{17:[2,174]},{16:[1,550],24:551,257:$V8},{17:[1,552]},{17:[1,553]},{18:[1,554]},{17:[1,555]},{17:[2,162]},{17:[2,163]},o([20,165,170,171],[2,154]),{18:[1,556]},{17:[2,167]},{17:[2,168],177:[1,557]},{20:[2,157]},{20:[2,158]},{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:559,169:558,172:546,173:547,174:$VL1,175:331,176:$VT1,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},o($VU1,[2,164]),{16:$Vd,24:127,26:126,77:125,137:63,138:64,157:559,175:331,177:$Vi1,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl,270:325,271:326,272:327,273:328,274:329,276:$Vj1},{16:$Vd,24:127,26:126,77:125,137:63,138:64,175:121,178:560,192:$Ve,247:$Vf,248:$Vs,250:122,252:123,257:$V8,258:$Vg,259:$Vh,260:$Vi,261:$Vj,262:$Vk,266:$Vl},{17:[1,561]},{17:[1,562]},{179:[1,563]},{20:[1,564]},{20:[1,565]},{17:[2,169]},{20:[2,159]},o($VU1,[2,165])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],59:[2,19],141:[2,84],163:[2,16],164:[2,21],166:[2,283],175:[2,36],176:[2,34],191:[2,86],222:[2,104],224:[2,244],226:[2,23],227:[2,25],240:[2,340],248:[2,185],251:[2,285],260:[2,241],273:[2,290],277:[2,126],294:[2,239],295:[2,193],299:[2,246],307:[2,102],320:[2,133],343:[2,98],344:[2,101],346:[2,110],358:[2,292],359:[2,124],386:[2,29],388:[2,28],390:[2,111],391:[2,324],392:[2,118],398:[2,113],399:[2,334],400:[2,114],401:[2,338],433:[2,31],434:[2,112],435:[2,330],450:[2,263],455:[2,141],458:[2,135],464:[2,191],476:[2,187],477:[2,171],483:[2,149],491:[2,227],499:[2,265],504:[2,234],505:[2,235],509:[2,261],515:[2,229],522:[2,151],523:[2,220],524:[2,172],530:[2,160],531:[2,161],534:[2,176],539:[2,173],540:[2,174],546:[2,162],547:[2,163],550:[2,167],552:[2,157],553:[2,158],563:[2,169],564:[2,159]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set(['with', 'has', 'associations', 'key', 'index', 'data', 'interface']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'connected', 'by', 'through', 'as', 'optional']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw'])
    };

    const NEXT_STATE = {
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    const STATE_STOPPER = {        
        'entity.interface.find.when': new Set(['else', 'otherwise'])
    };

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['entity.key', 'entity.data', 'entity.interface.return.when'])
    ];

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when'        
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc, token) {
            
            token ? console.log(loc, token) : console.log(loc);
            console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented);                   
            console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
            console.log();
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            console.log('> enter state:', state, '\n');
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            console.log('< exit state:', state, '\n');
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    console.log('< exit state:', last, '\n');
                } while (last !== finalStateToExit);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oolType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');   
                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 20;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 261;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;

                                if (state.hasIndent && ONE_LINE_KEYWORDS[1].has(state.lastState)) {
                                    state.exitState(state.lastState);
                                }                                  

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 260;
                        
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 258;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 247;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 247;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 255;
                           
break;
case 24:
                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 262;
                           
break;
case 25:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 248;
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 259;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext);                                     

                                switch (state.lastState) {
                                    case 'schema':
                                        if (state.hasIndent && SUB_KEYWORDS['schema'].has(yy_.yytext)) {
                                            state.enterState('schema.' + yy_.yytext);
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'type': 
                                        state.enterState('type.name');
                                        return 257;

                                    case 'type.name':
                                        state.enterState('type.info');

                                        if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity':
                                        if (state.hasIndent && SUB_KEYWORDS['entity'].has(yy_.yytext)) {
                                            state.enterState('entity.' + yy_.yytext);                                                                        
                                            return yy_.yytext;
                                        } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                            return yy_.yytext;
                                        } 
                                        break;

                                    default:
                                        if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                            if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                                state.exitState(state.lastState);                                                                        
                                            }

                                            let keywordChain = state.lastState + '.' + yy_.yytext;
                                            let nextState = NEXT_STATE[keywordChain];
                                            if (nextState) {
                                                state.enterState(nextState);                                                                        
                                            }
                                            return yy_.yytext;
                                        }
                                        break;                                    
                                }                                         

                                return 257;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}