/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,21,27,38,85,212,218],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,45,76,78,79,83,97,98,125,129,133,135,137,138,147,171,211,214,227,234,236,238,239,253,265,276],$Vc=[2,277],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,76,78,79,97],$Vo=[2,63],$Vp=[2,96],$Vq=[1,108],$Vr=[17,276],$Vs=[1,112],$Vt=[17,20,76,78,79,135,137,138,140,165,166,177,185,189,203,214,249,251,253,276,283,284,286,287,288,289,290,291,294,295],$Vu=[1,122],$Vv=[1,128],$Vw=[17,97],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,76,78,79,97,265],$VC=[1,141],$VD=[1,162],$VE=[1,155],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,174],$VM=[203,253],$VN=[17,20,76,78,79,98,135,137,138,140,165,166,177,185,189,203,214,249,251,253,276,283,284,286,287,288,289,290,291,294,295],$VO=[140,276],$VP=[1,180],$VQ=[17,20,135,137,138,140,165,166,177,185,189,203,214,249,251,253,276,283,284,286,287,288,289,290,291,294,295],$VR=[2,259],$VS=[1,182],$VT=[2,105],$VU=[1,185],$VV=[17,20,97,135,137,138,140,165,166,177,185,189,203,214,249,251,253,276,283,284,286,287,288,289,290,291,294,295],$VW=[20,96,98,101,107,141,142,148,151],$VX=[1,205],$VY=[16,265],$VZ=[2,208],$V_=[1,220],$V$=[1,221],$V01=[1,222],$V11=[1,223],$V21=[17,20,76,78,79,97,135,137,138,140,165,166,177,185,189,203,214,249,251,253,276,283,284,286,287,288,289,290,291,294,295],$V31=[1,235],$V41=[17,147,214],$V51=[2,147],$V61=[1,256],$V71=[1,278],$V81=[1,279],$V91=[1,280],$Va1=[1,281],$Vb1=[20,240,243,244,254,257],$Vc1=[1,299],$Vd1=[1,298],$Ve1=[1,296],$Vf1=[1,297],$Vg1=[1,294],$Vh1=[1,295],$Vi1=[20,98,133,165,166,234,236,238,239,240,243,244,254,257],$Vj1=[17,98],$Vk1=[20,243,244,254,257],$Vl1=[1,337],$Vm1=[1,339],$Vn1=[16,139,201,255,256,265,266,267,268,269,270,275,284],$Vo1=[16,20,265],$Vp1=[17,135,137,138],$Vq1=[1,359],$Vr1=[1,356],$Vs1=[1,358],$Vt1=[17,137,138],$Vu1=[1,364],$Vv1=[20,244,254,257],$Vw1=[17,20,135,137,138,165,166,177,185],$Vx1=[17,20,135,137,138,140,165,166,177,185,294,295],$Vy1=[1,382],$Vz1=[1,384],$VA1=[1,383],$VB1=[1,380],$VC1=[1,381],$VD1=[1,385],$VE1=[1,386],$VF1=[1,387],$VG1=[1,388],$VH1=[1,389],$VI1=[1,402],$VJ1=[1,403],$VK1=[20,254,257],$VL1=[17,98,135,137,138,248,249,250,251,253],$VM1=[1,448],$VN1=[1,449],$VO1=[1,456],$VP1=[1,457],$VQ1=[20,257],$VR1=[1,465],$VS1=[1,476],$VT1=[1,481],$VU1=[20,185],$VV1=[20,165,166,185],$VW1=[1,517],$VX1=[17,253],$VY1=[1,546],$VZ1=[1,549],$V_1=[20,181,182],$V$1=[1,569],$V02=[17,20,133,181,182];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"const":21,"const_statement_item":22,"const_statement_block":23,"identifier":24,"=":25,"literal":26,"schema":27,"identifier_or_string":28,"schema_statement_block":29,"comment_or_not":30,"schema_entities":31,"schema_views_or_not":32,"schema_views":33,"entities":34,"schema_entities_block":35,"views":36,"schema_views_block":37,"type":38,"type_statement_item":39,"type_statement_block":40,"type_base":41,"type_info_or_not":42,"type_modifiers_or_not":43,"field_comment_or_not":44,":":45,"types":46,"int_keyword":47,"number_keyword":48,"text_keyword":49,"bool_keyword":50,"binary_keyword":51,"datetime_keyword":52,"any":53,"enum":54,"array":55,"object":56,"int":57,"integer":58,"number":59,"float":60,"decimal":61,"text":62,"string":63,"bool":64,"boolean":65,"blob":66,"binary":67,"buffer":68,"datetime":69,"timestamp":70,"type_infos":71,"type_info":72,"narrow_function_call":73,"type_modifiers":74,"type_modifier":75,"|~":76,"general_function_call":77,"|>":78,"|=":79,"entity_statement_header":80,"entity_statement_block":81,"entity_statement_header0":82,"extends":83,"identifier_or_string_list":84,"entity":85,"entity_sub_items":86,"entity_sub_item":87,"with_features":88,"has_fields":89,"associations_statement":90,"key_statement":91,"index_statement":92,"data_statement":93,"interfaces_statement":94,"mixin_statement":95,"mixes":96,"--":97,"with":98,"with_features_block":99,"feature_inject":100,"has":101,"has_fields_block":102,"field_item":103,"field_item_body":104,"modifiable_field":105,"type_base_or_not":106,"associations":107,"associations_block":108,"association_item":109,"hasOne":110,"association_item_option0":111,"association_item_option1":112,"association_item_repetition0":113,"hasMany":114,"association_item_option2":115,"association_item_option3":116,"association_item_repetition1":117,"refersTo":118,"association_item_option4":119,"association_item_repetition2":120,"belongsTo":121,"association_item_option5":122,"association_item_repetition3":123,"association_through":124,"connectedBy":125,"identifier_string_or_dotname":126,"conditional_expression":127,"association_connection":128,"being":129,"array_of_identifier_or_string":130,"association_cases":131,"association_condition":132,"when":133,"association_as":134,"as":135,"association_qualifiers":136,"optional":137,"default":138,"(":139,")":140,"key":141,"index":142,"index_item":143,"index_statement_block":144,"index_item_body":145,"index_item_option0":146,"unique":147,"data":148,"inline_object":149,"inline_array":150,"interface":151,"interfaces_statement_block":152,"interface_definition":153,"interface_definition_body":154,"accept_or_not":155,"implementation":156,"return_or_not":157,"accept_statement":158,"accept":159,"modifiable_param":160,"accept_block":161,"operation":162,"find_one_operation":163,"find_one_keywords":164,"findOne":165,"find":166,"article_keyword":167,"selection_inline_keywords":168,"case_statement":169,"cases_keywords":170,"by":171,"cases":172,"below":173,"case_condition_block":174,"otherwise_statement":175,"case_condition_item":176,"=>":177,"condition_as_result_expression":178,"otherwise_keywords":179,"stop_controll_flow_expression":180,"otherwise":181,"else":182,"return_expression":183,"throw_error_expression":184,"return":185,"modifiable_value":186,"throw":187,"gfc_param_list":188,"unless":189,"return_condition_block":190,"return_condition_item":191,"update_operation":192,"update":193,"where_expr":194,"create_operation":195,"create":196,"delete_operation":197,"delete":198,"coding_block":199,"do":200,"{":201,"javascript":202,"}":203,"assign_operation":204,"set":205,"identifier_or_member_access":206,"<-":207,"value":208,"variable_modifier_or_not":209,"entity_fields_selections":210,"->":211,"dataset":212,"dataset_statement_block":213,"is":214,"article_keyword_or_not":215,"dataset_join_with_item":216,"dataset_join_with_block":217,"view":218,"view_statement_block":219,"view_main_entity":220,"view_selection_or_not":221,"group_by_or_not":222,"having_or_not":223,"order_by_or_not":224,"skip_or_not":225,"limit_or_not":226,"list":227,"view_selection":228,"a":229,"an":230,"the":231,"one":232,"selection_attributive_keywords":233,"of":234,"which":235,"where":236,"selection_keywords":237,"selectedBy":238,"selected":239,"group":240,"identifier_string_or_dotname_list":241,"identifier_string_or_dotname_block":242,"having":243,"order":244,"order_by_list":245,"order_by_block":246,"order_by_clause":247,"ascend":248,"<":249,"descend":250,">":251,"order_by_list0":252,",":253,"offset":254,"INTEGER":255,"REFERENCE":256,"limit":257,"gfc_param0":258,"nfc_param_list":259,"nfc_param":260,"nfc_param_list0":261,"gfc_param_list0":262,"DOTNAME":263,"identifier_string_or_dotname_list0":264,"NAME":265,"FLOAT":266,"BOOL":267,"REGEXP":268,"SCRIPT":269,"SYMBOL":270,"kv_pairs":271,"kv_pair_item":272,"non_exist":273,"kv_pairs0":274,"[":275,"]":276,"identifier_or_string_list0":277,"simple_expression":278,"logical_expression":279,"boolean_expression":280,"unary_expression":281,"binary_expression":282,"exists":283,"not":284,"null":285,"~":286,">=":287,"<=":288,"==":289,"!=":290,"in":291,"logical_expression_right":292,"logical_operators":293,"and":294,"or":295,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",21:"const",25:"=",27:"schema",34:"entities",36:"views",38:"type",45:":",53:"any",54:"enum",55:"array",56:"object",57:"int",58:"integer",59:"number",60:"float",61:"decimal",62:"text",63:"string",64:"bool",65:"boolean",66:"blob",67:"binary",68:"buffer",69:"datetime",70:"timestamp",76:"|~",78:"|>",79:"|=",83:"extends",85:"entity",96:"mixes",97:"--",98:"with",101:"has",107:"associations",110:"hasOne",114:"hasMany",118:"refersTo",121:"belongsTo",125:"connectedBy",129:"being",133:"when",135:"as",137:"optional",138:"default",139:"(",140:")",141:"key",142:"index",147:"unique",148:"data",151:"interface",159:"accept",165:"findOne",166:"find",171:"by",172:"cases",173:"below",177:"=>",181:"otherwise",182:"else",185:"return",187:"throw",189:"unless",193:"update",194:"where_expr",196:"create",198:"delete",200:"do",201:"{",202:"javascript",203:"}",205:"set",206:"identifier_or_member_access",207:"<-",209:"variable_modifier_or_not",211:"->",212:"dataset",214:"is",218:"view",227:"list",229:"a",230:"an",231:"the",232:"one",234:"of",235:"which",236:"where",238:"selectedBy",239:"selected",240:"group",243:"having",244:"order",248:"ascend",249:"<",250:"descend",251:">",253:",",254:"offset",255:"INTEGER",256:"REFERENCE",257:"limit",263:"DOTNAME",265:"NAME",266:"FLOAT",267:"BOOL",268:"REGEXP",269:"SCRIPT",270:"SYMBOL",275:"[",276:"]",283:"exists",284:"not",285:"null",286:"~",287:">=",288:"<=",289:"==",290:"!=",291:"in",294:"and",295:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[19,2],[19,3],[9,3],[9,5],[22,3],[23,2],[23,3],[11,6],[29,3],[32,0],[32,1],[31,5],[35,2],[35,3],[33,5],[37,2],[37,3],[10,3],[10,5],[39,5],[40,2],[40,3],[41,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[50,1],[50,1],[51,1],[51,1],[51,1],[52,1],[52,1],[42,0],[42,1],[71,1],[71,2],[72,1],[72,1],[43,0],[43,1],[74,1],[74,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[12,2],[12,5],[80,1],[80,3],[82,2],[81,2],[86,1],[86,2],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[95,3],[30,0],[30,3],[88,5],[99,2],[99,3],[89,5],[102,2],[102,3],[103,2],[44,0],[44,2],[104,1],[106,0],[106,1],[90,5],[108,2],[108,3],[109,5],[109,5],[109,4],[109,4],[124,2],[124,4],[124,1],[124,2],[124,5],[128,2],[128,3],[131,3],[131,4],[132,2],[134,2],[136,1],[136,4],[91,3],[91,3],[92,3],[92,5],[144,2],[144,3],[143,1],[143,3],[145,1],[145,1],[93,3],[93,3],[94,5],[152,1],[152,2],[153,5],[154,3],[155,0],[155,1],[158,3],[158,5],[161,2],[161,3],[156,1],[156,2],[162,1],[164,1],[164,2],[163,4],[163,3],[170,1],[170,2],[170,4],[169,5],[169,6],[176,4],[174,1],[174,2],[175,4],[175,4],[175,7],[179,1],[179,1],[180,1],[180,1],[178,2],[178,5],[183,2],[184,2],[184,2],[184,5],[157,0],[157,2],[157,6],[191,4],[191,4],[190,2],[190,3],[192,6],[195,5],[197,4],[199,5],[204,6],[210,1],[210,3],[14,6],[213,3],[217,1],[217,2],[216,2],[216,7],[13,6],[219,9],[220,3],[220,4],[221,0],[221,1],[228,3],[215,0],[215,1],[167,1],[167,1],[167,1],[167,1],[233,2],[233,1],[233,1],[233,1],[237,1],[237,2],[168,1],[168,1],[222,0],[222,4],[222,6],[223,0],[223,3],[224,0],[224,4],[224,6],[246,2],[246,3],[247,1],[247,2],[247,2],[247,2],[247,2],[245,1],[245,2],[252,2],[252,3],[225,0],[225,3],[225,3],[226,0],[226,3],[226,3],[105,4],[186,1],[186,2],[160,1],[100,1],[100,1],[73,4],[259,1],[259,2],[261,2],[261,3],[260,1],[260,1],[77,4],[188,1],[188,2],[262,2],[262,3],[258,1],[258,1],[258,1],[126,1],[126,1],[126,1],[242,2],[242,3],[241,1],[241,2],[264,2],[264,3],[28,1],[28,1],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[149,2],[149,3],[272,3],[272,2],[272,3],[273,0],[271,1],[271,2],[274,2],[274,3],[150,2],[150,3],[130,3],[84,1],[84,2],[277,2],[277,3],[208,1],[208,1],[127,1],[127,1],[127,1],[278,1],[278,1],[278,3],[281,2],[281,3],[281,3],[281,4],[281,4],[280,3],[280,3],[280,3],[282,3],[282,3],[282,3],[282,3],[282,3],[282,3],[282,3],[282,4],[279,2],[292,2],[293,1],[293,1],[111,0],[111,1],[112,0],[112,1],[113,0],[113,2],[115,0],[115,1],[116,0],[116,1],[117,0],[117,2],[119,0],[119,1],[120,0],[120,2],[122,0],[122,1],[123,0],[123,2],[146,0],[146,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-1] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-1] };
break;
case 30: case 99: case 111: case 124: case 134: case 151: case 186: case 230: case 271:
this.$ = [ $$[$0-1] ];
break;
case 31: case 100: case 112: case 135: case 152: case 187: case 231: case 272:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 122: case 196: case 297:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 104: case 144: case 296: case 298:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 153: case 166: case 197: case 237: case 239: case 254: case 256: case 261: case 263: case 273: case 275: case 302: case 304:
this.$ = [ $$[$0] ];
break;
case 72: case 154: case 167: case 198: case 238: case 240: case 255: case 257: case 262: case 264: case 276: case 303: case 305:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { mixins: $$[$0-1] };
break;
case 97:
this.$ = { comment: $$[$0-1] };
break;
case 98:
this.$ = { features: $$[$0-1] };
break;
case 101:
this.$ = { fields: $$[$0-1] };
break;
case 102:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 103:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 106:
this.$ = { comment: $$[$0] };
break;
case 110:
this.$ = { associations: $$[$0-1] };
break;
case 113:
this.$ = { type: 'hasOne', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...Object.assign({}, ...$$[$0]) };
break;
case 114:
this.$ = { type: 'hasMany', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...Object.assign({}, ...$$[$0]) };
break;
case 115:
this.$ = { type: 'refersTo', destEntity: $$[$0-2], ...$$[$0-1], ...Object.assign({}, ...$$[$0]) };
break;
case 116:
this.$ = { type: 'belongsTo', destEntity: $$[$0-2], ...$$[$0-1], ...Object.assign({}, ...$$[$0]) };
break;
case 117:
this.$ = { connectedBy: $$[$0] }    ;
break;
case 118:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] }    ;
break;
case 119:
this.$ = { remoteField: $$[$0] }     ;
break;
case 120:
this.$ = { remoteField: $$[$0] }  ;
break;
case 121:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 123:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 125:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 126:
this.$ = $$[$0];;
break;
case 127:
this.$ = { srcField: $$[$0] };
break;
case 128:
this.$ = { optional: true };
break;
case 129:
this.$ = { default: $$[$0-1] };
break;
case 130: case 131:
this.$ = { key: $$[$0-1] };
break;
case 132:
this.$ = { indexes: [$$[$0-1]] };
break;
case 133:
this.$ = { indexes: $$[$0-1] };
break;
case 137:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 138: case 139:
this.$ = { fields: $$[$0] };
break;
case 140: case 141:
this.$ = { data: $$[$0-1] };
break;
case 142:
this.$ = { interfaces: $$[$0-1] };
break;
case 143:
this.$ = Object.assign({}, $$[$0]);
break;
case 145:
this.$ = { [$$[$0-4]]: $$[$0-1] };
break;
case 146:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 149:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 150:
this.$ = { accept: $$[$0-1] };
break;
case 158:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 159:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 163:
this.$ = { oolType: 'cases', items: $$[$0-1] };
break;
case 164:
this.$ = { oolType: 'cases', items: $$[$0-2], else: $$[$0-1] } ;
break;
case 165:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 168: case 169: case 199: case 290: case 300: case 301: case 313:
this.$ = $$[$0-1];
break;
case 170: case 176:
this.$ = $$[$0-2];
break;
case 177:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 178:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 179:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 180:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 182:
 this.$ = { return: $$[$0-1] }; 
break;
case 183:
 this.$ = { return: Object.assign($$[$0-5], { exceptions: $$[$0-1] }) }; 
break;
case 184: case 185:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 188:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 189:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 190:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 191:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 192:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 193:
this.$ = { entity: $$[$0] }     ;
break;
case 194:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 195:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 200:
this.$ = { ...$$[$0-6], with: $$[$0-1] };
break;
case 201:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 202:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 203:
this.$ = { dataset: $$[$0] };
break;
case 204:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 207:
this.$ = { condition: $$[$0-1] };
break;
case 223: case 224:
this.$ = { groupBy: $$[$0-1] };
break;
case 226:
this.$ = { having: $$[$0-1] };
break;
case 228: case 229:
this.$ = { orderBy: $$[$0-1] };
break;
case 232:
this.$ = { field: $$[$0], ascend: true };
break;
case 233: case 234:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 235: case 236:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 242: case 243:
this.$ = { offset: $$[$0-1] };
break;
case 245: case 246:
this.$ = { limit: $$[$0-1] };
break;
case 247:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 249:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 253: case 260:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 259:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 274:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 289:
this.$ = {};
break;
case 291: case 293:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 292:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 299: case 338: case 344: case 348: case 352:
this.$ = [];
break;
case 307:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 314:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 315:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 316:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 317:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 318:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 319: case 320:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 321:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 322:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 323:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 324:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 325:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 326:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 327:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 328:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 329:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 330:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 331:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 332:
this.$ = { operator: 'and' };
break;
case 333:
this.$ = { operator: 'or' };
break;
case 339: case 345: case 349: case 353:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,212:$V5,218:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,212:$V5,218:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],22:26,24:28,265:$V8},{16:$V9,17:[1,31],24:33,28:32,39:30,265:$V8},{16:$V9,24:33,28:35,265:$V8},{17:[1,36]},{16:$V9,24:33,28:37,265:$V8},{16:$V9,24:33,28:38,265:$V8},{17:[2,81],83:[1,39]},{16:$V9,24:33,28:40,265:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{25:[1,45]},o([17,20,25,45,76,78,79,83,97,98,125,129,133,135,137,138,139,140,147,165,166,171,177,185,189,203,211,214,227,234,236,238,239,248,249,250,251,253,265,276,283,284,286,287,288,289,290,291,294,295],[2,279]),{17:[1,46]},{18:[1,47]},{41:48,45:$Va},o($Vb,$Vc),o($Vb,[2,278]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,24:33,28:55,84:54,265:$V8},o([17,83],[2,83]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{22:59,23:58,24:28,265:$V8},{16:$Ve,26:60,149:64,150:65,201:$Vf,255:$Vg,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($V7,[2,32]),{16:$V9,24:33,28:32,39:73,40:72,265:$V8},o($Vn,$Vo,{42:74,71:75,72:76,24:77,73:78,265:$V8}),{16:$V9,24:33,28:90,46:79,47:80,48:81,49:82,50:83,51:84,52:85,53:[1,86],54:[1,87],55:[1,88],56:[1,89],57:[1,91],58:[1,92],59:[1,93],60:[1,94],61:[1,95],62:[1,96],63:[1,97],64:[1,98],65:[1,99],66:[1,100],67:[1,101],68:[1,102],69:[1,103],70:[1,104],265:$V8},{18:[1,105]},o([96,98,101,107,141,142,148,151],$Vp,{81:106,30:107,97:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,82]},o($Vr,[2,302],{277:111,253:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,280]),o($Vt,[2,281]),o($Vt,[2,282]),o($Vt,[2,283]),o($Vt,[2,284]),o($Vt,[2,285]),o($Vt,[2,286]),o($Vt,[2,287]),o($Vt,[2,288]),{16:$V9,24:121,28:120,203:[1,117],255:$Vu,265:$V8,271:118,272:119},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:125,188:124,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,276:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{43:134,74:135,75:136,76:$Vy,78:$Vz,79:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{72:76,24:77,73:78,71:140,265:$V8}),o($VB,[2,67],{139:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),{29:142,30:143,34:$Vp,97:$Vq},{20:[1,144]},{86:145,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,141:$VH,142:$VI,148:$VJ,151:$VK},{16:[1,163]},{214:[1,166],219:164,220:165},{213:167,214:[1,168]},o($Vr,[2,303]),{16:$V9,24:33,28:169,265:$V8},o($V7,[2,14]),{16:$Vd,19:170,20:[2,15]},o($V7,[2,18]),{20:[2,20],22:59,23:171,24:28,265:$V8},o($Vt,[2,289]),{203:[1,172]},{203:[2,295],253:$VL,274:173},{45:[1,175]},o($VM,[2,294],{273:176,45:$Vc}),{45:[1,177]},o($VN,[2,299]),{276:[1,178]},o($VO,[2,261],{262:179,253:$VP}),o($VQ,[2,248],{75:136,74:181,76:$Vy,78:$Vz,79:$VA}),o($Vt,[2,265]),o($Vt,[2,266]),o($Vt,[2,267]),o($Vt,[2,258]),o($Vt,$VR,{139:$VS}),o($V7,[2,33]),{16:$V9,20:[2,35],24:33,28:32,39:73,40:183,265:$V8},{17:$VT,44:184,97:$VU},o($Vw,[2,70]),o($VV,[2,71],{75:136,74:186,76:$Vy,78:$Vz,79:$VA}),{24:187,77:188,265:$V8},{24:189,77:190,265:$V8},{24:191,77:192,265:$V8},o($Vn,[2,66]),{16:$Ve,24:195,26:130,149:64,150:65,201:$Vf,255:$Vg,259:193,260:194,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{20:[1,196]},{31:197,34:[1,198]},o($V7,[2,80]),{20:[2,84]},{20:[2,85],86:199,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,141:$VH,142:$VI,148:$VJ,151:$VK},o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),{17:[1,200]},{17:[1,201]},{17:[1,202]},{16:$V9,24:33,28:203,130:204,265:$V8,275:$VX},{16:$V9,17:[1,207],24:33,28:209,130:210,143:206,145:208,265:$V8,275:$VX},{149:211,150:212,201:$Vf,275:$Vm},{17:[1,213]},{16:$V9,24:33,28:55,84:214,265:$V8},{17:[1,215]},{20:[1,216]},{17:[1,217]},o($VY,$VZ,{215:218,167:219,229:$V_,230:$V$,231:$V01,232:$V11}),{20:[1,224]},o($VY,$VZ,{167:219,215:225,229:$V_,230:$V$,231:$V01,232:$V11}),o($Vr,[2,304],{277:226,253:$Vs}),{20:[2,16]},{20:[2,21]},o($Vt,[2,290]),{203:[2,296]},{16:$V9,24:121,28:120,255:$Vu,265:$V8,272:227},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:228,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($VM,[2,292]),{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:229,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($VN,[2,300]),o($VO,[2,262]),{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:230,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($VQ,[2,249]),{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:125,188:231,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{20:[2,36]},{17:[2,34]},{16:[1,232]},o($VV,[2,72]),o($V21,[2,73],{139:$VS}),o($V21,[2,74]),o($V21,[2,75],{139:$VS}),o($V21,[2,76]),o($V21,[2,77],{139:$VS}),o($V21,[2,78]),{140:[1,233]},{140:[2,254],253:$V31,261:234},o([140,253],$VR),o($V7,[2,22]),{20:[2,24],32:236,33:237,36:[1,238]},{17:[1,239]},{20:[2,86]},{18:[1,240]},{18:[1,241]},{18:[1,242]},{17:[1,243]},{17:[1,244]},{16:$V9,24:33,28:55,84:245,265:$V8},{17:[1,246]},{18:[1,247]},{17:[2,136],146:248,147:[2,354],214:[1,249]},o($V41,[2,138]),o($V41,[2,139]),{17:[1,250]},{17:[1,251]},{18:[1,252]},{17:[1,253]},o([34,96,98,101,107,141,142,148,151],[2,97]),o($V7,[2,201]),o([20,98,133,234,236,238,239,240,243,244,254,257],$V51,{155:254,158:255,159:$V61}),{16:$V9,24:33,28:257,265:$V8},o($VY,[2,209]),o($VY,[2,210]),o($VY,[2,211]),o($VY,[2,212]),o($VY,[2,213]),o($V7,[2,195]),{16:$V9,24:33,28:260,210:259,216:258,265:$V8},o($Vr,[2,305]),{203:[2,297],253:$VL,274:261},o($VM,[2,291]),o($VM,[2,293]),o($VO,[2,263],{262:262,253:$VP}),{140:[1,263]},{17:[2,106]},o($VB,[2,253]),{140:[2,255]},{16:$Ve,24:195,26:130,149:64,150:65,201:$Vf,255:$Vg,260:264,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{20:[2,23]},{20:[2,25]},{17:[1,265]},{18:[1,266]},{24:269,73:270,99:267,100:268,265:$V8},{16:$V9,24:33,28:275,102:271,103:272,104:273,105:274,265:$V8},{108:276,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($VW,[2,130]),o($VW,[2,131]),{276:[1,282]},o($VW,[2,132]),{16:$V9,24:33,28:209,130:210,143:284,144:283,145:208,265:$V8,275:$VX},{147:[1,285]},{147:[2,355]},o($VW,[2,140]),o($VW,[2,141]),{16:$V9,24:33,28:288,152:286,153:287,265:$V8},o($VW,[2,95]),o($Vb1,[2,205],{221:289,228:290,168:291,237:292,233:293,98:$Vc1,133:$Vd1,234:$Ve1,236:$Vf1,238:$Vg1,239:$Vh1}),o($Vi1,[2,148]),{16:$V9,17:[1,301],24:33,28:275,105:302,160:300,265:$V8},{17:[2,203],227:[1,303]},{20:[2,196]},{17:[1,304],98:[1,305]},o($Vj1,[2,193],{211:[1,306]}),{203:[2,298]},o($VO,[2,264]),o($V21,[2,260]),{140:[2,256],253:$V31,261:307},{18:[1,308]},{16:$V9,24:33,28:310,35:309,265:$V8},{20:[1,311]},{17:[1,312]},{17:[2,251],139:$VC},{17:[2,252]},{20:[1,313]},{17:[1,314]},{17:$VT,44:315,97:$VU},o($Vw,[2,107]),o($VB,[2,108],{106:316,41:317,45:$Va}),{20:[1,318]},{17:[1,319]},{16:$V9,24:33,28:320,265:$V8},{16:$V9,24:33,28:321,265:$V8},{16:$V9,24:33,28:322,265:$V8},{16:$V9,24:33,28:323,265:$V8},o([17,135,137,138,147,214],[2,301]),{20:[1,324]},{17:[1,325]},{17:[2,137]},{20:[1,326]},{16:$V9,20:[2,143],24:33,28:288,152:327,153:287,265:$V8},{17:[1,328]},o($Vk1,[2,222],{222:329,240:[1,330]}),o($Vb1,[2,206]),{16:$Ve,24:131,26:130,77:129,127:331,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},o($Vn1,[2,220]),o($Vn1,[2,221]),o($Vn1,[2,218]),{171:[1,340]},{235:[1,341]},o($Vn1,[2,215]),o($Vn1,[2,216]),o($Vn1,[2,217]),{17:[1,342]},{18:[1,343]},{17:[2,250]},{17:[2,204]},o($Vo1,[2,199]),{45:[1,344]},{150:345,275:$Vm},{140:[2,257]},{16:$V9,24:33,28:347,37:346,265:$V8},{20:[1,348]},{17:[1,349]},o($VW,[2,98]),{20:[2,99],24:269,73:270,99:350,100:268,265:$V8},o($VW,[2,101]),{16:$V9,20:[2,102],24:33,28:275,102:351,103:272,104:273,105:274,265:$V8},{17:[2,104]},o($Vn,$Vo,{71:75,72:76,24:77,73:78,42:352,265:$V8}),o($VB,[2,109]),o($VW,[2,110]),{20:[2,111],108:353,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($Vp1,[2,334],{111:354,124:355,128:357,45:$Vq1,125:$Vr1,129:$Vs1}),o($Vp1,[2,340],{128:357,115:360,124:361,45:$Vq1,125:$Vr1,129:$Vs1}),o($Vt1,[2,346],{119:362,134:363,135:$Vu1}),o($Vt1,[2,350],{122:365,134:366,135:$Vu1}),o($VW,[2,133]),{16:$V9,20:[2,134],24:33,28:209,130:210,143:284,144:367,145:208,265:$V8,275:$VX},o($VW,[2,142]),{20:[2,144]},{18:[1,368]},o($Vv1,[2,225],{223:369,243:[1,370]}),{171:[1,371]},{17:[1,372]},o($Vw1,[2,308],{292:373,293:374,294:[1,375],295:[1,376]}),o($Vw1,[2,309]),o($Vw1,[2,310]),o($Vx1,[2,311]),o($Vx1,[2,312]),{16:$Ve,24:131,26:130,77:129,139:$Vl1,149:64,150:65,186:378,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:377,281:335,282:336,284:$Vm1},{214:$Vy1,249:$Vz1,251:$VA1,283:$VB1,284:$VC1,286:[1,379],287:$VD1,288:$VE1,289:$VF1,290:$VG1,291:$VH1},{139:[1,390]},o($Vn1,[2,219]),o($Vn1,[2,214]),o($Vi1,[2,149]),{16:$V9,24:33,28:275,105:302,160:392,161:391,265:$V8},{17:[1,393]},o($Vj1,[2,194]),{20:[1,394]},{17:[1,395]},o([20,36],[2,26]),{16:$V9,20:[2,27],24:33,28:310,35:396,265:$V8},{20:[2,100]},{20:[2,103]},o($Vw,$Vx,{74:135,75:136,43:397,76:$Vy,78:$Vz,79:$VA}),{20:[2,112]},o($Vt1,[2,336],{112:398,134:399,135:$Vu1}),o($Vp1,[2,335]),{16:$VI1,24:401,126:400,263:$VJ1,265:$V8},o($Vp1,[2,119]),{16:$V9,24:33,28:405,130:404,265:$V8,275:$VX},{17:[1,406]},o($Vt1,[2,342],{116:407,134:408,135:$Vu1}),o($Vp1,[2,341]),o($Vt1,[2,348],{120:409}),o($Vt1,[2,347]),{16:$V9,24:33,28:410,265:$V8},o($Vt1,[2,352],{123:411}),o($Vt1,[2,351]),{20:[2,135]},o([165,166],$V51,{158:255,154:412,155:413,159:$V61}),o($VK1,[2,227],{224:414,244:[1,415]}),{16:$Ve,24:131,26:130,77:129,127:416,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{16:$VI1,17:[1,418],24:401,126:419,241:417,263:$VJ1,265:$V8},o($Vb1,[2,207]),o($Vw1,[2,330]),{16:$Ve,24:131,26:130,77:129,139:$Vl1,149:64,150:65,186:378,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:420,281:335,282:336,284:$Vm1},o($Vn1,[2,332]),o($Vn1,[2,333]),{140:[1,421]},{214:$Vy1,249:$Vz1,251:$VA1,283:$VB1,284:$VC1,287:$VD1,288:$VE1,289:$VF1,290:$VG1,291:$VH1},{24:422,77:424,265:$V8,268:[1,423]},o($Vx1,[2,314]),{283:[1,425],291:[1,426]},{284:[1,428],285:[1,427]},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:429,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:430,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:431,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:432,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:433,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:434,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:435,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{16:$Ve,24:131,26:130,77:129,139:$Vl1,149:64,150:65,186:378,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:436,281:335,282:336,284:$Vm1},{20:[1,437]},{17:[1,438]},{18:[1,439]},{20:[2,29]},{16:$V9,20:[2,30],24:33,28:347,37:440,265:$V8},{20:[2,28]},o($Vw,[2,247]),o($Vt1,[2,338],{113:441}),o($Vt1,[2,337]),o($Vp1,[2,117],{98:[1,442]}),o($VL1,[2,268]),o($VL1,[2,269]),o($VL1,[2,270]),o($Vp1,[2,120]),o($Vp1,[2,122],{132:443,98:[1,444]}),{18:[1,445]},o($Vt1,[2,344],{117:446}),o($Vt1,[2,343]),{17:[2,115],136:447,137:$VM1,138:$VN1},o($Vt1,[2,127]),{17:[2,116],136:450,137:$VM1,138:$VN1},{20:[1,451]},{156:452,162:453,163:454,164:455,165:$VO1,166:$VP1},o($VQ1,[2,241],{225:458,254:[1,459]}),{171:[1,460]},{17:[1,461]},{17:[1,462]},{18:[1,463]},{17:[2,273],253:$VR1,264:464},o($Vw1,[2,331]),o($Vx1,[2,313]),o($Vw1,[2,319],{139:$VS}),o($Vw1,[2,320]),o($Vw1,[2,321]),o($Vx1,[2,315]),{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:466,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($Vx1,[2,316]),{285:[1,467]},o($Vx1,[2,322]),o($Vx1,[2,323]),o($Vx1,[2,324]),o($Vx1,[2,325]),o($Vx1,[2,326]),o($Vx1,[2,327]),o($Vx1,[2,328]),{140:[1,468]},o($Vi1,[2,150]),{16:$V9,20:[2,151],24:33,28:275,105:302,160:392,161:469,265:$V8},{16:$V9,24:33,28:260,210:259,216:471,217:470,265:$V8},{20:[2,31]},{17:[2,113],136:472,137:$VM1,138:$VN1},{16:$Ve,24:131,26:130,77:129,127:473,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},o($Vp1,[2,123]),{16:$Ve,24:131,26:130,77:129,127:474,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{131:475,133:$VS1},{17:[2,114],136:477,137:$VM1,138:$VN1},o($Vt1,[2,349]),o($Vt1,[2,128]),{139:[1,478]},o($Vt1,[2,353]),o($Vo1,[2,145]),{20:[2,181],157:479,183:480,185:$VT1},o($VU1,[2,153],{162:453,163:454,164:455,156:482,165:$VO1,166:$VP1}),o($VV1,[2,155]),{16:$V9,24:33,28:483,265:$V8},o($VY,[2,156]),{167:484,229:$V_,230:$V$,231:$V01,232:$V11},{20:[2,244],226:485,257:[1,486]},{255:[1,487],256:[1,488]},{16:$VI1,17:[1,490],24:401,126:492,245:489,247:491,263:$VJ1,265:$V8},o($Vv1,[2,226]),o($Vk1,[2,223]),{16:$VI1,24:401,126:494,242:493,263:$VJ1,265:$V8},{17:[2,274]},{16:$VI1,24:401,126:495,263:$VJ1,265:$V8},o($Vx1,[2,329]),o($Vx1,[2,317]),o($Vx1,[2,318]),{20:[2,152]},{20:[1,496]},{16:$V9,20:[2,197],24:33,28:260,210:259,216:471,217:497,265:$V8},o($Vt1,[2,339]),o($Vp1,[2,118]),o($Vp1,[2,126]),{20:[1,498]},{128:499,129:[1,500]},o($Vt1,[2,345]),{16:$Ve,26:501,149:64,150:65,201:$Vf,255:$Vg,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{20:[2,146]},{17:[1,502],189:[1,503]},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:504,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($VU1,[2,154]),{45:[1,508],98:$Vc1,133:$Vd1,168:505,169:506,170:507,171:[1,509],233:293,234:$Ve1,236:$Vf1,237:292,238:$Vg1,239:$Vh1},o($VY,[2,157]),{20:[2,202]},{255:[1,510],256:[1,511]},{17:[1,512]},{17:[1,513]},{17:[1,514]},{18:[1,515]},{17:[2,237],252:516,253:$VW1},o($VX1,[2,232],{248:[1,518],249:[1,519],250:[1,520],251:[1,521]}),{20:[1,522]},{17:[1,523]},{17:[2,275],253:$VR1,264:524},o($Vo1,[2,200]),{20:[2,198]},o($Vp1,[2,121]),{17:[1,525]},{16:$V9,24:33,28:405,265:$V8},{140:[1,526]},{20:[2,182]},{17:[1,527]},o([17,189],[2,177]),{16:$Ve,24:131,26:130,77:129,127:528,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},o($VV1,[2,159]),{17:[1,529]},{17:[2,160]},{172:[1,530]},{17:[1,531]},{17:[1,532]},o($VQ1,[2,242]),o($VQ1,[2,243]),o($VK1,[2,228]),{16:$VI1,24:401,126:492,246:533,247:534,263:$VJ1,265:$V8},{17:[2,238]},{16:$VI1,24:401,126:492,247:535,263:$VJ1,265:$V8},o($VX1,[2,233]),o($VX1,[2,234]),o($VX1,[2,235]),o($VX1,[2,236]),o($Vk1,[2,224]),{16:$VI1,20:[2,271],24:401,126:494,242:536,263:$VJ1,265:$V8},{17:[2,276]},{20:[2,124],131:537,133:$VS1},o($Vt1,[2,129]),{18:[1,538]},o($VV1,[2,158]),{18:[1,539]},{17:[2,161],135:[1,540]},{20:[2,245]},{20:[2,246]},{20:[1,541]},{17:[1,542]},{17:[2,239],252:543,253:$VW1},{20:[2,272]},{20:[2,125]},{133:$VY1,190:544,191:545},{133:$VZ1,174:547,176:548},{173:[1,550]},o($VK1,[2,229]),{16:$VI1,20:[2,230],24:401,126:492,246:551,247:534,263:$VJ1,265:$V8},{17:[2,240]},{20:[1,552]},{17:[1,553]},{16:$Ve,24:131,26:130,77:129,127:554,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{20:[1,555],175:556,179:557,181:[1,558],182:[1,559]},o($V_1,[2,166],{176:548,174:560,133:$VZ1}),{16:$Ve,24:131,26:130,77:129,127:561,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{17:[2,162]},{20:[2,231]},{20:[2,183]},{20:[2,186],133:$VY1,190:562,191:545},{177:[1,563]},o($VV1,[2,163]),{20:[1,564]},{177:[1,565]},{177:[2,171]},{177:[2,172]},o($V_1,[2,167]),{177:[1,566]},{20:[2,187]},{16:$Ve,24:131,26:130,77:129,149:64,150:65,184:568,186:567,187:$V$1,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},o($VV1,[2,164]),{16:$Ve,17:[1,572],24:131,26:130,77:129,127:573,139:$Vl1,149:64,150:65,178:570,180:571,183:574,184:575,185:$VT1,186:338,187:$V$1,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{16:$Ve,17:[1,577],24:131,26:130,77:129,127:573,139:$Vl1,149:64,150:65,178:576,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{17:[2,184]},{17:[2,185]},{16:[1,578],24:579,265:$V8},{17:[1,580]},{17:[1,581]},{18:[1,582]},{17:[1,583]},{17:[2,173]},{17:[2,174]},o([20,133,181,182],[2,165]),{18:[1,584]},{17:[2,178]},{17:[2,179],139:[1,585]},{20:[2,168]},{20:[2,169]},{16:$Ve,24:131,26:130,77:129,127:587,139:$Vl1,149:64,150:65,180:586,183:574,184:575,185:$VT1,186:338,187:$V$1,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},o($V02,[2,175]),{16:$Ve,24:131,26:130,77:129,127:587,139:$Vl1,149:64,150:65,186:338,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm,278:332,279:333,280:334,281:335,282:336,284:$Vm1},{16:$Ve,24:131,26:130,77:129,149:64,150:65,186:125,188:588,201:$Vf,255:$Vg,256:$Vv,258:126,260:127,265:$V8,266:$Vh,267:$Vi,268:$Vj,269:$Vk,270:$Vl,275:$Vm},{17:[1,589]},{17:[1,590]},{140:[1,591]},{20:[1,592]},{20:[1,593]},{17:[2,180]},{20:[2,170]},o($V02,[2,176])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],60:[2,19],145:[2,84],170:[2,16],171:[2,21],173:[2,296],183:[2,36],184:[2,34],199:[2,86],232:[2,106],234:[2,255],236:[2,23],237:[2,25],249:[2,355],258:[2,196],261:[2,298],270:[2,252],285:[2,137],302:[2,250],303:[2,204],307:[2,257],315:[2,104],327:[2,144],350:[2,100],351:[2,103],353:[2,112],367:[2,135],394:[2,29],396:[2,28],440:[2,31],464:[2,274],469:[2,152],479:[2,146],485:[2,202],497:[2,198],502:[2,182],508:[2,160],516:[2,238],524:[2,276],531:[2,245],532:[2,246],536:[2,272],537:[2,125],543:[2,240],550:[2,162],551:[2,231],552:[2,183],558:[2,171],559:[2,172],562:[2,187],567:[2,184],568:[2,185],574:[2,173],575:[2,174],578:[2,178],580:[2,168],581:[2,169],591:[2,180],592:[2,170]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set(['with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'connectedBy', 'when', 'being', 'with', 'as', 'optional']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw'])
    };

    const NEXT_STATE = {
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    const STATE_STOPPER = {        
        'entity.interface.find.when': new Set(['else', 'otherwise'])
    };

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['entity.key', 'entity.data', 'entity.interface.return.when', 'entity.mixes'])
    ];

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when'        
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc, token) {
            if (0) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            //console.log('> enter state:', state, '\n');
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            //console.log('< exit state:', state, '\n');
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    console.log('< exit state:', last, '\n');
                } while (last !== finalStateToExit);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');   
                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 20;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 269;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;

                                if (state.hasIndent && ONE_LINE_KEYWORDS[1].has(state.lastState)) {
                                    state.exitState(state.lastState);
                                }                                  

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 268;
                        
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 266;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 255;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 255;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 263;
                           
break;
case 24:
                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 270;
                           
break;
case 25:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 256;
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 267;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext);                                     

                                switch (state.lastState) {
                                    case 'schema':
                                        if (state.hasIndent && SUB_KEYWORDS['schema'].has(yy_.yytext)) {
                                            state.enterState('schema.' + yy_.yytext);
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'type': 
                                        state.enterState('type.name');
                                        return 265;

                                    case 'type.name':
                                        state.enterState('type.info');

                                        if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity':
                                        if (state.hasIndent && SUB_KEYWORDS['entity'].has(yy_.yytext)) {
                                            state.enterState('entity.' + yy_.yytext);                                                                        
                                            return yy_.yytext;
                                        } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                            return yy_.yytext;
                                        } 
                                        break;

                                    default:
                                        if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                            if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                                state.exitState(state.lastState);                                                                        
                                            }

                                            let keywordChain = state.lastState + '.' + yy_.yytext;
                                            let nextState = NEXT_STATE[keywordChain];
                                            if (nextState) {
                                                state.enterState(nextState);                                                                        
                                            }
                                            return yy_.yytext;
                                        }
                                        break;                                    
                                }                                         

                                return 265;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}