/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,44,93,227,235],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,52,83,85,86,91,105,106,133,137,141,143,156,183,226,230,245,252,254,256,257,273,285,296],$Vc=[2,280],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,83,85,86,105],$Vo=[2,63],$Vp=[2,96],$Vq=[1,108],$Vr=[17,296],$Vs=[1,112],$Vt=[17,20,83,85,86,105,143,148,177,178,191,199,203,218,230,269,271,273,285,296,303,304,306,307,308,309,310,311,314,315],$Vu=[1,122],$Vv=[1,128],$Vw=[17,105],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,83,85,86,105,285],$VC=[1,141],$VD=[1,162],$VE=[1,155],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,178],$VM=[218,273],$VN=[17,20,83,85,86,105,106,143,148,177,178,191,199,203,218,230,269,271,273,285,296,303,304,306,307,308,309,310,311,314,315],$VO=[148,296],$VP=[1,184],$VQ=[17,20,105,143,148,177,178,191,199,203,218,230,269,271,273,285,296,303,304,306,307,308,309,310,311,314,315],$VR=[2,262],$VS=[1,186],$VT=[2,105],$VU=[1,191],$VV=[20,41],$VW=[20,104,106,110,117,149,150,157,160],$VX=[1,214],$VY=[16,285],$VZ=[2,211],$V_=[1,229],$V$=[1,230],$V01=[1,231],$V11=[1,232],$V21=[1,244],$V31=[17,156,230],$V41=[2,150],$V51=[1,269],$V61=[1,295],$V71=[1,296],$V81=[1,297],$V91=[1,298],$Va1=[20,258,262,263,274,277],$Vb1=[1,316],$Vc1=[1,315],$Vd1=[1,313],$Ve1=[1,314],$Vf1=[1,311],$Vg1=[1,312],$Vh1=[20,106,141,177,178,252,254,256,257,258,262,263,274,277],$Vi1=[17,106],$Vj1=[16,17,285],$Vk1=[20,262,263,274,277],$Vl1=[1,353],$Vm1=[1,355],$Vn1=[16,147,216,275,276,285,286,287,288,289,290,295,304],$Vo1=[16,20,285],$Vp1=[17,105,143,285],$Vq1=[1,384],$Vr1=[20,263,274,277],$Vs1=[17,20,105,143,177,178,191,199,285],$Vt1=[17,20,105,143,148,177,178,191,199,285,314,315],$Vu1=[1,404],$Vv1=[1,406],$Vw1=[1,405],$Vx1=[1,402],$Vy1=[1,403],$Vz1=[1,407],$VA1=[1,408],$VB1=[1,409],$VC1=[1,410],$VD1=[1,411],$VE1=[17,105,285],$VF1=[1,426],$VG1=[1,427],$VH1=[20,274,277],$VI1=[17,105,106,143,268,269,270,271,273,285],$VJ1=[1,476],$VK1=[1,477],$VL1=[20,277],$VM1=[1,485],$VN1=[1,505],$VO1=[20,199],$VP1=[20,177,178,199],$VQ1=[1,539],$VR1=[17,273],$VS1=[1,551],$VT1=[1,578],$VU1=[1,581],$VV1=[20,195,196],$VW1=[1,608],$VX1=[17,20,141,195,196];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"identifier_or_string":30,"schema_statement_block":31,"schema_statement_option0":32,"comment_or_not":33,"schema_statement_block_option0":34,"schema_views_or_not":35,"schema_views":36,"schema_entities":37,"entities":38,"schema_entities_block":39,"schema_entities_option0":40,"views":41,"schema_views_block":42,"schema_views_option0":43,"type":44,"type_statement_item":45,"type_statement_block":46,"type_statement_option0":47,"type_base":48,"type_info_or_not":49,"type_modifiers_or_not":50,"field_comment_or_not":51,":":52,"types":53,"int_keyword":54,"number_keyword":55,"text_keyword":56,"bool_keyword":57,"binary_keyword":58,"datetime_keyword":59,"any":60,"enum":61,"array":62,"object":63,"int":64,"integer":65,"number":66,"float":67,"decimal":68,"text":69,"string":70,"bool":71,"boolean":72,"blob":73,"binary":74,"buffer":75,"datetime":76,"timestamp":77,"type_infos":78,"type_info":79,"narrow_function_call":80,"type_modifiers":81,"type_modifier":82,"|~":83,"general_function_call":84,"|>":85,"|=":86,"entity_statement_header":87,"entity_statement_block":88,"entity_statement_option0":89,"entity_statement_header0":90,"extends":91,"identifier_or_string_list":92,"entity":93,"entity_sub_items":94,"entity_sub_item":95,"with_features":96,"has_fields":97,"associations_statement":98,"key_statement":99,"index_statement":100,"data_statement":101,"interfaces_statement":102,"mixin_statement":103,"mixes":104,"--":105,"with":106,"with_features_block":107,"with_features_option0":108,"feature_inject":109,"has":110,"has_fields_block":111,"has_fields_option0":112,"field_item":113,"field_item_body":114,"modifiable_field":115,"type_base_or_not":116,"associations":117,"associations_block":118,"associations_statement_option0":119,"association_item":120,"association_type_referee":121,"association_item_option0":122,"association_item_option1":123,"association_cases_block":124,"association_item_option2":125,"association_type_referer":126,"association_item_option3":127,"hasOne":128,"hasMany":129,"refersTo":130,"belongsTo":131,"association_through":132,"connectedBy":133,"identifier_string_or_dotname":134,"conditional_expression":135,"association_connection":136,"being":137,"array_of_identifier_or_string":138,"association_cases":139,"association_condition":140,"when":141,"association_as":142,"as":143,"association_qualifiers":144,"optional":145,"default":146,"(":147,")":148,"key":149,"index":150,"index_item":151,"index_statement_block":152,"index_statement_option0":153,"index_item_body":154,"index_item_option0":155,"unique":156,"data":157,"inline_object":158,"inline_array":159,"interface":160,"interfaces_statement_block":161,"interfaces_statement_option0":162,"interface_definition":163,"interface_definition_body":164,"interface_definition_option0":165,"accept_or_not":166,"implementation":167,"return_or_not":168,"accept_statement":169,"accept":170,"modifiable_param":171,"accept_block":172,"accept_statement_option0":173,"operation":174,"find_one_operation":175,"find_one_keywords":176,"findOne":177,"find":178,"article_keyword":179,"selection_inline_keywords":180,"case_statement":181,"cases_keywords":182,"by":183,"cases":184,"below":185,"case_condition_block":186,"case_statement_option0":187,"otherwise_statement":188,"case_statement_option1":189,"case_condition_item":190,"=>":191,"condition_as_result_expression":192,"otherwise_keywords":193,"stop_controll_flow_expression":194,"otherwise":195,"else":196,"return_expression":197,"throw_error_expression":198,"return":199,"modifiable_value":200,"throw":201,"gfc_param_list":202,"unless":203,"return_condition_block":204,"return_or_not_option0":205,"return_condition_item":206,"update_operation":207,"update":208,"where_expr":209,"create_operation":210,"create":211,"delete_operation":212,"delete":213,"coding_block":214,"do":215,"{":216,"javascript":217,"}":218,"assign_operation":219,"set":220,"identifier_or_member_access":221,"<-":222,"value":223,"variable_modifier_or_not":224,"entity_fields_selections":225,"->":226,"dataset":227,"dataset_statement_block":228,"dataset_statement_option0":229,"is":230,"article_keyword_or_not":231,"dataset_join_with_item":232,"dataset_join_with_block":233,"dataset_join_with_item_option0":234,"view":235,"view_statement_block":236,"view_statement_option0":237,"view_main_entity":238,"view_selection_or_not":239,"group_by_or_not":240,"having_or_not":241,"order_by_or_not":242,"skip_or_not":243,"limit_or_not":244,"list":245,"view_selection":246,"a":247,"an":248,"the":249,"one":250,"selection_attributive_keywords":251,"of":252,"which":253,"where":254,"selection_keywords":255,"selectedBy":256,"selected":257,"group":258,"identifier_string_or_dotname_list":259,"identifier_string_or_dotname_block":260,"group_by_or_not_option0":261,"having":262,"order":263,"order_by_list":264,"order_by_block":265,"order_by_or_not_option0":266,"order_by_clause":267,"ascend":268,"<":269,"descend":270,">":271,"order_by_list0":272,",":273,"offset":274,"INTEGER":275,"REFERENCE":276,"limit":277,"gfc_param0":278,"nfc_param_list":279,"nfc_param":280,"nfc_param_list0":281,"gfc_param_list0":282,"DOTNAME":283,"identifier_string_or_dotname_list0":284,"NAME":285,"FLOAT":286,"BOOL":287,"REGEXP":288,"SCRIPT":289,"SYMBOL":290,"kv_pairs":291,"kv_pair_item":292,"non_exist":293,"kv_pairs0":294,"[":295,"]":296,"identifier_or_string_list0":297,"simple_expression":298,"logical_expression":299,"boolean_expression":300,"unary_expression":301,"binary_expression":302,"exists":303,"not":304,"null":305,"~":306,">=":307,"<=":308,"==":309,"!=":310,"in":311,"logical_expression_right":312,"logical_operators":313,"and":314,"or":315,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",38:"entities",41:"views",44:"type",52:":",60:"any",61:"enum",62:"array",63:"object",64:"int",65:"integer",66:"number",67:"float",68:"decimal",69:"text",70:"string",71:"bool",72:"boolean",73:"blob",74:"binary",75:"buffer",76:"datetime",77:"timestamp",83:"|~",85:"|>",86:"|=",91:"extends",93:"entity",104:"mixes",105:"--",106:"with",110:"has",117:"associations",128:"hasOne",129:"hasMany",130:"refersTo",131:"belongsTo",133:"connectedBy",137:"being",141:"when",143:"as",145:"optional",146:"default",147:"(",148:")",149:"key",150:"index",156:"unique",157:"data",160:"interface",170:"accept",177:"findOne",178:"find",183:"by",184:"cases",185:"below",191:"=>",195:"otherwise",196:"else",199:"return",201:"throw",203:"unless",208:"update",209:"where_expr",211:"create",213:"delete",215:"do",216:"{",217:"javascript",218:"}",220:"set",221:"identifier_or_member_access",222:"<-",224:"variable_modifier_or_not",226:"->",227:"dataset",230:"is",235:"view",245:"list",247:"a",248:"an",249:"the",250:"one",252:"of",253:"which",254:"where",256:"selectedBy",257:"selected",258:"group",262:"having",263:"order",268:"ascend",269:"<",270:"descend",271:">",273:",",274:"offset",275:"INTEGER",276:"REFERENCE",277:"limit",283:"DOTNAME",285:"NAME",286:"FLOAT",287:"BOOL",288:"REGEXP",289:"SCRIPT",290:"SYMBOL",295:"[",296:"]",303:"exists",304:"not",305:"null",306:"~",307:">=",308:"<=",309:"==",310:"!=",311:"in",314:"and",315:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[31,3],[35,0],[35,1],[37,6],[39,2],[39,3],[36,6],[42,2],[42,3],[10,3],[10,6],[45,5],[46,2],[46,3],[48,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[54,1],[54,1],[55,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[58,1],[58,1],[58,1],[59,1],[59,1],[49,0],[49,1],[78,1],[78,2],[79,1],[79,1],[50,0],[50,1],[81,1],[81,2],[82,2],[82,2],[82,2],[82,2],[82,2],[82,2],[12,2],[12,6],[87,1],[87,3],[90,2],[88,2],[94,1],[94,2],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[103,3],[33,0],[33,3],[96,6],[107,2],[107,3],[97,6],[111,2],[111,3],[113,2],[51,0],[51,2],[114,1],[116,0],[116,1],[98,6],[118,2],[118,3],[120,6],[120,10],[120,6],[121,1],[121,1],[126,1],[126,1],[132,2],[132,4],[132,1],[132,2],[124,5],[136,2],[136,3],[139,3],[139,4],[140,2],[142,2],[144,1],[144,4],[99,3],[99,3],[100,3],[100,6],[152,2],[152,3],[151,1],[151,3],[154,1],[154,1],[101,3],[101,3],[102,6],[161,1],[161,2],[163,6],[164,3],[166,0],[166,1],[169,3],[169,6],[172,2],[172,3],[167,1],[167,2],[174,1],[176,1],[176,2],[175,4],[175,3],[182,1],[182,2],[182,4],[181,6],[181,7],[190,4],[186,1],[186,2],[188,4],[188,4],[188,7],[193,1],[193,1],[194,1],[194,1],[192,2],[192,5],[197,2],[198,2],[198,2],[198,5],[168,0],[168,2],[168,7],[206,4],[206,4],[204,2],[204,3],[207,6],[210,5],[212,4],[214,5],[219,6],[225,1],[225,3],[14,7],[228,3],[233,1],[233,2],[232,2],[232,8],[13,7],[236,9],[238,3],[238,4],[239,0],[239,1],[246,3],[231,0],[231,1],[179,1],[179,1],[179,1],[179,1],[251,2],[251,1],[251,1],[251,1],[255,1],[255,2],[180,1],[180,1],[240,0],[240,4],[240,7],[241,0],[241,3],[242,0],[242,4],[242,7],[265,2],[265,3],[267,1],[267,2],[267,2],[267,2],[267,2],[264,1],[264,2],[272,2],[272,3],[243,0],[243,3],[243,3],[244,0],[244,3],[244,3],[115,4],[200,1],[200,2],[171,1],[109,1],[109,1],[80,4],[279,1],[279,2],[281,2],[281,3],[280,1],[280,1],[84,4],[202,1],[202,2],[282,2],[282,3],[278,1],[278,1],[278,1],[134,1],[134,1],[134,1],[260,2],[260,3],[259,1],[259,2],[284,2],[284,3],[30,1],[30,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[158,2],[158,3],[292,3],[292,2],[292,3],[293,0],[291,1],[291,2],[294,2],[294,3],[159,2],[159,3],[138,3],[92,1],[92,2],[297,2],[297,3],[223,1],[223,1],[135,1],[135,1],[135,1],[298,1],[298,1],[298,3],[301,2],[301,3],[301,3],[301,4],[301,4],[300,3],[300,3],[300,3],[302,3],[302,3],[302,3],[302,3],[302,3],[302,3],[302,3],[302,4],[299,2],[312,2],[313,1],[313,1],[21,0],[21,1],[25,0],[25,1],[32,0],[32,1],[34,0],[34,1],[40,0],[40,1],[43,0],[43,1],[47,0],[47,1],[89,0],[89,1],[108,0],[108,1],[112,0],[112,1],[119,0],[119,1],[122,0],[122,1],[123,0],[123,1],[125,0],[125,1],[127,0],[127,1],[153,0],[153,1],[155,0],[155,1],[162,0],[162,1],[165,0],[165,1],[173,0],[173,1],[187,0],[187,1],[189,0],[189,1],[205,0],[205,1],[229,0],[229,1],[234,0],[234,1],[237,0],[237,1],[261,0],[261,1],[266,0],[266,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 99: case 111: case 127: case 137: case 154: case 189: case 233: case 274:
this.$ = [ $$[$0-1] ];
break;
case 31: case 100: case 112: case 138: case 155: case 190: case 234: case 275:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 125: case 199: case 300:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 104: case 147: case 299: case 301:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 156: case 169: case 200: case 240: case 242: case 257: case 259: case 264: case 266: case 276: case 278: case 305: case 307:
this.$ = [ $$[$0] ];
break;
case 72: case 157: case 170: case 201: case 241: case 243: case 258: case 260: case 265: case 267: case 279: case 306: case 308:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { mixins: $$[$0-1] };
break;
case 97:
this.$ = { comment: $$[$0-1] };
break;
case 98:
this.$ = { features: $$[$0-2] };
break;
case 101:
this.$ = { fields: $$[$0-2] };
break;
case 102:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 103:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 106:
this.$ = { comment: $$[$0] };
break;
case 110:
this.$ = { associations: $$[$0-2] };
break;
case 113:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 114:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 115:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 120:
this.$ = { connectedBy: $$[$0] }    ;
break;
case 121:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] }    ;
break;
case 122:
this.$ = { remoteField: $$[$0] }     ;
break;
case 123:
this.$ = { remoteField: $$[$0] }      ;
break;
case 124:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 126:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 128:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 129:
this.$ = $$[$0];;
break;
case 130:
this.$ = { srcField: $$[$0] };
break;
case 131:
this.$ = { optional: true };
break;
case 132:
this.$ = { default: $$[$0-1] };
break;
case 133: case 134:
this.$ = { key: $$[$0-1] };
break;
case 135:
this.$ = { indexes: [$$[$0-1]] };
break;
case 136:
this.$ = { indexes: $$[$0-2] };
break;
case 140:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 141: case 142:
this.$ = { fields: $$[$0] };
break;
case 143: case 144:
this.$ = { data: $$[$0-1] };
break;
case 145:
this.$ = { interfaces: $$[$0-2] };
break;
case 146:
this.$ = Object.assign({}, $$[$0]);
break;
case 148:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 149:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 152:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 153:
this.$ = { accept: $$[$0-2] };
break;
case 161:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 162:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 166:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 167:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 168:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 171: case 172: case 202: case 293: case 303: case 304: case 316:
this.$ = $$[$0-1];
break;
case 173: case 179:
this.$ = $$[$0-2];
break;
case 180:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 181:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 182:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 183:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 185:
 this.$ = { return: $$[$0-1] }; 
break;
case 186:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 187: case 188:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 191:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 192:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 193:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 194:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 195:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 196:
this.$ = { entity: $$[$0] }     ;
break;
case 197:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 198:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 203:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 204:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 205:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 206:
this.$ = { dataset: $$[$0] };
break;
case 207:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 210:
this.$ = { condition: $$[$0-1] };
break;
case 226:
this.$ = { groupBy: $$[$0-1] };
break;
case 227:
this.$ = { groupBy: $$[$0-2] };
break;
case 229:
this.$ = { having: $$[$0-1] };
break;
case 231:
this.$ = { orderBy: $$[$0-1] };
break;
case 232:
this.$ = { orderBy: $$[$0-2] };
break;
case 235:
this.$ = { field: $$[$0], ascend: true };
break;
case 236: case 237:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 238: case 239:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 245: case 246:
this.$ = { offset: $$[$0-1] };
break;
case 248: case 249:
this.$ = { limit: $$[$0-1] };
break;
case 250:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 252:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 256: case 263:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 262:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 277:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 292:
this.$ = {};
break;
case 294: case 296:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 295:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 302:
this.$ = [];
break;
case 310:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 317:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 318:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 319:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 320:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 321:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 322: case 323:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 324:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 325:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 326:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 327:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 328:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 329:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 330:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 331:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 332:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 333:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 334:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 335:
this.$ = { operator: 'and' };
break;
case 336:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,44:$V3,87:17,90:20,93:$V4,227:$V5,235:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,44:$V3,87:17,90:20,93:$V4,227:$V5,235:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],23:26,26:28,285:$V8},{16:$V9,17:[1,31],26:33,30:32,45:30,285:$V8},{16:$V9,26:33,30:35,285:$V8},{17:[1,36]},{16:$V9,26:33,30:37,285:$V8},{16:$V9,26:33,30:38,285:$V8},{17:[2,81],91:[1,39]},{16:$V9,26:33,30:40,285:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{27:[1,45]},o([17,20,27,52,83,85,86,91,105,106,133,137,141,143,147,148,156,177,178,183,191,199,203,218,226,230,245,252,254,256,257,268,269,270,271,273,285,296,303,304,306,307,308,309,310,311,314,315],[2,282]),{17:[1,46]},{18:[1,47]},{48:48,52:$Va},o($Vb,$Vc),o($Vb,[2,281]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,26:33,30:55,92:54,285:$V8},o([17,91],[2,83]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{23:59,24:58,26:28,285:$V8},{16:$Ve,28:60,158:64,159:65,216:$Vf,275:$Vg,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($V7,[2,32]),{16:$V9,26:33,30:32,45:73,46:72,285:$V8},o($Vn,$Vo,{49:74,78:75,79:76,26:77,80:78,285:$V8}),{16:$V9,26:33,30:90,53:79,54:80,55:81,56:82,57:83,58:84,59:85,60:[1,86],61:[1,87],62:[1,88],63:[1,89],64:[1,91],65:[1,92],66:[1,93],67:[1,94],68:[1,95],69:[1,96],70:[1,97],71:[1,98],72:[1,99],73:[1,100],74:[1,101],75:[1,102],76:[1,103],77:[1,104],285:$V8},{18:[1,105]},o([104,106,110,117,149,150,157,160],$Vp,{88:106,33:107,105:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,82]},o($Vr,[2,305],{297:111,273:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,283]),o($Vt,[2,284]),o($Vt,[2,285]),o($Vt,[2,286]),o($Vt,[2,287]),o($Vt,[2,288]),o($Vt,[2,289]),o($Vt,[2,290]),o($Vt,[2,291]),{16:$V9,26:121,30:120,218:[1,117],275:$Vu,285:$V8,291:118,292:119},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:125,202:124,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,296:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{50:134,81:135,82:136,83:$Vy,85:$Vz,86:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{79:76,26:77,80:78,78:140,285:$V8}),o($VB,[2,67],{147:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),o([20,38,41],$Vp,{31:142,33:143,105:$Vq}),{20:[1,144]},{94:145,95:146,96:147,97:148,98:149,99:150,100:151,101:152,102:153,103:154,104:$VD,106:$VE,110:$VF,117:$VG,149:$VH,150:$VI,157:$VJ,160:$VK},{16:[1,163]},{230:[1,166],236:164,238:165},{228:167,230:[1,168]},o($Vr,[2,306]),{16:$V9,26:33,30:169,285:$V8},o($V7,[2,337],{21:170,17:[1,171]}),{16:$Vd,19:172,20:[2,15]},o($V7,[2,339],{25:173,17:[1,174]}),{20:[2,20],23:59,24:175,26:28,285:$V8},o($Vt,[2,292]),{218:[1,176]},{218:[2,298],273:$VL,294:177},{52:[1,179]},o($VM,[2,297],{293:180,52:$Vc}),{52:[1,181]},o($VN,[2,302]),{296:[1,182]},o($VO,[2,264],{282:183,273:$VP}),o($VQ,[2,251],{82:136,81:185,83:$Vy,85:$Vz,86:$VA}),o($Vt,[2,268]),o($Vt,[2,269]),o($Vt,[2,270]),o($Vt,[2,261]),o($Vt,$VR,{147:$VS}),o($V7,[2,349],{47:187,17:[1,188]}),{16:$V9,20:[2,35],26:33,30:32,45:73,46:189,285:$V8},{17:$VT,51:190,105:$VU},o($Vw,[2,70]),o($VQ,[2,71],{82:136,81:192,83:$Vy,85:$Vz,86:$VA}),{26:193,84:194,285:$V8},{26:195,84:196,285:$V8},{26:197,84:198,285:$V8},o($Vn,[2,66]),{16:$Ve,26:201,28:130,158:64,159:65,216:$Vf,275:$Vg,279:199,280:200,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{20:[1,202]},o($VV,[2,343],{34:203,37:204,38:[1,205]}),o($V7,[2,351],{89:206,17:[1,207]}),{20:[2,84]},{20:[2,85],94:208,95:146,96:147,97:148,98:149,99:150,100:151,101:152,102:153,103:154,104:$VD,106:$VE,110:$VF,117:$VG,149:$VH,150:$VI,157:$VJ,160:$VK},o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),{17:[1,209]},{17:[1,210]},{17:[1,211]},{16:$V9,26:33,30:212,138:213,285:$V8,295:$VX},{16:$V9,17:[1,216],26:33,30:218,138:219,151:215,154:217,285:$V8,295:$VX},{158:220,159:221,216:$Vf,295:$Vm},{17:[1,222]},{16:$V9,26:33,30:55,92:223,285:$V8},{17:[1,224]},{20:[1,225]},{17:[1,226]},o($VY,$VZ,{231:227,179:228,247:$V_,248:$V$,249:$V01,250:$V11}),{20:[1,233]},o($VY,$VZ,{179:228,231:234,247:$V_,248:$V$,249:$V01,250:$V11}),o($Vr,[2,307],{297:235,273:$Vs}),o($V7,[2,14]),o($V7,[2,338]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,340]),{20:[2,21]},o($Vt,[2,293]),{218:[2,299]},{16:$V9,26:121,30:120,275:$Vu,285:$V8,292:236},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:237,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($VM,[2,295]),{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:238,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($VN,[2,303]),o($VO,[2,265]),{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:239,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($VQ,[2,252]),{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:125,202:240,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($V7,[2,33]),o($V7,[2,350]),{20:[2,36]},{17:[2,34]},{16:[1,241]},o($VQ,[2,72]),o($Vt,[2,73],{147:$VS}),o($Vt,[2,74]),o($Vt,[2,75],{147:$VS}),o($Vt,[2,76]),o($Vt,[2,77],{147:$VS}),o($Vt,[2,78]),{148:[1,242]},{148:[2,257],273:$V21,281:243},o([148,273],$VR),o($V7,[2,341],{32:245,17:[1,246]}),{20:[2,24],35:247,36:248,41:[1,249]},o($VV,[2,344]),{17:[1,250]},o($V7,[2,80]),o($V7,[2,352]),{20:[2,86]},{18:[1,251]},{18:[1,252]},{18:[1,253]},{17:[1,254]},{17:[1,255]},{16:$V9,26:33,30:55,92:256,285:$V8},{17:[1,257]},{18:[1,258]},{17:[2,139],155:259,156:[2,369],230:[1,260]},o($V31,[2,141]),o($V31,[2,142]),{17:[1,261]},{17:[1,262]},{18:[1,263]},{17:[1,264]},o([20,38,41,104,106,110,117,149,150,157,160],[2,97]),o($V7,[2,387],{237:265,17:[1,266]}),o([20,106,141,252,254,256,257,258,262,263,274,277],$V41,{166:267,169:268,170:$V51}),{16:$V9,26:33,30:270,285:$V8},o($VY,[2,212]),o($VY,[2,213]),o($VY,[2,214]),o($VY,[2,215]),o($VY,[2,216]),o($V7,[2,383],{229:271,17:[1,272]}),{16:$V9,26:33,30:275,225:274,232:273,285:$V8},o($Vr,[2,308]),{218:[2,300],273:$VL,294:276},o($VM,[2,294]),o($VM,[2,296]),o($VO,[2,266],{282:277,273:$VP}),{148:[1,278]},{17:[2,106]},o($VB,[2,256]),{148:[2,258]},{16:$Ve,26:201,28:130,158:64,159:65,216:$Vf,275:$Vg,280:279,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($V7,[2,22]),o($V7,[2,342]),{20:[2,23]},{20:[2,25]},{17:[1,280]},{18:[1,281]},{26:284,80:285,107:282,109:283,285:$V8},{16:$V9,26:33,30:290,111:286,113:287,114:288,115:289,285:$V8},{118:291,120:292,121:293,126:294,128:$V61,129:$V71,130:$V81,131:$V91},o($VW,[2,133]),o($VW,[2,134]),{296:[1,299]},o($VW,[2,135]),{16:$V9,26:33,30:218,138:219,151:301,152:300,154:217,285:$V8,295:$VX},{156:[1,302]},{156:[2,370]},o($VW,[2,143]),o($VW,[2,144]),{16:$V9,26:33,30:305,161:303,163:304,285:$V8},o($VW,[2,95]),o($V7,[2,204]),o($V7,[2,388]),o($Va1,[2,208],{239:306,246:307,180:308,255:309,251:310,106:$Vb1,141:$Vc1,252:$Vd1,254:$Ve1,256:$Vf1,257:$Vg1}),o($Vh1,[2,151]),{16:$V9,17:[1,318],26:33,30:290,115:319,171:317,285:$V8},{17:[2,206],245:[1,320]},o($V7,[2,198]),o($V7,[2,384]),{20:[2,199]},{17:[1,321],106:[1,322]},o($Vi1,[2,196],{226:[1,323]}),{218:[2,301]},o($VO,[2,267]),o($Vt,[2,263]),{148:[2,259],273:$V21,281:324},{18:[1,325]},{16:$V9,26:33,30:327,39:326,285:$V8},{20:[1,328]},{17:[1,329]},{17:[2,254],147:$VC},{17:[2,255]},{20:[1,330]},{17:[1,331]},{17:$VT,51:332,105:$VU},o($Vw,[2,107]),o($VB,[2,108],{116:333,48:334,52:$Va}),{20:[1,335]},{17:[1,336]},{16:$V9,17:[1,338],26:33,30:337,285:$V8},{16:$V9,26:33,30:339,285:$V8},o($Vj1,[2,116]),o($Vj1,[2,117]),o($VY,[2,118]),o($VY,[2,119]),o([17,105,143,156,230,285],[2,304]),{20:[1,340]},{17:[1,341]},{17:[2,140]},{20:[1,342]},{16:$V9,20:[2,146],26:33,30:305,161:343,163:304,285:$V8},{17:[1,344]},o($Vk1,[2,225],{240:345,258:[1,346]}),o($Va1,[2,209]),{16:$Ve,26:131,28:130,84:129,135:347,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},o($Vn1,[2,223]),o($Vn1,[2,224]),o($Vn1,[2,221]),{183:[1,356]},{253:[1,357]},o($Vn1,[2,218]),o($Vn1,[2,219]),o($Vn1,[2,220]),{17:[1,358]},{18:[1,359]},{17:[2,253]},{17:[2,207]},o($Vo1,[2,202]),{52:[1,360]},{159:361,295:$Vm},{148:[2,260]},{16:$V9,26:33,30:363,42:362,285:$V8},{20:[1,364]},{17:[1,365]},o($VW,[2,353],{108:366,17:[1,367]}),{20:[2,99],26:284,80:285,107:368,109:283,285:$V8},o($VW,[2,355],{112:369,17:[1,370]}),{16:$V9,20:[2,102],26:33,30:290,111:371,113:287,114:288,115:289,285:$V8},{17:[2,104]},o($Vn,$Vo,{78:75,79:76,26:77,80:78,49:372,285:$V8}),o($VB,[2,109]),o($VW,[2,357],{119:373,17:[1,374]}),{20:[2,111],118:375,120:292,121:293,126:294,128:$V61,129:$V71,130:$V81,131:$V91},o($Vp1,[2,359],{122:376,132:377,136:379,133:[1,378],137:[1,380]}),{18:[1,381]},o($VB,[2,365],{127:382,142:383,143:$Vq1}),o($VW,[2,367],{153:385,17:[1,386]}),{16:$V9,20:[2,137],26:33,30:218,138:219,151:301,152:387,154:217,285:$V8,295:$VX},o($VW,[2,371],{162:388,17:[1,389]}),{20:[2,147]},{18:[1,390]},o($Vr1,[2,228],{241:391,262:[1,392]}),{183:[1,393]},{17:[1,394]},o($Vs1,[2,311],{312:395,313:396,314:[1,397],315:[1,398]}),o($Vs1,[2,312]),o($Vs1,[2,313]),o($Vt1,[2,314]),o($Vt1,[2,315]),{16:$Ve,26:131,28:130,84:129,147:$Vl1,158:64,159:65,200:400,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:399,301:351,302:352,304:$Vm1},{230:$Vu1,269:$Vv1,271:$Vw1,303:$Vx1,304:$Vy1,306:[1,401],307:$Vz1,308:$VA1,309:$VB1,310:$VC1,311:$VD1},{147:[1,412]},o($Vn1,[2,222]),o($Vn1,[2,217]),o($Vh1,[2,152]),{16:$V9,26:33,30:290,115:319,171:414,172:413,285:$V8},{17:[1,415]},o($Vi1,[2,197]),{20:[1,416]},{17:[1,417]},o($VV,[2,345],{40:418,17:[1,419]}),{16:$V9,20:[2,27],26:33,30:327,39:420,285:$V8},o($VW,[2,98]),o($VW,[2,354]),{20:[2,100]},o($VW,[2,101]),o($VW,[2,356]),{20:[2,103]},o($Vw,$Vx,{81:135,82:136,50:421,83:$Vy,85:$Vz,86:$VA}),o($VW,[2,110]),o($VW,[2,358]),{20:[2,112]},o($VE1,[2,361],{123:422,142:423,143:$Vq1}),o($Vp1,[2,360]),{16:$VF1,26:425,134:424,283:$VG1,285:$V8},o($Vp1,[2,122]),{16:$V9,26:33,30:429,138:428,285:$V8,295:$VX},{16:$V9,26:33,30:430,285:$V8},o($Vn,$Vo,{78:75,79:76,26:77,80:78,49:431,285:$V8}),o($VB,[2,366]),{16:$V9,26:33,30:432,285:$V8},o($VW,[2,136]),o($VW,[2,368]),{20:[2,138]},o($VW,[2,145]),o($VW,[2,372]),o([177,178],$V41,{169:268,164:433,166:434,170:$V51}),o($VH1,[2,230],{242:435,263:[1,436]}),{16:$Ve,26:131,28:130,84:129,135:437,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{16:$VF1,17:[1,439],26:425,134:440,259:438,283:$VG1,285:$V8},o($Va1,[2,210]),o($Vs1,[2,333]),{16:$Ve,26:131,28:130,84:129,147:$Vl1,158:64,159:65,200:400,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:441,301:351,302:352,304:$Vm1},o($Vn1,[2,335]),o($Vn1,[2,336]),{148:[1,442]},{230:$Vu1,269:$Vv1,271:$Vw1,303:$Vx1,304:$Vy1,307:$Vz1,308:$VA1,309:$VB1,310:$VC1,311:$VD1},{26:443,84:445,285:$V8,288:[1,444]},o($Vt1,[2,317]),{303:[1,446],311:[1,447]},{304:[1,449],305:[1,448]},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:450,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:451,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:452,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:453,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:454,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:455,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:456,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{16:$Ve,26:131,28:130,84:129,147:$Vl1,158:64,159:65,200:400,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:457,301:351,302:352,304:$Vm1},{20:[1,458]},{17:[1,459]},{18:[1,460]},{17:[1,462],20:[2,347],43:461},{16:$V9,20:[2,30],26:33,30:363,42:463,285:$V8},o($VV,[2,26]),o($VV,[2,346]),{20:[2,28]},o($Vw,[2,250]),o($Vw,$Vo,{78:75,79:76,26:77,80:78,49:464,285:$V8}),o($VE1,[2,362]),o($Vp1,[2,120],{106:[1,465]}),o($VI1,[2,271]),o($VI1,[2,272]),o($VI1,[2,273]),o($Vp1,[2,123]),o($Vp1,[2,125],{140:466,106:[1,467]}),{52:[1,469],124:468},o($Vw,$Vx,{81:135,82:136,50:470,83:$Vy,85:$Vz,86:$VA}),o($VB,[2,130]),{20:[1,471]},{167:472,174:473,175:474,176:475,177:$VJ1,178:$VK1},o($VL1,[2,244],{243:478,274:[1,479]}),{183:[1,480]},{17:[1,481]},{17:[1,482]},{18:[1,483]},{17:[2,276],273:$VM1,284:484},o($Vs1,[2,334]),o($Vt1,[2,316]),o($Vs1,[2,322],{147:$VS}),o($Vs1,[2,323]),o($Vs1,[2,324]),o($Vt1,[2,318]),{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:486,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($Vt1,[2,319]),{305:[1,487]},o($Vt1,[2,325]),o($Vt1,[2,326]),o($Vt1,[2,327]),o($Vt1,[2,328]),o($Vt1,[2,329]),o($Vt1,[2,330]),o($Vt1,[2,331]),{148:[1,488]},o($Vh1,[2,375],{173:489,17:[1,490]}),{16:$V9,20:[2,154],26:33,30:290,115:319,171:414,172:491,285:$V8},{16:$V9,26:33,30:275,225:274,232:493,233:492,285:$V8},{20:[2,29]},{20:[2,348]},{20:[2,31]},{17:$VT,51:494,105:$VU},{16:$Ve,26:131,28:130,84:129,135:495,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},o($Vp1,[2,126]),{16:$Ve,26:131,28:130,84:129,135:496,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},o($VE1,[2,363],{125:497,142:498,143:$Vq1}),{17:[1,499]},{17:$VT,51:500,105:$VU},o($Vo1,[2,373],{165:501,17:[1,502]}),{20:[2,184],168:503,197:504,199:$VN1},o($VO1,[2,156],{174:473,175:474,176:475,167:506,177:$VJ1,178:$VK1}),o($VP1,[2,158]),{16:$V9,26:33,30:507,285:$V8},o($VY,[2,159]),{179:508,247:$V_,248:$V$,249:$V01,250:$V11},{20:[2,247],244:509,277:[1,510]},{275:[1,511],276:[1,512]},{16:$VF1,17:[1,514],26:425,134:516,264:513,267:515,283:$VG1,285:$V8},o($Vr1,[2,229]),o($Vk1,[2,226]),{16:$VF1,26:425,134:518,260:517,283:$VG1,285:$V8},{17:[2,277]},{16:$VF1,26:425,134:519,283:$VG1,285:$V8},o($Vt1,[2,332]),o($Vt1,[2,320]),o($Vt1,[2,321]),o($Vh1,[2,153]),o($Vh1,[2,376]),{20:[2,155]},{20:[1,520]},{16:$V9,20:[2,200],26:33,30:275,225:274,232:493,233:521,285:$V8},{17:[2,113]},o($Vp1,[2,121]),o($Vp1,[2,129]),o($Vw,$Vo,{78:75,79:76,26:77,80:78,49:522,285:$V8}),o($VE1,[2,364]),{18:[1,523]},{17:[2,115]},o($Vo1,[2,148]),o($Vo1,[2,374]),{20:[2,149]},{17:[1,524],203:[1,525]},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:526,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($VO1,[2,157]),{52:[1,530],106:$Vb1,141:$Vc1,180:527,181:528,182:529,183:[1,531],251:310,252:$Vd1,254:$Ve1,255:309,256:$Vf1,257:$Vg1},o($VY,[2,160]),{20:[2,205]},{275:[1,532],276:[1,533]},{17:[1,534]},{17:[1,535]},{17:[1,536]},{18:[1,537]},{17:[2,240],272:538,273:$VQ1},o($VR1,[2,235],{268:[1,540],269:[1,541],270:[1,542],271:[1,543]}),{20:[1,544]},{17:[1,545]},{17:[2,278],273:$VM1,284:546},o($Vo1,[2,385],{234:547,17:[1,548]}),{20:[2,201]},{17:$VT,51:549,105:$VU},{139:550,141:$VS1},{20:[2,185]},{17:[1,552]},o([17,203],[2,180]),{16:$Ve,26:131,28:130,84:129,135:553,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},o($VP1,[2,162]),{17:[1,554]},{17:[2,163]},{184:[1,555]},{17:[1,556]},{17:[1,557]},o($VL1,[2,245]),o($VL1,[2,246]),o($VH1,[2,231]),{16:$VF1,26:425,134:516,265:558,267:559,283:$VG1,285:$V8},{17:[2,241]},{16:$VF1,26:425,134:516,267:560,283:$VG1,285:$V8},o($VR1,[2,236]),o($VR1,[2,237]),o($VR1,[2,238]),o($VR1,[2,239]),o($Vk1,[2,389],{261:561,17:[1,562]}),{16:$VF1,20:[2,274],26:425,134:518,260:563,283:$VG1,285:$V8},{17:[2,279]},o($Vo1,[2,203]),o($Vo1,[2,386]),{17:[1,564]},{20:[1,565]},{136:566,137:[1,567]},{18:[1,568]},o($VP1,[2,161]),{18:[1,569]},{17:[2,164],143:[1,570]},{20:[2,248]},{20:[2,249]},{20:[1,571]},{17:[1,572]},{17:[2,242],272:573,273:$VQ1},o($Vk1,[2,227]),o($Vk1,[2,390]),{20:[2,275]},{20:[1,574]},o($Vp1,[2,124]),{17:[1,575]},{16:$V9,26:33,30:429,285:$V8},{141:$VT1,204:576,206:577},{141:$VU1,186:579,190:580},{185:[1,582]},o($VH1,[2,391],{266:583,17:[1,584]}),{16:$VF1,20:[2,233],26:425,134:516,265:585,267:559,283:$VG1,285:$V8},{17:[2,243]},{17:[2,114]},{20:[2,127],139:586,141:$VS1},{20:[1,587]},{17:[1,588]},{16:$Ve,26:131,28:130,84:129,135:589,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{20:[1,590],188:591,193:592,195:[1,593],196:[1,594]},o($VV1,[2,169],{190:580,186:595,141:$VU1}),{16:$Ve,26:131,28:130,84:129,135:596,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{17:[2,165]},o($VH1,[2,232]),o($VH1,[2,392]),{20:[2,234]},{20:[2,128]},{17:[1,598],20:[2,381],205:597},{20:[2,189],141:$VT1,204:599,206:577},{191:[1,600]},o($VP1,[2,377],{187:601,17:[1,602]}),{20:[1,603]},{191:[1,604]},{191:[2,174]},{191:[2,175]},o($VV1,[2,170]),{191:[1,605]},{20:[2,186]},{20:[2,382]},{20:[2,190]},{16:$Ve,26:131,28:130,84:129,158:64,159:65,198:607,200:606,201:$VW1,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},o($VP1,[2,166]),o($VP1,[2,378]),o($VP1,[2,379],{189:609,17:[1,610]}),{16:$Ve,17:[1,613],26:131,28:130,84:129,135:614,147:$Vl1,158:64,159:65,192:611,194:612,197:615,198:616,199:$VN1,200:354,201:$VW1,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{16:$Ve,17:[1,618],26:131,28:130,84:129,135:614,147:$Vl1,158:64,159:65,192:617,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{17:[2,187]},{17:[2,188]},{16:[1,619],26:620,285:$V8},o($VP1,[2,167]),o($VP1,[2,380]),{17:[1,621]},{17:[1,622]},{18:[1,623]},{17:[1,624]},{17:[2,176]},{17:[2,177]},o([20,141,195,196],[2,168]),{18:[1,625]},{17:[2,181]},{17:[2,182],147:[1,626]},{20:[2,171]},{20:[2,172]},{16:$Ve,26:131,28:130,84:129,135:628,147:$Vl1,158:64,159:65,194:627,197:615,198:616,199:$VN1,200:354,201:$VW1,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},o($VX1,[2,178]),{16:$Ve,26:131,28:130,84:129,135:628,147:$Vl1,158:64,159:65,200:354,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm,298:348,299:349,300:350,301:351,302:352,304:$Vm1},{16:$Ve,26:131,28:130,84:129,158:64,159:65,200:125,202:629,216:$Vf,275:$Vg,276:$Vv,278:126,280:127,285:$V8,286:$Vh,287:$Vi,288:$Vj,289:$Vk,290:$Vl,295:$Vm},{17:[1,630]},{17:[1,631]},{148:[1,632]},{20:[1,633]},{20:[1,634]},{17:[2,183]},{20:[2,173]},o($VX1,[2,179])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],60:[2,19],145:[2,84],172:[2,16],175:[2,21],177:[2,299],189:[2,36],190:[2,34],208:[2,86],241:[2,106],243:[2,258],247:[2,23],248:[2,25],260:[2,370],273:[2,199],276:[2,301],285:[2,255],302:[2,140],319:[2,253],320:[2,207],324:[2,260],332:[2,104],343:[2,147],368:[2,100],371:[2,103],375:[2,112],387:[2,138],420:[2,28],461:[2,29],462:[2,348],463:[2,31],484:[2,277],491:[2,155],494:[2,113],500:[2,115],503:[2,149],509:[2,205],521:[2,201],524:[2,185],530:[2,163],538:[2,241],546:[2,279],556:[2,248],557:[2,249],563:[2,275],573:[2,243],574:[2,114],582:[2,165],585:[2,234],586:[2,128],593:[2,174],594:[2,175],597:[2,186],598:[2,382],599:[2,190],606:[2,187],607:[2,188],615:[2,176],616:[2,177],619:[2,181],621:[2,171],622:[2,172],632:[2,183],633:[2,173]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),        
    };

    //next state transition table
    const NEXT_STATE = {
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',
        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([                        
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],
        [ 'import.block', 1 ],
        [ 'type.block', 1 ],
        [ 'const.block', 1 ],         
        [ 'entity.mixes', 1 ],
        [ 'entity.key', 1 ],        
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //exceptions of NEWLINE_STOPPER in the case of indent happens
    const NEWLINE_STOPPER_INDENT_EXCEPTION = new Set([           
        'import',
        'type',     
        'const'
    ]);

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when',
        'entity.associations.item',
        'entity.associations.item.block.when'                
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            if (NEWLINE_STOPPER_INDENT_EXCEPTION.has(this.lastState)) {
                this.markNewlineStop(false);
            }

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    if (DBG_MODE) {
                        console.log('< exit state:', last, '\n');
                    }
                } while (last !== finalStateToExit);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 289;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 288;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 286;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 275;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 275;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 283;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 290;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 276;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 287;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                    /*
                                    if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                        state.exitState(state.lastState);                                                                        
                                    }*/

                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                }                                

                                return 285;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)|(exists|null)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}