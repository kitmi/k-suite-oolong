/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,21,27,38,85,208,214],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,45,76,78,79,83,97,98,125,128,131,133,140,164,170,207,210,223,230,232,234,235,249,261,272],$Vc=[2,270],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,76,78,79,97],$Vo=[2,63],$Vp=[2,96],$Vq=[1,108],$Vr=[17,272],$Vs=[1,112],$Vt=[17,20,76,78,79,131,133,158,159,171,179,184,185,199,210,245,247,249,272,279,280,282,283,284,285,286,287,290,291],$Vu=[1,122],$Vv=[1,128],$Vw=[17,97],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,76,78,79,97,261],$VC=[1,141],$VD=[1,162],$VE=[1,155],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,174],$VM=[199,249],$VN=[17,20,76,78,79,98,131,133,158,159,171,179,184,185,199,210,245,247,249,272,279,280,282,283,284,285,286,287,290,291],$VO=[184,272],$VP=[1,180],$VQ=[17,20,131,133,158,159,171,179,184,185,199,210,245,247,249,272,279,280,282,283,284,285,286,287,290,291],$VR=[2,252],$VS=[1,182],$VT=[2,105],$VU=[1,185],$VV=[17,20,97,131,133,158,159,171,179,184,185,199,210,245,247,249,272,279,280,282,283,284,285,286,287,290,291],$VW=[20,96,98,101,107,134,135,141,144],$VX=[1,205],$VY=[16,261],$VZ=[2,201],$V_=[1,220],$V$=[1,221],$V01=[1,222],$V11=[1,223],$V21=[17,20,76,78,79,97,131,133,158,159,171,179,184,185,199,210,245,247,249,272,279,280,282,283,284,285,286,287,290,291],$V31=[1,235],$V41=[17,140,210],$V51=[2,140],$V61=[1,256],$V71=[1,278],$V81=[1,279],$V91=[1,280],$Va1=[1,281],$Vb1=[20,236,239,240,250,253],$Vc1=[1,299],$Vd1=[1,298],$Ve1=[1,296],$Vf1=[1,297],$Vg1=[1,294],$Vh1=[1,295],$Vi1=[20,98,158,159,170,230,232,234,235,236,239,240,250,253],$Vj1=[17,98],$Vk1=[20,239,240,250,253],$Vl1=[1,337],$Vm1=[1,339],$Vn1=[16,182,197,251,252,261,262,263,264,265,266,271,280],$Vo1=[16,20,261],$Vp1=[17,131,133],$Vq1=[1,356],$Vr1=[1,357],$Vs1=[17,133],$Vt1=[1,362],$Vu1=[20,240,250,253],$Vv1=[17,20,131,133,158,159,171,179],$Vw1=[17,20,131,133,158,159,171,179,184,290,291],$Vx1=[1,380],$Vy1=[1,382],$Vz1=[1,381],$VA1=[1,378],$VB1=[1,379],$VC1=[1,383],$VD1=[1,384],$VE1=[1,385],$VF1=[1,386],$VG1=[1,387],$VH1=[1,400],$VI1=[1,401],$VJ1=[1,408],$VK1=[20,250,253],$VL1=[17,98,131,133,244,245,246,247,249],$VM1=[1,451],$VN1=[1,452],$VO1=[20,253],$VP1=[1,460],$VQ1=[1,470],$VR1=[20,179],$VS1=[20,158,159,179],$VT1=[1,502],$VU1=[17,249],$VV1=[1,528],$VW1=[1,531],$VX1=[20,175,176],$VY1=[1,551],$VZ1=[17,20,170,175,176];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"const":21,"const_statement_item":22,"const_statement_block":23,"identifier":24,"=":25,"literal":26,"schema":27,"identifier_or_string":28,"schema_statement_block":29,"comment_or_not":30,"schema_entities":31,"schema_views_or_not":32,"schema_views":33,"entities":34,"schema_entities_block":35,"views":36,"schema_views_block":37,"type":38,"type_statement_item":39,"type_statement_block":40,"type_base":41,"type_info_or_not":42,"type_modifiers_or_not":43,"field_comment_or_not":44,":":45,"types":46,"int_keyword":47,"number_keyword":48,"text_keyword":49,"bool_keyword":50,"binary_keyword":51,"datetime_keyword":52,"any":53,"enum":54,"array":55,"object":56,"int":57,"integer":58,"number":59,"float":60,"decimal":61,"text":62,"string":63,"bool":64,"boolean":65,"blob":66,"binary":67,"buffer":68,"datetime":69,"timestamp":70,"type_infos":71,"type_info":72,"narrow_function_call":73,"type_modifiers":74,"type_modifier":75,"|~":76,"general_function_call":77,"|>":78,"|=":79,"entity_statement_header":80,"entity_statement_block":81,"entity_statement_header0":82,"extends":83,"identifier_or_string_list":84,"entity":85,"entity_sub_items":86,"entity_sub_item":87,"with_features":88,"has_fields":89,"associations_statement":90,"key_statement":91,"index_statement":92,"data_statement":93,"interfaces_statement":94,"mixin_statement":95,"mixes":96,"--":97,"with":98,"with_features_block":99,"feature_inject":100,"has":101,"has_fields_block":102,"field_item":103,"field_item_body":104,"modifiable_field":105,"type_base_or_not":106,"associations":107,"associations_block":108,"association_item":109,"hasOne":110,"association_item_option0":111,"association_item_option1":112,"association_item_option2":113,"hasMany":114,"association_item_option3":115,"association_item_option4":116,"association_item_option5":117,"refersTo":118,"association_item_option6":119,"association_item_option7":120,"belongsTo":121,"association_item_option8":122,"association_item_option9":123,"association_through":124,"connectedBy":125,"identifier_string_or_dotname":126,"conditional_expression":127,"being":128,"array_of_identifier_or_string":129,"association_as":130,"as":131,"association_optional":132,"optional":133,"key":134,"index":135,"index_item":136,"index_statement_block":137,"index_item_body":138,"index_item_option0":139,"unique":140,"data":141,"inline_object":142,"inline_array":143,"interface":144,"interfaces_statement_block":145,"interface_definition":146,"interface_definition_body":147,"accept_or_not":148,"implementation":149,"return_or_not":150,"accept_statement":151,"accept":152,"modifiable_param":153,"accept_block":154,"operation":155,"find_one_operation":156,"find_one_keywords":157,"findOne":158,"find":159,"article_keyword":160,"selection_inline_keywords":161,"case_statement":162,"cases_keywords":163,"by":164,"cases":165,"below":166,"case_condition_block":167,"otherwise_statement":168,"case_condition_item":169,"when":170,"=>":171,"condition_as_result_expression":172,"otherwise_keywords":173,"stop_controll_flow_expression":174,"otherwise":175,"else":176,"return_expression":177,"throw_error_expression":178,"return":179,"modifiable_value":180,"throw":181,"(":182,"gfc_param_list":183,")":184,"unless":185,"return_condition_block":186,"return_condition_item":187,"update_operation":188,"update":189,"where_expr":190,"create_operation":191,"create":192,"delete_operation":193,"delete":194,"coding_block":195,"do":196,"{":197,"javascript":198,"}":199,"assign_operation":200,"set":201,"identifier_or_member_access":202,"<-":203,"value":204,"variable_modifier_or_not":205,"entity_fields_selections":206,"->":207,"dataset":208,"dataset_statement_block":209,"is":210,"article_keyword_or_not":211,"dataset_join_with_item":212,"dataset_join_with_block":213,"view":214,"view_statement_block":215,"view_main_entity":216,"view_selection_or_not":217,"group_by_or_not":218,"having_or_not":219,"order_by_or_not":220,"skip_or_not":221,"limit_or_not":222,"list":223,"view_selection":224,"a":225,"an":226,"the":227,"one":228,"selection_attributive_keywords":229,"of":230,"which":231,"where":232,"selection_keywords":233,"selectedBy":234,"selected":235,"group":236,"identifier_string_or_dotname_list":237,"identifier_string_or_dotname_block":238,"having":239,"order":240,"order_by_list":241,"order_by_block":242,"order_by_clause":243,"ascend":244,"<":245,"descend":246,">":247,"order_by_list0":248,",":249,"offset":250,"INTEGER":251,"REFERENCE":252,"limit":253,"gfc_param0":254,"nfc_param_list":255,"nfc_param":256,"nfc_param_list0":257,"gfc_param_list0":258,"DOTNAME":259,"identifier_string_or_dotname_list0":260,"NAME":261,"FLOAT":262,"BOOL":263,"REGEXP":264,"SCRIPT":265,"SYMBOL":266,"kv_pairs":267,"kv_pair_item":268,"non_exist":269,"kv_pairs0":270,"[":271,"]":272,"identifier_or_string_list0":273,"simple_expression":274,"logical_expression":275,"boolean_expression":276,"unary_expression":277,"binary_expression":278,"exists":279,"not":280,"null":281,"~":282,">=":283,"<=":284,"==":285,"!=":286,"in":287,"logical_expression_right":288,"logical_operators":289,"and":290,"or":291,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",21:"const",25:"=",27:"schema",34:"entities",36:"views",38:"type",45:":",53:"any",54:"enum",55:"array",56:"object",57:"int",58:"integer",59:"number",60:"float",61:"decimal",62:"text",63:"string",64:"bool",65:"boolean",66:"blob",67:"binary",68:"buffer",69:"datetime",70:"timestamp",76:"|~",78:"|>",79:"|=",83:"extends",85:"entity",96:"mixes",97:"--",98:"with",101:"has",107:"associations",110:"hasOne",114:"hasMany",118:"refersTo",121:"belongsTo",125:"connectedBy",128:"being",131:"as",133:"optional",134:"key",135:"index",140:"unique",141:"data",144:"interface",152:"accept",158:"findOne",159:"find",164:"by",165:"cases",166:"below",170:"when",171:"=>",175:"otherwise",176:"else",179:"return",181:"throw",182:"(",184:")",185:"unless",189:"update",190:"where_expr",192:"create",194:"delete",196:"do",197:"{",198:"javascript",199:"}",201:"set",202:"identifier_or_member_access",203:"<-",205:"variable_modifier_or_not",207:"->",208:"dataset",210:"is",214:"view",223:"list",225:"a",226:"an",227:"the",228:"one",230:"of",231:"which",232:"where",234:"selectedBy",235:"selected",236:"group",239:"having",240:"order",244:"ascend",245:"<",246:"descend",247:">",249:",",250:"offset",251:"INTEGER",252:"REFERENCE",253:"limit",259:"DOTNAME",261:"NAME",262:"FLOAT",263:"BOOL",264:"REGEXP",265:"SCRIPT",266:"SYMBOL",271:"[",272:"]",279:"exists",280:"not",281:"null",282:"~",283:">=",284:"<=",285:"==",286:"!=",287:"in",290:"and",291:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[19,2],[19,3],[9,3],[9,5],[22,3],[23,2],[23,3],[11,6],[29,3],[32,0],[32,1],[31,5],[35,2],[35,3],[33,5],[37,2],[37,3],[10,3],[10,5],[39,5],[40,2],[40,3],[41,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[50,1],[50,1],[51,1],[51,1],[51,1],[52,1],[52,1],[42,0],[42,1],[71,1],[71,2],[72,1],[72,1],[43,0],[43,1],[74,1],[74,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[12,2],[12,5],[80,1],[80,3],[82,2],[81,2],[86,1],[86,2],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[95,3],[30,0],[30,3],[88,5],[99,2],[99,3],[89,5],[102,2],[102,3],[103,2],[44,0],[44,2],[104,1],[106,0],[106,1],[90,5],[108,2],[108,3],[109,5],[109,5],[109,4],[109,4],[124,2],[124,4],[124,2],[124,2],[130,2],[132,1],[91,3],[91,3],[92,3],[92,5],[137,2],[137,3],[136,1],[136,3],[138,1],[138,1],[93,3],[93,3],[94,5],[145,1],[145,2],[146,5],[147,3],[148,0],[148,1],[151,3],[151,5],[154,2],[154,3],[149,1],[149,2],[155,1],[157,1],[157,2],[156,4],[156,3],[163,1],[163,2],[163,4],[162,5],[162,6],[169,4],[167,1],[167,2],[168,4],[168,4],[168,7],[173,1],[173,1],[174,1],[174,1],[172,2],[172,5],[177,2],[178,2],[178,2],[178,5],[150,0],[150,2],[150,6],[187,4],[187,4],[186,2],[186,3],[188,6],[191,5],[193,4],[195,5],[200,6],[206,1],[206,3],[14,6],[209,3],[213,1],[213,2],[212,2],[212,7],[13,6],[215,9],[216,3],[216,4],[217,0],[217,1],[224,3],[211,0],[211,1],[160,1],[160,1],[160,1],[160,1],[229,2],[229,1],[229,1],[229,1],[233,1],[233,2],[161,1],[161,1],[218,0],[218,4],[218,6],[219,0],[219,3],[220,0],[220,4],[220,6],[242,2],[242,3],[243,1],[243,2],[243,2],[243,2],[243,2],[241,1],[241,2],[248,2],[248,3],[221,0],[221,3],[221,3],[222,0],[222,3],[222,3],[105,4],[180,1],[180,2],[153,1],[100,1],[100,1],[73,4],[255,1],[255,2],[257,2],[257,3],[256,1],[256,1],[77,4],[183,1],[183,2],[258,2],[258,3],[254,1],[254,1],[254,1],[126,1],[126,1],[126,1],[238,2],[238,3],[237,1],[237,2],[260,2],[260,3],[28,1],[28,1],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[142,2],[142,3],[268,3],[268,2],[268,3],[269,0],[267,1],[267,2],[270,2],[270,3],[143,2],[143,3],[129,3],[84,1],[84,2],[273,2],[273,3],[204,1],[204,1],[127,1],[127,1],[127,1],[274,1],[274,1],[274,3],[277,2],[277,3],[277,3],[277,4],[277,4],[276,3],[276,3],[276,3],[278,3],[278,3],[278,3],[278,3],[278,3],[278,3],[278,3],[278,4],[275,2],[288,2],[289,1],[289,1],[111,0],[111,1],[112,0],[112,1],[113,0],[113,1],[115,0],[115,1],[116,0],[116,1],[117,0],[117,1],[119,0],[119,1],[120,0],[120,1],[122,0],[122,1],[123,0],[123,1],[139,0],[139,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-1] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-1] };
break;
case 30: case 99: case 111: case 127: case 144: case 179: case 223: case 264:
this.$ = [ $$[$0-1] ];
break;
case 31: case 100: case 112: case 128: case 145: case 180: case 224: case 265:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 189: case 290:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 104: case 137: case 289: case 291:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 146: case 159: case 190: case 230: case 232: case 247: case 249: case 254: case 256: case 266: case 268: case 295: case 297:
this.$ = [ $$[$0] ];
break;
case 72: case 147: case 160: case 191: case 231: case 233: case 248: case 250: case 255: case 257: case 269: case 296: case 298:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { mixins: $$[$0-1] };
break;
case 97:
this.$ = { comment: $$[$0-1] };
break;
case 98:
this.$ = { features: $$[$0-1] };
break;
case 101:
this.$ = { fields: $$[$0-1] };
break;
case 102:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 103:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 106:
this.$ = { comment: $$[$0] };
break;
case 110:
this.$ = { associations: $$[$0-1] };
break;
case 113:
this.$ = { type: 'hasOne', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 114:
this.$ = { type: 'hasMany', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 115:
this.$ = { type: 'refersTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 116:
this.$ = { type: 'belongsTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 117:
this.$ = { connectedBy: $$[$0] }    ;
break;
case 118:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] }    ;
break;
case 119:
this.$ = { remoteField: $$[$0] }   ;
break;
case 120:
this.$ = { remoteFields: $$[$0] }    ;
break;
case 121:
this.$ = { srcField: $$[$0] };
break;
case 122:
this.$ = { optional: true };
break;
case 123: case 124:
this.$ = { key: $$[$0-1] };
break;
case 125:
this.$ = { indexes: [$$[$0-1]] };
break;
case 126:
this.$ = { indexes: $$[$0-1] };
break;
case 130:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 131: case 132:
this.$ = { fields: $$[$0] };
break;
case 133: case 134:
this.$ = { data: $$[$0-1] };
break;
case 135:
this.$ = { interfaces: $$[$0-1] };
break;
case 136:
this.$ = Object.assign({}, $$[$0]);
break;
case 138:
this.$ = { [$$[$0-4]]: $$[$0-1] };
break;
case 139:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 142:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 143:
this.$ = { accept: $$[$0-1] };
break;
case 151:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 152:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 156:
this.$ = { oolType: 'cases', items: $$[$0-1] };
break;
case 157:
this.$ = { oolType: 'cases', items: $$[$0-2], else: $$[$0-1] } ;
break;
case 158:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 161: case 162: case 192: case 283: case 293: case 294: case 306:
this.$ = $$[$0-1];
break;
case 163: case 169:
this.$ = $$[$0-2];
break;
case 170:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 171:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 172:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 173:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 175:
 this.$ = { return: $$[$0-1] }; 
break;
case 176:
 this.$ = { return: Object.assign($$[$0-5], { exceptions: $$[$0-1] }) }; 
break;
case 177: case 178:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 181:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 182:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 183:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 184:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 185:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 186:
this.$ = { entity: $$[$0] }     ;
break;
case 187:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 188:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 193:
this.$ = { ...$$[$0-6], with: $$[$0-1] };
break;
case 194:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 195:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 196:
this.$ = { dataset: $$[$0] };
break;
case 197:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 200:
this.$ = { condition: $$[$0-1] };
break;
case 216: case 217:
this.$ = { groupBy: $$[$0-1] };
break;
case 219:
this.$ = { having: $$[$0-1] };
break;
case 221: case 222:
this.$ = { orderBy: $$[$0-1] };
break;
case 225:
this.$ = { field: $$[$0], ascend: true };
break;
case 226: case 227:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 228: case 229:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 235: case 236:
this.$ = { offset: $$[$0-1] };
break;
case 238: case 239:
this.$ = { limit: $$[$0-1] };
break;
case 240:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 242:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 246: case 253:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 252:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 267:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 282:
this.$ = {};
break;
case 284: case 286:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 285:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 292:
this.$ = [];
break;
case 300:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 307:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 308:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 309:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 310:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 311:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 312: case 313:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 314:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 315:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 316:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 317:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 318:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 319:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 320:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 321:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 322:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 323:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 324:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 325:
this.$ = { operator: 'and' };
break;
case 326:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,208:$V5,214:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,208:$V5,214:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],22:26,24:28,261:$V8},{16:$V9,17:[1,31],24:33,28:32,39:30,261:$V8},{16:$V9,24:33,28:35,261:$V8},{17:[1,36]},{16:$V9,24:33,28:37,261:$V8},{16:$V9,24:33,28:38,261:$V8},{17:[2,81],83:[1,39]},{16:$V9,24:33,28:40,261:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{25:[1,45]},o([17,20,25,45,76,78,79,83,97,98,125,128,131,133,140,158,159,164,170,171,179,182,184,185,199,207,210,223,230,232,234,235,244,245,246,247,249,261,272,279,280,282,283,284,285,286,287,290,291],[2,272]),{17:[1,46]},{18:[1,47]},{41:48,45:$Va},o($Vb,$Vc),o($Vb,[2,271]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,24:33,28:55,84:54,261:$V8},o([17,83],[2,83]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{22:59,23:58,24:28,261:$V8},{16:$Ve,26:60,142:64,143:65,197:$Vf,251:$Vg,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($V7,[2,32]),{16:$V9,24:33,28:32,39:73,40:72,261:$V8},o($Vn,$Vo,{42:74,71:75,72:76,24:77,73:78,261:$V8}),{16:$V9,24:33,28:90,46:79,47:80,48:81,49:82,50:83,51:84,52:85,53:[1,86],54:[1,87],55:[1,88],56:[1,89],57:[1,91],58:[1,92],59:[1,93],60:[1,94],61:[1,95],62:[1,96],63:[1,97],64:[1,98],65:[1,99],66:[1,100],67:[1,101],68:[1,102],69:[1,103],70:[1,104],261:$V8},{18:[1,105]},o([96,98,101,107,134,135,141,144],$Vp,{81:106,30:107,97:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,82]},o($Vr,[2,295],{273:111,249:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,273]),o($Vt,[2,274]),o($Vt,[2,275]),o($Vt,[2,276]),o($Vt,[2,277]),o($Vt,[2,278]),o($Vt,[2,279]),o($Vt,[2,280]),o($Vt,[2,281]),{16:$V9,24:121,28:120,199:[1,117],251:$Vu,261:$V8,267:118,268:119},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:125,183:124,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,272:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{43:134,74:135,75:136,76:$Vy,78:$Vz,79:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{72:76,24:77,73:78,71:140,261:$V8}),o($VB,[2,67],{182:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),{29:142,30:143,34:$Vp,97:$Vq},{20:[1,144]},{86:145,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,134:$VH,135:$VI,141:$VJ,144:$VK},{16:[1,163]},{210:[1,166],215:164,216:165},{209:167,210:[1,168]},o($Vr,[2,296]),{16:$V9,24:33,28:169,261:$V8},o($V7,[2,14]),{16:$Vd,19:170,20:[2,15]},o($V7,[2,18]),{20:[2,20],22:59,23:171,24:28,261:$V8},o($Vt,[2,282]),{199:[1,172]},{199:[2,288],249:$VL,270:173},{45:[1,175]},o($VM,[2,287],{269:176,45:$Vc}),{45:[1,177]},o($VN,[2,292]),{272:[1,178]},o($VO,[2,254],{258:179,249:$VP}),o($VQ,[2,241],{75:136,74:181,76:$Vy,78:$Vz,79:$VA}),o($Vt,[2,258]),o($Vt,[2,259]),o($Vt,[2,260]),o($Vt,[2,251]),o($Vt,$VR,{182:$VS}),o($V7,[2,33]),{16:$V9,20:[2,35],24:33,28:32,39:73,40:183,261:$V8},{17:$VT,44:184,97:$VU},o($Vw,[2,70]),o($VV,[2,71],{75:136,74:186,76:$Vy,78:$Vz,79:$VA}),{24:187,77:188,261:$V8},{24:189,77:190,261:$V8},{24:191,77:192,261:$V8},o($Vn,[2,66]),{16:$Ve,24:195,26:130,142:64,143:65,197:$Vf,251:$Vg,255:193,256:194,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{20:[1,196]},{31:197,34:[1,198]},o($V7,[2,80]),{20:[2,84]},{20:[2,85],86:199,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,134:$VH,135:$VI,141:$VJ,144:$VK},o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),{17:[1,200]},{17:[1,201]},{17:[1,202]},{16:$V9,24:33,28:203,129:204,261:$V8,271:$VX},{16:$V9,17:[1,207],24:33,28:209,129:210,136:206,138:208,261:$V8,271:$VX},{142:211,143:212,197:$Vf,271:$Vm},{17:[1,213]},{16:$V9,24:33,28:55,84:214,261:$V8},{17:[1,215]},{20:[1,216]},{17:[1,217]},o($VY,$VZ,{211:218,160:219,225:$V_,226:$V$,227:$V01,228:$V11}),{20:[1,224]},o($VY,$VZ,{160:219,211:225,225:$V_,226:$V$,227:$V01,228:$V11}),o($Vr,[2,297],{273:226,249:$Vs}),{20:[2,16]},{20:[2,21]},o($Vt,[2,283]),{199:[2,289]},{16:$V9,24:121,28:120,251:$Vu,261:$V8,268:227},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:228,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($VM,[2,285]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:229,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($VN,[2,293]),o($VO,[2,255]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:230,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($VQ,[2,242]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:125,183:231,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{20:[2,36]},{17:[2,34]},{16:[1,232]},o($VV,[2,72]),o($V21,[2,73],{182:$VS}),o($V21,[2,74]),o($V21,[2,75],{182:$VS}),o($V21,[2,76]),o($V21,[2,77],{182:$VS}),o($V21,[2,78]),{184:[1,233]},{184:[2,247],249:$V31,257:234},o([184,249],$VR),o($V7,[2,22]),{20:[2,24],32:236,33:237,36:[1,238]},{17:[1,239]},{20:[2,86]},{18:[1,240]},{18:[1,241]},{18:[1,242]},{17:[1,243]},{17:[1,244]},{16:$V9,24:33,28:55,84:245,261:$V8},{17:[1,246]},{18:[1,247]},{17:[2,129],139:248,140:[2,347],210:[1,249]},o($V41,[2,131]),o($V41,[2,132]),{17:[1,250]},{17:[1,251]},{18:[1,252]},{17:[1,253]},o([34,96,98,101,107,134,135,141,144],[2,97]),o($V7,[2,194]),o([20,98,170,230,232,234,235,236,239,240,250,253],$V51,{148:254,151:255,152:$V61}),{16:$V9,24:33,28:257,261:$V8},o($VY,[2,202]),o($VY,[2,203]),o($VY,[2,204]),o($VY,[2,205]),o($VY,[2,206]),o($V7,[2,188]),{16:$V9,24:33,28:260,206:259,212:258,261:$V8},o($Vr,[2,298]),{199:[2,290],249:$VL,270:261},o($VM,[2,284]),o($VM,[2,286]),o($VO,[2,256],{258:262,249:$VP}),{184:[1,263]},{17:[2,106]},o($VB,[2,246]),{184:[2,248]},{16:$Ve,24:195,26:130,142:64,143:65,197:$Vf,251:$Vg,256:264,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{20:[2,23]},{20:[2,25]},{17:[1,265]},{18:[1,266]},{24:269,73:270,99:267,100:268,261:$V8},{16:$V9,24:33,28:275,102:271,103:272,104:273,105:274,261:$V8},{108:276,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($VW,[2,123]),o($VW,[2,124]),{272:[1,282]},o($VW,[2,125]),{16:$V9,24:33,28:209,129:210,136:284,137:283,138:208,261:$V8,271:$VX},{140:[1,285]},{140:[2,348]},o($VW,[2,133]),o($VW,[2,134]),{16:$V9,24:33,28:288,145:286,146:287,261:$V8},o($VW,[2,95]),o($Vb1,[2,198],{217:289,224:290,161:291,233:292,229:293,98:$Vc1,170:$Vd1,230:$Ve1,232:$Vf1,234:$Vg1,235:$Vh1}),o($Vi1,[2,141]),{16:$V9,17:[1,301],24:33,28:275,105:302,153:300,261:$V8},{17:[2,196],223:[1,303]},{20:[2,189]},{17:[1,304],98:[1,305]},o($Vj1,[2,186],{207:[1,306]}),{199:[2,291]},o($VO,[2,257]),o($V21,[2,253]),{184:[2,249],249:$V31,257:307},{18:[1,308]},{16:$V9,24:33,28:310,35:309,261:$V8},{20:[1,311]},{17:[1,312]},{17:[2,244],182:$VC},{17:[2,245]},{20:[1,313]},{17:[1,314]},{17:$VT,44:315,97:$VU},o($Vw,[2,107]),o($VB,[2,108],{106:316,41:317,45:$Va}),{20:[1,318]},{17:[1,319]},{16:$V9,24:33,28:320,261:$V8},{16:$V9,24:33,28:321,261:$V8},{16:$V9,24:33,28:322,261:$V8},{16:$V9,24:33,28:323,261:$V8},o([17,131,133,140,210],[2,294]),{20:[1,324]},{17:[1,325]},{17:[2,130]},{20:[1,326]},{16:$V9,20:[2,136],24:33,28:288,145:327,146:287,261:$V8},{17:[1,328]},o($Vk1,[2,215],{218:329,236:[1,330]}),o($Vb1,[2,199]),{16:$Ve,24:131,26:130,77:129,127:331,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},o($Vn1,[2,213]),o($Vn1,[2,214]),o($Vn1,[2,211]),{164:[1,340]},{231:[1,341]},o($Vn1,[2,208]),o($Vn1,[2,209]),o($Vn1,[2,210]),{17:[1,342]},{18:[1,343]},{17:[2,243]},{17:[2,197]},o($Vo1,[2,192]),{45:[1,344]},{143:345,271:$Vm},{184:[2,250]},{16:$V9,24:33,28:347,37:346,261:$V8},{20:[1,348]},{17:[1,349]},o($VW,[2,98]),{20:[2,99],24:269,73:270,99:350,100:268,261:$V8},o($VW,[2,101]),{16:$V9,20:[2,102],24:33,28:275,102:351,103:272,104:273,105:274,261:$V8},{17:[2,104]},o($Vn,$Vo,{71:75,72:76,24:77,73:78,42:352,261:$V8}),o($VB,[2,109]),o($VW,[2,110]),{20:[2,111],108:353,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($Vp1,[2,327],{111:354,124:355,125:$Vq1,128:$Vr1}),o($Vp1,[2,333],{115:358,124:359,125:$Vq1,128:$Vr1}),o($Vs1,[2,339],{119:360,130:361,131:$Vt1}),o($Vs1,[2,343],{122:363,130:364,131:$Vt1}),o($VW,[2,126]),{16:$V9,20:[2,127],24:33,28:209,129:210,136:284,137:365,138:208,261:$V8,271:$VX},o($VW,[2,135]),{20:[2,137]},{18:[1,366]},o($Vu1,[2,218],{219:367,239:[1,368]}),{164:[1,369]},{17:[1,370]},o($Vv1,[2,301],{288:371,289:372,290:[1,373],291:[1,374]}),o($Vv1,[2,302]),o($Vv1,[2,303]),o($Vw1,[2,304]),o($Vw1,[2,305]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:376,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:375,277:335,278:336,280:$Vm1},{210:$Vx1,245:$Vy1,247:$Vz1,279:$VA1,280:$VB1,282:[1,377],283:$VC1,284:$VD1,285:$VE1,286:$VF1,287:$VG1},{182:[1,388]},o($Vn1,[2,212]),o($Vn1,[2,207]),o($Vi1,[2,142]),{16:$V9,24:33,28:275,105:302,153:390,154:389,261:$V8},{17:[1,391]},o($Vj1,[2,187]),{20:[1,392]},{17:[1,393]},o([20,36],[2,26]),{16:$V9,20:[2,27],24:33,28:310,35:394,261:$V8},{20:[2,100]},{20:[2,103]},o($Vw,$Vx,{74:135,75:136,43:395,76:$Vy,78:$Vz,79:$VA}),{20:[2,112]},o($Vs1,[2,329],{112:396,130:397,131:$Vt1}),o($Vp1,[2,328]),{16:$VH1,24:399,126:398,259:$VI1,261:$V8},{16:$V9,24:33,28:402,129:403,261:$V8,271:$VX},o($Vs1,[2,335],{116:404,130:405,131:$Vt1}),o($Vp1,[2,334]),{17:[2,341],120:406,132:407,133:$VJ1},o($Vs1,[2,340]),{16:$V9,24:33,28:409,261:$V8},{17:[2,345],123:410,132:411,133:$VJ1},o($Vs1,[2,344]),{20:[2,128]},o([158,159],$V51,{151:255,147:412,148:413,152:$V61}),o($VK1,[2,220],{220:414,240:[1,415]}),{16:$Ve,24:131,26:130,77:129,127:416,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{16:$VH1,17:[1,418],24:399,126:419,237:417,259:$VI1,261:$V8},o($Vb1,[2,200]),o($Vv1,[2,323]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:376,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:420,277:335,278:336,280:$Vm1},o($Vn1,[2,325]),o($Vn1,[2,326]),{184:[1,421]},{210:$Vx1,245:$Vy1,247:$Vz1,279:$VA1,280:$VB1,283:$VC1,284:$VD1,285:$VE1,286:$VF1,287:$VG1},{24:422,77:424,261:$V8,264:[1,423]},o($Vw1,[2,307]),{279:[1,425],287:[1,426]},{280:[1,428],281:[1,427]},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:429,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:430,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:431,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:432,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:433,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:434,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:435,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:376,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:436,277:335,278:336,280:$Vm1},{20:[1,437]},{17:[1,438]},{18:[1,439]},{20:[2,29]},{16:$V9,20:[2,30],24:33,28:347,37:440,261:$V8},{20:[2,28]},o($Vw,[2,240]),{17:[2,331],113:441,132:442,133:$VJ1},o($Vs1,[2,330]),o($Vp1,[2,117],{98:[1,443]}),o($VL1,[2,261]),o($VL1,[2,262]),o($VL1,[2,263]),o($Vp1,[2,119]),o($Vp1,[2,120]),{17:[2,337],117:444,132:445,133:$VJ1},o($Vs1,[2,336]),{17:[2,115]},{17:[2,342]},{17:[2,122]},o($Vs1,[2,121]),{17:[2,116]},{17:[2,346]},{20:[1,446]},{149:447,155:448,156:449,157:450,158:$VM1,159:$VN1},o($VO1,[2,234],{221:453,250:[1,454]}),{164:[1,455]},{17:[1,456]},{17:[1,457]},{18:[1,458]},{17:[2,266],249:$VP1,260:459},o($Vv1,[2,324]),o($Vw1,[2,306]),o($Vv1,[2,312],{182:$VS}),o($Vv1,[2,313]),o($Vv1,[2,314]),o($Vw1,[2,308]),{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:461,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($Vw1,[2,309]),{281:[1,462]},o($Vw1,[2,315]),o($Vw1,[2,316]),o($Vw1,[2,317]),o($Vw1,[2,318]),o($Vw1,[2,319]),o($Vw1,[2,320]),o($Vw1,[2,321]),{184:[1,463]},o($Vi1,[2,143]),{16:$V9,20:[2,144],24:33,28:275,105:302,153:390,154:464,261:$V8},{16:$V9,24:33,28:260,206:259,212:466,213:465,261:$V8},{20:[2,31]},{17:[2,113]},{17:[2,332]},{16:$Ve,24:131,26:130,77:129,127:467,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{17:[2,114]},{17:[2,338]},o($Vo1,[2,138]),{20:[2,174],150:468,177:469,179:$VQ1},o($VR1,[2,146],{155:448,156:449,157:450,149:471,158:$VM1,159:$VN1}),o($VS1,[2,148]),{16:$V9,24:33,28:472,261:$V8},o($VY,[2,149]),{160:473,225:$V_,226:$V$,227:$V01,228:$V11},{20:[2,237],222:474,253:[1,475]},{251:[1,476],252:[1,477]},{16:$VH1,17:[1,479],24:399,126:481,241:478,243:480,259:$VI1,261:$V8},o($Vu1,[2,219]),o($Vk1,[2,216]),{16:$VH1,24:399,126:483,238:482,259:$VI1,261:$V8},{17:[2,267]},{16:$VH1,24:399,126:484,259:$VI1,261:$V8},o($Vw1,[2,322]),o($Vw1,[2,310]),o($Vw1,[2,311]),{20:[2,145]},{20:[1,485]},{16:$V9,20:[2,190],24:33,28:260,206:259,212:466,213:486,261:$V8},o($Vp1,[2,118]),{20:[2,139]},{17:[1,487],185:[1,488]},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:489,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($VR1,[2,147]),{45:[1,493],98:$Vc1,161:490,162:491,163:492,164:[1,494],170:$Vd1,229:293,230:$Ve1,232:$Vf1,233:292,234:$Vg1,235:$Vh1},o($VY,[2,150]),{20:[2,195]},{251:[1,495],252:[1,496]},{17:[1,497]},{17:[1,498]},{17:[1,499]},{18:[1,500]},{17:[2,230],248:501,249:$VT1},o($VU1,[2,225],{244:[1,503],245:[1,504],246:[1,505],247:[1,506]}),{20:[1,507]},{17:[1,508]},{17:[2,268],249:$VP1,260:509},o($Vo1,[2,193]),{20:[2,191]},{20:[2,175]},{17:[1,510]},o([17,185],[2,170]),{16:$Ve,24:131,26:130,77:129,127:511,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},o($VS1,[2,152]),{17:[1,512]},{17:[2,153]},{165:[1,513]},{17:[1,514]},{17:[1,515]},o($VO1,[2,235]),o($VO1,[2,236]),o($VK1,[2,221]),{16:$VH1,24:399,126:481,242:516,243:517,259:$VI1,261:$V8},{17:[2,231]},{16:$VH1,24:399,126:481,243:518,259:$VI1,261:$V8},o($VU1,[2,226]),o($VU1,[2,227]),o($VU1,[2,228]),o($VU1,[2,229]),o($Vk1,[2,217]),{16:$VH1,20:[2,264],24:399,126:483,238:519,259:$VI1,261:$V8},{17:[2,269]},{18:[1,520]},o($VS1,[2,151]),{18:[1,521]},{17:[2,154],131:[1,522]},{20:[2,238]},{20:[2,239]},{20:[1,523]},{17:[1,524]},{17:[2,232],248:525,249:$VT1},{20:[2,265]},{170:$VV1,186:526,187:527},{167:529,169:530,170:$VW1},{166:[1,532]},o($VK1,[2,222]),{16:$VH1,20:[2,223],24:399,126:481,242:533,243:517,259:$VI1,261:$V8},{17:[2,233]},{20:[1,534]},{17:[1,535]},{16:$Ve,24:131,26:130,77:129,127:536,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{20:[1,537],168:538,173:539,175:[1,540],176:[1,541]},o($VX1,[2,159],{169:530,167:542,170:$VW1}),{16:$Ve,24:131,26:130,77:129,127:543,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{17:[2,155]},{20:[2,224]},{20:[2,176]},{20:[2,179],170:$VV1,186:544,187:527},{171:[1,545]},o($VS1,[2,156]),{20:[1,546]},{171:[1,547]},{171:[2,164]},{171:[2,165]},o($VX1,[2,160]),{171:[1,548]},{20:[2,180]},{16:$Ve,24:131,26:130,77:129,142:64,143:65,178:550,180:549,181:$VY1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},o($VS1,[2,157]),{16:$Ve,17:[1,554],24:131,26:130,77:129,127:555,142:64,143:65,172:552,174:553,177:556,178:557,179:$VQ1,180:338,181:$VY1,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{16:$Ve,17:[1,559],24:131,26:130,77:129,127:555,142:64,143:65,172:558,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{17:[2,177]},{17:[2,178]},{16:[1,560],24:561,261:$V8},{17:[1,562]},{17:[1,563]},{18:[1,564]},{17:[1,565]},{17:[2,166]},{17:[2,167]},o([20,170,175,176],[2,158]),{18:[1,566]},{17:[2,171]},{17:[2,172],182:[1,567]},{20:[2,161]},{20:[2,162]},{16:$Ve,24:131,26:130,77:129,127:569,142:64,143:65,174:568,177:556,178:557,179:$VQ1,180:338,181:$VY1,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},o($VZ1,[2,168]),{16:$Ve,24:131,26:130,77:129,127:569,142:64,143:65,180:338,182:$Vl1,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm,274:332,275:333,276:334,277:335,278:336,280:$Vm1},{16:$Ve,24:131,26:130,77:129,142:64,143:65,180:125,183:570,197:$Vf,251:$Vg,252:$Vv,254:126,256:127,261:$V8,262:$Vh,263:$Vi,264:$Vj,265:$Vk,266:$Vl,271:$Vm},{17:[1,571]},{17:[1,572]},{184:[1,573]},{20:[1,574]},{20:[1,575]},{17:[2,173]},{20:[2,163]},o($VZ1,[2,169])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],60:[2,19],145:[2,84],170:[2,16],171:[2,21],173:[2,289],183:[2,36],184:[2,34],199:[2,86],232:[2,106],234:[2,248],236:[2,23],237:[2,25],249:[2,348],258:[2,189],261:[2,291],270:[2,245],285:[2,130],302:[2,243],303:[2,197],307:[2,250],315:[2,104],327:[2,137],350:[2,100],351:[2,103],353:[2,112],365:[2,128],392:[2,29],394:[2,28],406:[2,115],407:[2,342],408:[2,122],410:[2,116],411:[2,346],440:[2,31],441:[2,113],442:[2,332],444:[2,114],445:[2,338],459:[2,267],464:[2,145],468:[2,139],474:[2,195],486:[2,191],487:[2,175],493:[2,153],501:[2,231],509:[2,269],514:[2,238],515:[2,239],519:[2,265],525:[2,233],532:[2,155],533:[2,224],534:[2,176],540:[2,164],541:[2,165],544:[2,180],549:[2,177],550:[2,178],556:[2,166],557:[2,167],560:[2,171],562:[2,161],563:[2,162],573:[2,173],574:[2,163]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set(['with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'connectedBy', 'being', 'with', 'as', 'optional']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw'])
    };

    const NEXT_STATE = {
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    const STATE_STOPPER = {        
        'entity.interface.find.when': new Set(['else', 'otherwise'])
    };

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['entity.key', 'entity.data', 'entity.interface.return.when', 'entity.mixes'])
    ];

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when'        
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc, token) {
            if (0) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            //console.log('> enter state:', state, '\n');
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            //console.log('< exit state:', state, '\n');
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    console.log('< exit state:', last, '\n');
                } while (last !== finalStateToExit);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');   
                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 20;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 265;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;

                                if (state.hasIndent && ONE_LINE_KEYWORDS[1].has(state.lastState)) {
                                    state.exitState(state.lastState);
                                }                                  

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 264;
                        
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 262;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 251;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 251;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 259;
                           
break;
case 24:
                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 266;
                           
break;
case 25:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 252;
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 263;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext);                                     

                                switch (state.lastState) {
                                    case 'schema':
                                        if (state.hasIndent && SUB_KEYWORDS['schema'].has(yy_.yytext)) {
                                            state.enterState('schema.' + yy_.yytext);
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'type': 
                                        state.enterState('type.name');
                                        return 261;

                                    case 'type.name':
                                        state.enterState('type.info');

                                        if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity':
                                        if (state.hasIndent && SUB_KEYWORDS['entity'].has(yy_.yytext)) {
                                            state.enterState('entity.' + yy_.yytext);                                                                        
                                            return yy_.yytext;
                                        } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                            return yy_.yytext;
                                        } 
                                        break;

                                    default:
                                        if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                            if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                                state.exitState(state.lastState);                                                                        
                                            }

                                            let keywordChain = state.lastState + '.' + yy_.yytext;
                                            let nextState = NEXT_STATE[keywordChain];
                                            if (nextState) {
                                                state.enterState(nextState);                                                                        
                                            }
                                            return yy_.yytext;
                                        }
                                        break;                                    
                                }                                         

                                return 261;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}