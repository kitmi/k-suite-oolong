"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const _ = Util._;
const FEATURE_NAME = 'logicalDeletion';

function feature(entity, args = []) {
  let newField = true,
      fieldInfo = {
    name: 'isDeleted',
    type: 'boolean',
    'default': false,
    readOnly: true
  },
      fieldName,
      featureSetting;
  let [options] = args;

  if (options) {
    if (_.isPlainObject(options)) {
      newField = false;
      let keys = Object.keys(options);

      if (keys.length !== 1) {
        throw new Error(`Invalid options for feature "${FEATURE_NAME}".`);
      }

      let fieldName = keys[0];
      featureSetting = {
        field: fieldName,
        value: options[fieldName]
      };
    } else if (typeof options === 'string') {
      Object.assign(fieldInfo, {
        name: options
      });
    } else {
      throw new Error(`Invalid options for feature "${FEATURE_NAME}".`);
    }
  }

  if (newField) {
    fieldName = fieldInfo.name;
    entity.addFeature(FEATURE_NAME, {
      field: fieldName,
      value: true
    });
    entity.on('afterAddingFields', () => {
      entity.addField(fieldName, fieldInfo);
    });
  } else {
    entity.addFeature(FEATURE_NAME, featureSetting);
    entity.on('afterAddingFields', () => {
      if (!entity.hasField(featureSetting.field)) {
        throw new Error(`Field "${featureSetting.field}" used by feature "${FEATURE_NAME}" is not found in entity "${entity.name}".`);
      }
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2xvZ2ljYWxEZWxldGlvbi5qcyJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsIl8iLCJGRUFUVVJFX05BTUUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsIm5ld0ZpZWxkIiwiZmllbGRJbmZvIiwibmFtZSIsInR5cGUiLCJyZWFkT25seSIsImZpZWxkTmFtZSIsImZlYXR1cmVTZXR0aW5nIiwib3B0aW9ucyIsImlzUGxhaW5PYmplY3QiLCJrZXlzIiwiT2JqZWN0IiwibGVuZ3RoIiwiRXJyb3IiLCJmaWVsZCIsInZhbHVlIiwiYXNzaWduIiwiYWRkRmVhdHVyZSIsIm9uIiwiYWRkRmllbGQiLCJoYXNGaWVsZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxDQUFDLEdBQUdGLElBQUksQ0FBQ0UsQ0FBZjtBQUVBLE1BQU1DLFlBQVksR0FBRyxpQkFBckI7O0FBWUEsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQUksR0FBRyxFQUFoQyxFQUFvQztBQUNoQyxNQUFJQyxRQUFRLEdBQUcsSUFBZjtBQUFBLE1BQXFCQyxTQUFTLEdBQUc7QUFDN0JDLElBQUFBLElBQUksRUFBRSxXQUR1QjtBQUU3QkMsSUFBQUEsSUFBSSxFQUFFLFNBRnVCO0FBRzdCLGVBQVcsS0FIa0I7QUFJN0JDLElBQUFBLFFBQVEsRUFBRTtBQUptQixHQUFqQztBQUFBLE1BS0dDLFNBTEg7QUFBQSxNQUtjQyxjQUxkO0FBT0EsTUFBSSxDQUFFQyxPQUFGLElBQWNSLElBQWxCOztBQUVBLE1BQUlRLE9BQUosRUFBYTtBQUNULFFBQUlaLENBQUMsQ0FBQ2EsYUFBRixDQUFnQkQsT0FBaEIsQ0FBSixFQUE4QjtBQUMxQlAsTUFBQUEsUUFBUSxHQUFHLEtBQVg7QUFFQSxVQUFJUyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRixPQUFaLENBQVg7O0FBQ0EsVUFBSUUsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CLGNBQU0sSUFBSUMsS0FBSixDQUFXLGdDQUErQmhCLFlBQWEsSUFBdkQsQ0FBTjtBQUNIOztBQUVELFVBQUlTLFNBQVMsR0FBR0ksSUFBSSxDQUFDLENBQUQsQ0FBcEI7QUFFQUgsTUFBQUEsY0FBYyxHQUFHO0FBQ2JPLFFBQUFBLEtBQUssRUFBRVIsU0FETTtBQUViUyxRQUFBQSxLQUFLLEVBQUVQLE9BQU8sQ0FBQ0YsU0FBRDtBQUZELE9BQWpCO0FBS0gsS0FmRCxNQWVPLElBQUksT0FBT0UsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUNwQ0csTUFBQUEsTUFBTSxDQUFDSyxNQUFQLENBQWNkLFNBQWQsRUFBeUI7QUFBRUMsUUFBQUEsSUFBSSxFQUFFSztBQUFSLE9BQXpCO0FBQ0gsS0FGTSxNQUVBO0FBQ0gsWUFBTSxJQUFJSyxLQUFKLENBQVcsZ0NBQStCaEIsWUFBYSxJQUF2RCxDQUFOO0FBQ0g7QUFDSjs7QUFFRCxNQUFJSSxRQUFKLEVBQWM7QUFDVkssSUFBQUEsU0FBUyxHQUFHSixTQUFTLENBQUNDLElBQXRCO0FBRUFKLElBQUFBLE1BQU0sQ0FBQ2tCLFVBQVAsQ0FBa0JwQixZQUFsQixFQUFnQztBQUM1QmlCLE1BQUFBLEtBQUssRUFBRVIsU0FEcUI7QUFFNUJTLE1BQUFBLEtBQUssRUFBRTtBQUZxQixLQUFoQztBQUtBaEIsSUFBQUEsTUFBTSxDQUFDbUIsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakNuQixNQUFBQSxNQUFNLENBQUNvQixRQUFQLENBQWdCYixTQUFoQixFQUEyQkosU0FBM0I7QUFDSCxLQUZEO0FBR0gsR0FYRCxNQVdPO0FBQ0hILElBQUFBLE1BQU0sQ0FBQ2tCLFVBQVAsQ0FBa0JwQixZQUFsQixFQUFnQ1UsY0FBaEM7QUFFQVIsSUFBQUEsTUFBTSxDQUFDbUIsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakMsVUFBSSxDQUFDbkIsTUFBTSxDQUFDcUIsUUFBUCxDQUFnQmIsY0FBYyxDQUFDTyxLQUEvQixDQUFMLEVBQTRDO0FBQ3hDLGNBQU0sSUFBSUQsS0FBSixDQUFXLFVBQVNOLGNBQWMsQ0FBQ08sS0FBTSxzQkFBcUJqQixZQUFhLDZCQUE0QkUsTUFBTSxDQUFDSSxJQUFLLElBQW5ILENBQU47QUFDSDtBQUNKLEtBSkQ7QUFLSDtBQUNKOztBQUVEa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuXG5jb25zdCBGRUFUVVJFX05BTUUgPSAnbG9naWNhbERlbGV0aW9uJztcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBlbnRpdHkgd2lsbCBub3QgYmUgZGVsZXRlZCBwaHlzaWNhbGx5LlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX0xvZ2ljYWxEZWxldGlvblxuICovXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZmVhdHVyZVxuICogQHBhcmFtIHtPb2xvbmdFbnRpdHl9IGVudGl0eSAtIEVudGl0eSB0byBhcHBseSB0aGlzIGZlYXR1cmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gRmllbGQgb3B0aW9ucywgY2FuIGJlIGEgc3RyaW5nIGFzIGEgbmV3IHN0YXR1cyBmaWVsZCBvciBhbiBvYmplY3QgcmVmZXJlbmNlIHRvIGEgY2VydGFpbiBzdGF0dXMgb2YgYW4gZXhpc3RpbmcgZmllbGRcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MgPSBbXSkge1xuICAgIGxldCBuZXdGaWVsZCA9IHRydWUsIGZpZWxkSW5mbyA9IHtcbiAgICAgICAgbmFtZTogJ2lzRGVsZXRlZCcsXG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgJ2RlZmF1bHQnOiBmYWxzZSxcbiAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICB9LCBmaWVsZE5hbWUsIGZlYXR1cmVTZXR0aW5nO1xuXG4gICAgbGV0IFsgb3B0aW9ucyBdID0gYXJncztcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgICAgIG5ld0ZpZWxkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3B0aW9ucyBmb3IgZmVhdHVyZSBcIiR7RkVBVFVSRV9OQU1FfVwiLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmllbGROYW1lID0ga2V5c1swXTtcblxuICAgICAgICAgICAgZmVhdHVyZVNldHRpbmcgPSB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9uc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkSW5mbywgeyBuYW1lOiBvcHRpb25zIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG9wdGlvbnMgZm9yIGZlYXR1cmUgXCIke0ZFQVRVUkVfTkFNRX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdGaWVsZCkge1xuICAgICAgICBmaWVsZE5hbWUgPSBmaWVsZEluZm8ubmFtZTtcblxuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBlbnRpdHkub24oJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgZW50aXR5LmFkZEZpZWxkKGZpZWxkTmFtZSwgZmllbGRJbmZvKVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIGZlYXR1cmVTZXR0aW5nKTtcblxuICAgICAgICBlbnRpdHkub24oJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbnRpdHkuaGFzRmllbGQoZmVhdHVyZVNldHRpbmcuZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCBcIiR7ZmVhdHVyZVNldHRpbmcuZmllbGR9XCIgdXNlZCBieSBmZWF0dXJlIFwiJHtGRUFUVVJFX05BTUV9XCIgaXMgbm90IGZvdW5kIGluIGVudGl0eSBcIiR7ZW50aXR5Lm5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==