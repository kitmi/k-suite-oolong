"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'autoId';

function feature(entity, args = []) {
  let typeInfo = {
    name: 'id',
    type: 'integer',
    auto: true,
    writeOnce: true
  };
  let [options] = args;

  if (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }
  }

  let fieldName = typeInfo.name;
  entity.addFeature(FEATURE_NAME, {
    field: fieldName,
    ...(options && options.startFrom ? {
      startFrom: options.startFrom
    } : {})
  }).on('beforeAddingFields', () => {
    entity.addField(fieldName, typeInfo).setKey(fieldName);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2F1dG9JZC5qcyJdLCJuYW1lcyI6WyJGRUFUVVJFX05BTUUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsInR5cGVJbmZvIiwibmFtZSIsInR5cGUiLCJhdXRvIiwid3JpdGVPbmNlIiwib3B0aW9ucyIsImZpZWxkTmFtZSIsImFkZEZlYXR1cmUiLCJmaWVsZCIsInN0YXJ0RnJvbSIsIm9uIiwiYWRkRmllbGQiLCJzZXRLZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBRyxRQUFyQjs7QUFjQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBSSxHQUFHLEVBQWhDLEVBQW9DO0FBQ2hDLE1BQUlDLFFBQVEsR0FBRztBQUNYQyxJQUFBQSxJQUFJLEVBQUUsSUFESztBQUVYQyxJQUFBQSxJQUFJLEVBQUUsU0FGSztBQUdYQyxJQUFBQSxJQUFJLEVBQUUsSUFISztBQUlYQyxJQUFBQSxTQUFTLEVBQUU7QUFKQSxHQUFmO0FBT0EsTUFBSSxDQUFFQyxPQUFGLElBQWNOLElBQWxCOztBQUVBLE1BQUlNLE9BQUosRUFBYTtBQUNULFFBQUksT0FBT0EsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUM3QkEsTUFBQUEsT0FBTyxHQUFHO0FBQUVKLFFBQUFBLElBQUksRUFBRUk7QUFBUixPQUFWO0FBQ0g7QUFHSjs7QUFFRCxNQUFJQyxTQUFTLEdBQUdOLFFBQVEsQ0FBQ0MsSUFBekI7QUFFQUgsRUFBQUEsTUFBTSxDQUFDUyxVQUFQLENBQWtCWCxZQUFsQixFQUFnQztBQUM1QlksSUFBQUEsS0FBSyxFQUFFRixTQURxQjtBQUU1QixRQUFJRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0ksU0FBbkIsR0FBK0I7QUFBRUEsTUFBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNJO0FBQXJCLEtBQS9CLEdBQWtFLEVBQXRFO0FBRjRCLEdBQWhDLEVBR0dDLEVBSEgsQ0FHTSxvQkFITixFQUc0QixNQUFNO0FBQzlCWixJQUFBQSxNQUFNLENBQUNhLFFBQVAsQ0FBZ0JMLFNBQWhCLEVBQTJCTixRQUEzQixFQUNLWSxNQURMLENBQ1lOLFNBRFo7QUFFSCxHQU5EO0FBT0g7O0FBRURPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICdhdXRvSWQnO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGlkIG9mIGVudGl0eSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZV9BdXRvSWRcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge2FycmF5fSBvcHRpb25zIC0gQXV0byBpZCBmaWVsZCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMubmFtZT0naWQnXSAtIEZpZWxkIG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy50eXBlPSdpbnRlZ2VyJ10gLSBGaWVsZCB0eXBlXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZW50aXR5LCBhcmdzID0gW10pIHtcbiAgICBsZXQgdHlwZUluZm8gPSB7XG4gICAgICAgIG5hbWU6ICdpZCcsXG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgYXV0bzogdHJ1ZSwgICAgICAgIFxuICAgICAgICB3cml0ZU9uY2U6IHRydWVcbiAgICB9O1xuXG4gICAgbGV0IFsgb3B0aW9ucyBdID0gYXJncztcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IG5hbWU6IG9wdGlvbnMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgIH1cblxuICAgIGxldCBmaWVsZE5hbWUgPSB0eXBlSW5mby5uYW1lO1xuXG4gICAgZW50aXR5LmFkZEZlYXR1cmUoRkVBVFVSRV9OQU1FLCB7XG4gICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuc3RhcnRGcm9tID8geyBzdGFydEZyb206IG9wdGlvbnMuc3RhcnRGcm9tIH0gOiB7fSkgICAgICAgIFxuICAgIH0pLm9uKCdiZWZvcmVBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgIGVudGl0eS5hZGRGaWVsZChmaWVsZE5hbWUsIHR5cGVJbmZvKVxuICAgICAgICAgICAgLnNldEtleShmaWVsZE5hbWUpO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZlYXR1cmU7Il19