"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const FEATURE_NAME = 'autoId';

function feature(entity, args = []) {
  let typeInfo = {
    name: 'id',
    type: 'integer',
    auto: true,
    writeOnce: true
  };
  let [options] = args;
  let featureExtra = {};

  if (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    if (options.type) {
      switch (options.type) {
        case 'integer':
          if (options.startFrom) {
            featureExtra.startFrom = options.startFrom;
          }

          break;

        case 'uuid':
          typeInfo['type'] = 'text';
          typeInfo['fixedLength'] = 36;
          typeInfo['generator'] = 'uuid';
          break;

        case 'uniqid':
          typeInfo['type'] = 'text';

          if (options.prefix) {
            if (typeof options.prefix !== 'string') {
              throw new Error(`"prefix" option should be a string. Entity: ${entity.name}, feature: autoId`);
            }

            typeInfo['fixedLength'] = 17 + options.prefix.length;
            typeInfo['generator'] = ['uniqid', options.prefix];
          } else {
            typeInfo['fixedLength'] = 17;
            typeInfo['generator'] = 'uniqid';
          }

          break;

        case 'hyperid':
          typeInfo['type'] = 'text';
          typeInfo['fixedLength'] = 33;
          let args = ['hyperid'];
          let opt = {};

          if (options.fixedLength) {
            opt.fixedLength = options.fixedLength;
          }

          if (options.urlSafe) {
            opt.urlSafe = options.urlSafe;
          }

          if (!_.isEmpty(opt)) {
            args.push(opt);
          }

          typeInfo['generator'] = args.length > 1 ? args : args[0];
          break;

        default:
          throw new Error(`Unsupported autoId type: ${options.type}. Entity: ${entity.name}`);
      }
    }
  }

  let fieldName = typeInfo.name;
  entity.addFeature(FEATURE_NAME, {
    field: fieldName,
    ...featureExtra
  }).on('beforeAddingFields', () => {
    entity.addField(fieldName, typeInfo).setKey(fieldName);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2F1dG9JZC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkZFQVRVUkVfTkFNRSIsImZlYXR1cmUiLCJlbnRpdHkiLCJhcmdzIiwidHlwZUluZm8iLCJuYW1lIiwidHlwZSIsImF1dG8iLCJ3cml0ZU9uY2UiLCJvcHRpb25zIiwiZmVhdHVyZUV4dHJhIiwic3RhcnRGcm9tIiwicHJlZml4IiwiRXJyb3IiLCJsZW5ndGgiLCJvcHQiLCJmaXhlZExlbmd0aCIsInVybFNhZmUiLCJpc0VtcHR5IiwicHVzaCIsImZpZWxkTmFtZSIsImFkZEZlYXR1cmUiLCJmaWVsZCIsIm9uIiwiYWRkRmllbGQiLCJzZXRLZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsUUFBckI7O0FBY0EsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQUksR0FBRyxFQUFoQyxFQUFvQztBQUNoQyxNQUFJQyxRQUFRLEdBQUc7QUFDWEMsSUFBQUEsSUFBSSxFQUFFLElBREs7QUFFWEMsSUFBQUEsSUFBSSxFQUFFLFNBRks7QUFHWEMsSUFBQUEsSUFBSSxFQUFFLElBSEs7QUFJWEMsSUFBQUEsU0FBUyxFQUFFO0FBSkEsR0FBZjtBQU9BLE1BQUksQ0FBRUMsT0FBRixJQUFjTixJQUFsQjtBQUVBLE1BQUlPLFlBQVksR0FBRyxFQUFuQjs7QUFFQSxNQUFJRCxPQUFKLEVBQWE7QUFDVCxRQUFJLE9BQU9BLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDN0JBLE1BQUFBLE9BQU8sR0FBRztBQUFFSixRQUFBQSxJQUFJLEVBQUVJO0FBQVIsT0FBVjtBQUNIOztBQUVELFFBQUlBLE9BQU8sQ0FBQ0gsSUFBWixFQUFrQjtBQUNkLGNBQVFHLE9BQU8sQ0FBQ0gs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bHMnKTtcblxuY29uc3QgRkVBVFVSRV9OQU1FID0gJ2F1dG9JZCc7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgaWQgb2YgZW50aXR5IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX0F1dG9JZFxuICovXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZmVhdHVyZVxuICogQHBhcmFtIHtPb2xvbmdFbnRpdHl9IGVudGl0eSAtIEVudGl0eSB0byBhcHBseSB0aGlzIGZlYXR1cmVcbiAqIEBwYXJhbSB7YXJyYXl9IG9wdGlvbnMgLSBBdXRvIGlkIGZpZWxkIG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5uYW1lPSdpZCddIC0gRmllbGQgbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLnR5cGU9J2ludGVnZXInXSAtIEZpZWxkIHR5cGVcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MgPSBbXSkge1xuICAgIGxldCB0eXBlSW5mbyA9IHtcbiAgICAgICAgbmFtZTogJ2lkJyxcbiAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICBhdXRvOiB0cnVlLCAgICAgICAgXG4gICAgICAgIHdyaXRlT25jZTogdHJ1ZVxuICAgIH07XG5cbiAgICBsZXQgWyBvcHRpb25zIF0gPSBhcmdzO1xuXG4gICAgbGV0IGZlYXR1cmVFeHRyYSA9IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHsgbmFtZTogb3B0aW9ucyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnRGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlRXh0cmEuc3RhcnRGcm9tID0gb3B0aW9ucy5zdGFydEZyb207XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3V1aWQnOlxuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1sndHlwZSddID0gJ3RleHQnO1xuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZml4ZWRMZW5ndGgnXSA9IDM2O1xuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZ2VuZXJhdG9yJ10gPSAndXVpZCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd1bmlxaWQnOlxuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1sndHlwZSddID0gJ3RleHQnOyAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJlZml4ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJwcmVmaXhcIiBvcHRpb24gc2hvdWxkIGJlIGEgc3RyaW5nLiBFbnRpdHk6ICR7ZW50aXR5Lm5hbWV9LCBmZWF0dXJlOiBhdXRvSWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWydmaXhlZExlbmd0aCddID0gMTcgKyBvcHRpb25zLnByZWZpeC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZ2VuZXJhdG9yJ10gPSBbICd1bmlxaWQnLCBvcHRpb25zLnByZWZpeCBdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ2ZpeGVkTGVuZ3RoJ10gPSAxNztcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWydnZW5lcmF0b3InXSA9ICd1bmlxaWQnO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2h5cGVyaWQnOlxuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1sndHlwZSddID0gJ3RleHQnOyAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWydmaXhlZExlbmd0aCddID0gMzM7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSBbICdoeXBlcmlkJyBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0ID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5maXhlZExlbmd0aCA9IG9wdGlvbnMuZml4ZWRMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy51cmxTYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQudXJsU2FmZSA9IG9wdGlvbnMudXJsU2FmZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KG9wdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChvcHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ2dlbmVyYXRvciddID0gYXJncy5sZW5ndGggPiAxID8gYXJncyA6IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGF1dG9JZCB0eXBlOiAke29wdGlvbnMudHlwZX0uIEVudGl0eTogJHtlbnRpdHkubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICAgICAgXG4gICAgfVxuXG4gICAgbGV0IGZpZWxkTmFtZSA9IHR5cGVJbmZvLm5hbWU7XG5cbiAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgZmllbGQ6IGZpZWxkTmFtZSxcbiAgICAgICAgLi4uZmVhdHVyZUV4dHJhICAgICAgICBcbiAgICB9KS5vbignYmVmb3JlQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICBlbnRpdHkuYWRkRmllbGQoZmllbGROYW1lLCB0eXBlSW5mbylcbiAgICAgICAgICAgIC5zZXRLZXkoZmllbGROYW1lKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==