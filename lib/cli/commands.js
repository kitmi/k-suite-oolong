"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  fs
} = Util;

const {
  extractDriverAndConnectorName
} = require('../utils/lang');

exports.commands = {
  'build': 'Generate database scripts and entity models.',
  'migrate': 'Create database structure.',
  'dataset': 'List available data set.',
  'import': 'Import data set.',
  'reverse': 'Reverse engineering from a databse.',
  'listValidators': 'List all builtin validators.'
};

exports.options = core => {
  let cmdOptions = {};
  cmdOptions['c'] = {
    desc: "Oolong config file",
    alias: ["conf", "config"],
    inquire: true,
    promptMessage: 'Please input the config file path:',
    promptDefault: "conf/oolong.json",
    onReady: async () => core.startContainer()
  };

  switch (core.command) {
    case 'build':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        isBool: true
      };
      break;

    case 'dataset':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        promptMessage: 'Please select the target dataset:',
        alias: ['ds', 'data'],
        inquire: true,
        promptType: 'list',
        choicesProvider: () => core.getDataset_()
      };
      break;

    case 'reverse':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'listValidators':
      break;

    default:
      break;
  }

  return cmdOptions;
};

exports.main = core => {
  if (core.option('v')) {
    console.log('v' + core.app.version);
  } else {
    core.showUsage();
  }
};

exports.build = async core => {
  core.app.log('verbose', 'oolong build');
  let oolongConfig = core.oolongConfig;
  let dslSourceDir = Util.getValueByPath(oolongConfig, 'oolong.dslSourceDir');

  if (!dslSourceDir) {
    throw new Error('"oolong.dslSourceDir" not found in oolong config.');
  }

  let modelOutputDir = Util.getValueByPath(oolongConfig, 'oolong.modelOutputDir');

  if (!modelOutputDir) {
    throw new Error('"oolong.modelOutputDir" not found in oolong config.');
  }

  let scriptOutputDir = Util.getValueByPath(oolongConfig, 'oolong.scriptOutputDir');

  if (!scriptOutputDir) {
    throw new Error('"oolong.scriptOutputDir" not found in oolong config.');
  }

  let manifestOutputDir = Util.getValueByPath(oolongConfig, 'oolong.manifestOutputDir');
  let dslSourcePath = core.app.toAbsolutePath(dslSourceDir);
  let modelOutputPath = core.app.toAbsolutePath(modelOutputDir);
  let scriptOutputPath = core.app.toAbsolutePath(scriptOutputDir);
  let manifestOutputPath = manifestOutputDir && core.app.toAbsolutePath(manifestOutputDir);

  if (!fs.existsSync(dslSourcePath)) {
    return Promise.reject(`DSL source directory "${dslSourcePath}" not found.`);
  }

  let useJsonSource = Util.getValueByPath(oolongConfig, 'oolong.useJsonSource', false);
  let saveIntermediate = Util.getValueByPath(oolongConfig, 'oolong.saveIntermediate', false);
  return core.api.build_({
    logger: core.app.logger,
    dslSourcePath,
    modelOutputPath,
    scriptOutputPath,
    manifestOutputPath,
    useJsonSource,
    saveIntermediate,
    schemaDeployment: core.schemaDeployment
  });
};

exports.migrate = async core => {
  core.app.log('verbose', 'oolong migrate');
  let oolongConfig = core.oolongConfig;
  let modelDir = Util.getValueByPath(oolongConfig, 'oolong.modelDir');

  if (!modelDir) {
    throw new Error('"oolong.modelDir" not found in oolong config.');
  }

  let dslSourceDir = Util.getValueByPath(oolongConfig, 'oolong.dslSourceDir');

  if (!dslSourceDir) {
    throw new Error('"oolong.dslSourceDir" not found in oolong config.');
  }

  let scriptSourceDir = Util.getValueByPath(oolongConfig, 'oolong.scriptSourceDir');

  if (!scriptSourceDir) {
    throw new Error('"oolong.scriptSourceDir" not found in oolong config.');
  }

  let modelPath = core.app.toAbsolutePath(modelDir);
  let dslSourcePath = core.app.toAbsolutePath(dslSourceDir);
  let scriptSourcePath = core.app.toAbsolutePath(scriptSourceDir);

  if (!fs.existsSync(modelPath)) {
    return Promise.reject(`Model directory "${modelPath}" not found.`);
  }

  if (!fs.existsSync(dslSourcePath)) {
    return Promise.reject(`DSL source directory "${dslSourcePath}" not found.`);
  }

  if (!fs.existsSync(scriptSourcePath)) {
    return Promise.reject(`Database scripts directory "${scriptSourcePath}" not found.`);
  }

  let useJsonSource = Util.getValueByPath(oolongConfig, 'oolong.useJsonSource', false);
  return core.api.migrate_({
    appModule: core.container,
    logger: core.app.logger,
    modelPath,
    dslSourcePath,
    scriptSourcePath,
    useJsonSource,
    schemaDeployment: core.schemaDeployment
  }, core.option('reset'));
};

exports.dataset = async core => {
  core.app.log('verbose', 'oolong dataset');
  let dataset = await core.getDataset_();
  core.app.log('info', 'Available dataset: \n' + dataset.join('\n') + '\n');
};

exports.import = async core => {
  core.app.log('verbose', 'oolong import');
  let oolongConfig = core.oolongConfig;
  let modelDir = Util.getValueByPath(oolongConfig, 'oolong.modelDir');

  if (!modelDir) {
    throw new Error('"oolong.modelDir" not found in oolong config.');
  }

  let scriptSourceDir = Util.getValueByPath(oolongConfig, 'oolong.scriptSourceDir');

  if (!scriptSourceDir) {
    throw new Error('"oolong.scriptSourceDir" not found in oolong config.');
  }

  let modelPath = core.app.toAbsolutePath(modelDir);
  let scriptSourcePath = core.app.toAbsolutePath(scriptSourceDir);
  let schema = core.option('schema');
  let dataset = core.option('dataset');
  return core.api.import_({
    logger: core.app.logger,
    modelPath,
    scriptSourcePath,
    schemaDeployment: core.schemaDeployment
  }, schema, dataset);
};

exports.reverse = async core => {
  core.app.log('verbose', 'oolong reverse');
  let oolongConfig = core.oolongConfig;
  let dslReverseOutputDir = Util.getValueByPath(oolongConfig, 'oolong.dslReverseOutputDir');

  if (!dslReverseOutputDir) {
    throw new Error('"oolong.dslOutputDir" not found in oolong config.');
  }

  let outputDir = core.getReverseOutputDir(core.app.toAbsolutePath(dslReverseOutputDir));
  let conn = core.option('conn');
  let [driver] = extractDriverAndConnectorName(conn);
  let connOptions = Util.getValueByPath(oolongConfig, 'dataSource.' + conn);

  if (!connOptions) {
    throw new Error("Assertion failed: connOptions");
  }

  if (typeof connOptions.reverseRules === 'string') {
    connOptions.reverseRules = require(core.app.toAbsolutePath(connOptions.reverseRules));
  }

  if (!(!connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules))) {
    throw new Error("Assertion failed: !connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules)");
  }

  return core.api.reverse_({
    logger: core.app.logger,
    dslReverseOutputPath: outputDir,
    driver,
    connOptions
  });
};

exports.listValidators = async core => {
  core.app.log('verbose', 'oolong listValidators');
  let list = core.api.getValidatorList();
  core.app.log('info', 'Available validators: \n' + list.join('\n') + '\n');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZnMiLCJleHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZSIsImV4cG9ydHMiLCJjb21tYW5kcyIsIm9wdGlvbnMiLCJjb3JlIiwiY21kT3B0aW9ucyIsImRlc2MiLCJhbGlhcyIsImlucXVpcmUiLCJwcm9tcHRNZXNzYWdlIiwicHJvbXB0RGVmYXVsdCIsIm9uUmVhZHkiLCJzdGFydENvbnRhaW5lciIsImNvbW1hbmQiLCJyZXF1aXJlZCIsImlzQm9vbCIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJnZXRTY2hlbWFzSW5Db25maWciLCJnZXREYXRhc2V0XyIsIk9iamVjdCIsImtleXMiLCJjb25uZWN0aW9uU3RyaW5ncyIsImFmdGVySW5xdWlyZSIsImNvbnNvbGUiLCJsb2ciLCJvcHRpb24iLCJtYWluIiwiYXBwIiwidmVyc2lvbiIsInNob3dVc2FnZSIsImJ1aWxkIiwib29sb25nQ29uZmlnIiwiZHNsU291cmNlRGlyIiwiZ2V0VmFsdWVCeVBhdGgiLCJFcnJvciIsIm1vZGVsT3V0cHV0RGlyIiwic2NyaXB0T3V0cHV0RGlyIiwibWFuaWZlc3RPdXRwdXREaXIiLCJkc2xTb3VyY2VQYXRoIiwidG9BYnNvbHV0ZVBhdGgiLCJtb2RlbE91dHB1dFBhdGgiLCJzY3JpcHRPdXRwdXRQYXRoIiwibWFuaWZlc3RPdXRwdXRQYXRoIiwiZXhpc3RzU3luYyIsIlByb21pc2UiLCJyZWplY3QiLCJ1c2VKc29uU291cmNlIiwic2F2ZUludGVybWVkaWF0ZSIsImFwaSIsImJ1aWxkXyIsImxvZ2dlciIsInNjaGVtYURlcGxveW1lbnQiLCJtaWdyYXRlIiwibW9kZWxEaXIiLCJzY3JpcHRTb3VyY2VEaXIiLCJtb2RlbFBhdGgiLCJzY3JpcHRTb3VyY2VQYXRoIiwibWlncmF0ZV8iLCJhcHBNb2R1bGUiLCJjb250YWluZXIiLCJkYXRhc2V0Iiwiam9pbiIsImltcG9ydCIsInNjaGVtYSIsImltcG9ydF8iLCJyZXZlcnNlIiwiZHNsUmV2ZXJzZU91dHB1dERpciIsIm91dHB1dERpciIsImdldFJldmVyc2VPdXRwdXREaXIiLCJjb25uIiwiZHJpdmVyIiwiY29ubk9wdGlvbnMiLCJyZXZlcnNlUnVsZXMiLCJpc1BsYWluT2JqZWN0IiwicmV2ZXJzZV8iLCJkc2xSZXZlcnNlT3V0cHV0UGF0aCIsImxpc3RWYWxpZGF0b3JzIiwibGlzdCIsImdldFZhbGlkYXRvckxpc3QiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFZSCxJQUFsQjs7QUFDQSxNQUFNO0FBQUVJLEVBQUFBO0FBQUYsSUFBb0NILE9BQU8sQ0FBQyxlQUFELENBQWpEOztBQUVBSSxPQUFPLENBQUNDLFFBQVIsR0FBbUI7QUFDZixXQUFTLDhDQURNO0FBRWYsYUFBVyw0QkFGSTtBQUdmLGFBQVcsMEJBSEk7QUFJZixZQUFVLGtCQUpLO0FBS2YsYUFBVyxxQ0FMSTtBQU1mLG9CQUFrQjtBQU5ILENBQW5COztBQVlBRCxPQUFPLENBQUNFLE9BQVIsR0FBbUJDLElBQUQsSUFBVTtBQUN4QixNQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFFQUEsRUFBQUEsVUFBVSxDQUFDLEdBQUQsQ0FBVixHQUFrQjtBQUNkQyxJQUFBQSxJQUFJLEVBQUUsb0JBRFE7QUFFZEMsSUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixFQUFVLFFBQVYsQ0FGTztBQUdkQyxJQUFBQSxPQUFPLEVBQUUsSUFISztBQUlkQyxJQUFBQSxhQUFhLEVBQUUsb0NBSkQ7QUFLZEMsSUFBQUEsYUFBYSxFQUFFLGtCQUxEO0FBTWRDLElBQUFBLE9BQU8sRUFBRSxZQUFZUCxJQUFJLENBQUNRLGNBQUw7QUFOUCxHQUFsQjs7QUFTQSxVQUFRUixJQUFJLENBQUNTLE9BQWI7QUFDSSxTQUFL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QUFsQixDQUFQO0FBTUgsQ0E5QkQ7O0FBZ0NBdkUsT0FBTyxDQUFDNEUsY0FBUixHQUF5QixNQUFPekUsSUFBUCxJQUFnQjtBQUNyQ0EsRUFBQUEsSUFBSSxDQUFDd0IsR0FBTCxDQUFTSCxHQUFULENBQWEsU0FBYixFQUF3Qix1QkFBeEI7QUFFQSxNQUFJcUQsSUFBSSxHQUFHMUUsSUFBSSxDQUFDNkMsR0FBTCxDQUFTOEIsZ0JBQVQsRUFBWDtBQUVBM0UsRUFBQUEsSUFBSSxDQUFDd0IsR0FBTCxDQUFTSCxHQUFULENBQWEsTUFBYixFQUFxQiw2QkFBNkJxRCxJQUFJLENBQUNoQixJQUFMLENBQVUsSUFBVixDQUE3QixHQUErQyxJQUFwRTtBQUNILENBTkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IF8sIGZzIH0gPSBVdGlsO1xuY29uc3QgeyBleHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbGFuZycpO1xuXG5leHBvcnRzLmNvbW1hbmRzID0geyAgICBcbiAgICAnYnVpbGQnOiAnR2VuZXJhdGUgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscy4nLFxuICAgICdtaWdyYXRlJzogJ0NyZWF0ZSBkYXRhYmFzZSBzdHJ1Y3R1cmUuJywgICAgXG4gICAgJ2RhdGFzZXQnOiAnTGlzdCBhdmFpbGFibGUgZGF0YSBzZXQuJyxcbiAgICAnaW1wb3J0JzogJ0ltcG9ydCBkYXRhIHNldC4nLFxuICAgICdyZXZlcnNlJzogJ1JldmVyc2UgZW5naW5lZXJpbmcgZnJvbSBhIGRhdGFic2UuJyxcbiAgICAnbGlzdFZhbGlkYXRvcnMnOiAnTGlzdCBhbGwgYnVpbHRpbiB2YWxpZGF0b3JzLidcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPb2xvbmdDb3JlfSBjb3JlIC0gT29sb25nQ29yZSBvYmplY3QuXG4gKi9cbmV4cG9ydHMub3B0aW9ucyA9IChjb3JlKSA9PiB7XG4gICAgbGV0IGNtZE9wdGlvbnMgPSB7fTtcblxuICAgIGNtZE9wdGlvbnNbJ2MnXSA9IHtcbiAgICAgICAgZGVzYzogXCJPb2xvbmcgY29uZmlnIGZpbGVcIixcbiAgICAgICAgYWxpYXM6IFsgXCJjb25mXCIsIFwiY29uZmlnXCIgXSwgICAgICAgICAgICAgICAgXG4gICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgIHByb21wdE1lc3NhZ2U6ICdQbGVhc2UgaW5wdXQgdGhlIGNvbmZpZyBmaWxlIHBhdGg6JyxcbiAgICAgICAgcHJvbXB0RGVmYXVsdDogXCJjb25mL29vbG9uZy5qc29uXCIsXG4gICAgICAgIG9uUmVhZHk6IGFzeW5jICgpID0+IGNvcmUuc3RhcnRDb250YWluZXIoKVxuICAgIH07ICBcblxuICAgIHN3aXRjaCAoY29yZS5jb21tYW5kKSB7XG4gICAgICAgIGNhc2UgJ2J1aWxkJzpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21pZ3JhdGUnOlxuICAgICAgICAgICAgY21kT3B0aW9uc1snciddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdSZXNldCBhbGwgZGF0YSBpZiB0aGUgZGF0YWJhc2UgZXhpc3RzJyxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUmVzZXQgZXhpc3RpbmcgZGF0YWJhc2U/JyxcbiAgICAgICAgICAgICAgICBwcm9tcHREZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdyZXNldCcgXSxcbiAgICAgICAgICAgICAgICBpc0Jvb2w6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhazsgICAgICAgIFxuXG4gICAgICAgIGNhc2UgJ2RhdGFzZXQnOiBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3NjaGVtYSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGxpc3QnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCBhIHNjaGVtYTonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gY29yZS5nZXRTY2hlbWFzSW5Db25maWcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ltcG9ydCc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydzY2hlbWEnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIHNjaGVtYSB0byBsaXN0JywgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1BsZWFzZSBzZWxlY3QgYSBzY2hlbWE6JyxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb21wdFR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBjaG9pY2VzUHJvdmlkZXI6ICgpID0+IGNvcmUuZ2V0U2NoZW1hc0luQ29uZmlnKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbWRPcHRpb25zWydkYXRhc2V0J10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBuYW1lIG9mIHRoZSBkYXRhIHNldCB0byBpbXBvcnQnLFxuICAgICAgICAgICAgICAgIHByb21wdE1lc3NhZ2U6ICdQbGVhc2Ugc2VsZWN0IHRoZSB0YXJnZXQgZGF0YXNldDonLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdkcycsICdkYXRhJyBdLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gY29yZS5nZXREYXRhc2V0XygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmV2ZXJzZSc6ICAgICAgICBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2Nvbm4nXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2Nvbm5lY3RvcicgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBPYmplY3Qua2V5cyhjb3JlLmNvbm5lY3Rpb25TdHJpbmdzKSxcbiAgICAgICAgICAgICAgICBhZnRlcklucXVpcmU6ICgpID0+IHsgY29uc29sZS5sb2coJ1RoZSBjb25lbmN0aW9uIHN0cmluZyBvZiBzZWxlY3RlZCBjb25uZWN0b3I6JywgY29ubmVjdGlvblN0cmluZ3NbY29yZS5vcHRpb24oJ2Nvbm4nKV0pOyB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpc3RWYWxpZGF0b3JzJzpcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvL21vZHVsZSBnZW5lcmFsIG9wdGlvbnNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBjbWRPcHRpb25zO1xufTtcblxuZXhwb3J0cy5tYWluID0gKGNvcmUpID0+IHtcbiAgICBpZiAoY29yZS5vcHRpb24oJ3YnKSkge1xuICAgICAgICBjb25zb2xlLmxvZygndicgKyBjb3JlLmFwcC52ZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb3JlLnNob3dVc2FnZSgpO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuYnVpbGQgPSBhc3luYyAoY29yZSkgPT4ge1xuICAgIGNvcmUuYXBwLmxvZygndmVyYm9zZScsICdvb2xvbmcgYnVpbGQnKTtcblxuICAgIGxldCBvb2xvbmdDb25maWcgPSBjb3JlLm9vbG9uZ0NvbmZpZztcblxuICAgIGxldCBkc2xTb3VyY2VEaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5kc2xTb3VyY2VEaXInKTtcbiAgICBpZiAoIWRzbFNvdXJjZURpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLmRzbFNvdXJjZURpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBtb2RlbE91dHB1dERpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLm1vZGVsT3V0cHV0RGlyJyk7XG4gICAgaWYgKCFtb2RlbE91dHB1dERpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLm1vZGVsT3V0cHV0RGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IHNjcmlwdE91dHB1dERpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLnNjcmlwdE91dHB1dERpcicpO1xuICAgIGlmICghc2NyaXB0T3V0cHV0RGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuc2NyaXB0T3V0cHV0RGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IG1hbmlmZXN0T3V0cHV0RGlyID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcubWFuaWZlc3RPdXRwdXREaXInKTtcbiAgICBcbiAgICBsZXQgZHNsU291cmNlUGF0aCA9IGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKGRzbFNvdXJjZURpcik7ICAgIFxuICAgIGxldCBtb2RlbE91dHB1dFBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChtb2RlbE91dHB1dERpcik7XG4gICAgbGV0IHNjcmlwdE91dHB1dFBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChzY3JpcHRPdXRwdXREaXIpO1xuICAgIGxldCBtYW5pZmVzdE91dHB1dFBhdGggPSBtYW5pZmVzdE91dHB1dERpciAmJiBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChtYW5pZmVzdE91dHB1dERpcik7XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZHNsU291cmNlUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBEU0wgc291cmNlIGRpcmVjdG9yeSBcIiR7ZHNsU291cmNlUGF0aH1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgbGV0IHVzZUpzb25Tb3VyY2UgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy51c2VKc29uU291cmNlJywgZmFsc2UpOyAgICAgICBcbiAgICBsZXQgc2F2ZUludGVybWVkaWF0ZSA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLnNhdmVJbnRlcm1lZGlhdGUnLCBmYWxzZSk7ICAgICAgIFxuXG4gICAgcmV0dXJuIGNvcmUuYXBpLmJ1aWxkXyh7XG4gICAgICAgIGxvZ2dlcjogY29yZS5hcHAubG9nZ2VyLFxuICAgICAgICBkc2xTb3VyY2VQYXRoLFxuICAgICAgICBtb2RlbE91dHB1dFBhdGgsXG4gICAgICAgIHNjcmlwdE91dHB1dFBhdGgsXG4gICAgICAgIG1hbmlmZXN0T3V0cHV0UGF0aCxcbiAgICAgICAgdXNlSnNvblNvdXJjZSxcbiAgICAgICAgc2F2ZUludGVybWVkaWF0ZSxcbiAgICAgICAgc2NoZW1hRGVwbG95bWVudDogY29yZS5zY2hlbWFEZXBsb3ltZW50XG4gICAgfSk7XG59O1xuXG5leHBvcnRzLm1pZ3JhdGUgPSBhc3luYyAoY29yZSkgPT4ge1xuICAgIGNvcmUuYXBwLmxvZygndmVyYm9zZScsICdvb2xvbmcgbWlncmF0ZScpO1xuXG4gICAgbGV0IG9vbG9uZ0NvbmZpZyA9IGNvcmUub29sb25nQ29uZmlnO1xuXG4gICAgbGV0IG1vZGVsRGlyICA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLm1vZGVsRGlyJyk7XG4gICAgaWYgKCFtb2RlbERpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLm1vZGVsRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IGRzbFNvdXJjZURpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLmRzbFNvdXJjZURpcicpO1xuICAgIGlmICghZHNsU291cmNlRGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuZHNsU291cmNlRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IHNjcmlwdFNvdXJjZURpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLnNjcmlwdFNvdXJjZURpcicpO1xuICAgIGlmICghc2NyaXB0U291cmNlRGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuc2NyaXB0U291cmNlRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IG1vZGVsUGF0aCA9IGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKG1vZGVsRGlyKTsgICAgXG4gICAgbGV0IGRzbFNvdXJjZVBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChkc2xTb3VyY2VEaXIpOyAgICBcbiAgICBsZXQgc2NyaXB0U291cmNlUGF0aCA9IGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKHNjcmlwdFNvdXJjZURpcik7XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMobW9kZWxQYXRoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYE1vZGVsIGRpcmVjdG9yeSBcIiR7bW9kZWxQYXRofVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZHNsU291cmNlUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBEU0wgc291cmNlIGRpcmVjdG9yeSBcIiR7ZHNsU291cmNlUGF0aH1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHNjcmlwdFNvdXJjZVBhdGgpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRGF0YWJhc2Ugc2NyaXB0cyBkaXJlY3RvcnkgXCIke3NjcmlwdFNvdXJjZVBhdGh9XCIgbm90IGZvdW5kLmApO1xuICAgIH1cblxuICAgIGxldCB1c2VKc29uU291cmNlID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcudXNlSnNvblNvdXJjZScsIGZhbHNlKTtcblxuICAgIHJldHVybiBjb3JlLmFwaS5taWdyYXRlXyh7XG4gICAgICAgIGFwcE1vZHVsZTogY29yZS5jb250YWluZXIsXG4gICAgICAgIGxvZ2dlcjogY29yZS5hcHAubG9nZ2VyLFxuICAgICAgICBtb2RlbFBhdGgsXG4gICAgICAgIGRzbFNvdXJjZVBhdGgsICAgICAgICBcbiAgICAgICAgc2NyaXB0U291cmNlUGF0aCxcbiAgICAgICAgdXNlSnNvblNvdXJjZSxcbiAgICAgICAgc2NoZW1hRGVwbG95bWVudDogY29yZS5zY2hlbWFEZXBsb3ltZW50XG4gICAgfSwgY29yZS5vcHRpb24oJ3Jlc2V0JykpO1xufTtcblxuZXhwb3J0cy5kYXRhc2V0ID0gYXN5bmMgKGNvcmUpID0+IHtcbiAgICBjb3JlLmFwcC5sb2coJ3ZlcmJvc2UnLCAnb29sb25nIGRhdGFzZXQnKTtcblxuICAgIGxldCBkYXRhc2V0ID0gYXdhaXQgY29yZS5nZXREYXRhc2V0XygpO1xuICAgIFxuICAgIGNvcmUuYXBwLmxvZygnaW5mbycsICdBdmFpbGFibGUgZGF0YXNldDogXFxuJyArIGRhdGFzZXQuam9pbignXFxuJykgKyAnXFxuJyk7XG59XG5cbmV4cG9ydHMuaW1wb3J0ID0gYXN5bmMgKGNvcmUpID0+IHtcbiAgICBjb3JlLmFwcC5sb2coJ3ZlcmJvc2UnLCAnb29sb25nIGltcG9ydCcpO1xuXG4gICAgbGV0IG9vbG9uZ0NvbmZpZyA9IGNvcmUub29sb25nQ29uZmlnO1xuXG4gICAgbGV0IG1vZGVsRGlyICA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLm1vZGVsRGlyJyk7XG4gICAgaWYgKCFtb2RlbERpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLm1vZGVsRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IHNjcmlwdFNvdXJjZURpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLnNjcmlwdFNvdXJjZURpcicpO1xuICAgIGlmICghc2NyaXB0U291cmNlRGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuc2NyaXB0U291cmNlRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuICAgIFxuICAgIGxldCBtb2RlbFBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChtb2RlbERpcik7ICAgIFxuICAgIGxldCBzY3JpcHRTb3VyY2VQYXRoID0gY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgoc2NyaXB0U291cmNlRGlyKTtcblxuICAgIGxldCBzY2hlbWEgPSBjb3JlLm9wdGlvbignc2NoZW1hJyk7ICAgIFxuICAgIGxldCBkYXRhc2V0ID0gY29yZS5vcHRpb24oJ2RhdGFzZXQnKTsgICAgXG5cbiAgICByZXR1cm4gY29yZS5hcGkuaW1wb3J0Xyh7XG4gICAgICAgIGxvZ2dlcjogY29yZS5hcHAubG9nZ2VyLCAgICAgICAgXG4gICAgICAgIG1vZGVsUGF0aCxcbiAgICAgICAgc2NyaXB0U291cmNlUGF0aCwgICAgICAgIFxuICAgICAgICBzY2hlbWFEZXBsb3ltZW50OiBjb3JlLnNjaGVtYURlcGxveW1lbnRcbiAgICB9LCBzY2hlbWEsIGRhdGFzZXQpO1xufVxuXG5leHBvcnRzLnJldmVyc2UgPSBhc3luYyAoY29yZSkgPT4ge1xuICAgIGNvcmUuYXBwLmxvZygndmVyYm9zZScsICdvb2xvbmcgcmV2ZXJzZScpO1xuXG4gICAgbGV0IG9vbG9uZ0NvbmZpZyA9IGNvcmUub29sb25nQ29uZmlnO1xuXG4gICAgbGV0IGRzbFJldmVyc2VPdXRwdXREaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5kc2xSZXZlcnNlT3V0cHV0RGlyJyk7XG4gICAgaWYgKCFkc2xSZXZlcnNlT3V0cHV0RGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuZHNsT3V0cHV0RGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IG91dHB1dERpciA9IGNvcmUuZ2V0UmV2ZXJzZU91dHB1dERpcihjb3JlLmFwcC50b0Fic29sdXRlUGF0aChkc2xSZXZlcnNlT3V0cHV0RGlyKSk7XG5cbiAgICAvL3RvZG86IHJlbG9jYXRpb24sIGFuZCBkZWVwIGNvcHkgY29ubmVjdGlvbiBvcHRpb25zXG4gICAgbGV0IGNvbm4gPSBjb3JlLm9wdGlvbignY29ubicpO1xuICAgIGxldCBbIGRyaXZlciBdID0gZXh0cmFjdERyaXZlckFuZENvbm5lY3Rvck5hbWUoY29ubik7XG4gICAgbGV0IGNvbm5PcHRpb25zID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdkYXRhU291cmNlLicgKyBjb25uKTtcbiAgICBhc3NlcnQ6IGNvbm5PcHRpb25zOyAgICBcblxuICAgIGlmICh0eXBlb2YgY29ubk9wdGlvbnMucmV2ZXJzZVJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25uT3B0aW9ucy5yZXZlcnNlUnVsZXMgPSByZXF1aXJlKGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKGNvbm5PcHRpb25zLnJldmVyc2VSdWxlcykpO1xuICAgIH0gXG5cbiAgICBhc3NlcnQ6ICFjb25uT3B0aW9ucy5yZXZlcnNlUnVsZXMgfHwgXy5pc1BsYWluT2JqZWN0KGNvbm5PcHRpb25zLnJldmVyc2VSdWxlcyk7XG5cbiAgICByZXR1cm4gY29yZS5hcGkucmV2ZXJzZV8oeyBcbiAgICAgICAgbG9nZ2VyOiBjb3JlLmFwcC5sb2dnZXIsXG4gICAgICAgIGRzbFJldmVyc2VPdXRwdXRQYXRoOiBvdXRwdXREaXIsXG4gICAgICAgIGRyaXZlcixcbiAgICAgICAgY29ubk9wdGlvbnNcbiAgICB9KTtcbn07XG5cbmV4cG9ydHMubGlzdFZhbGlkYXRvcnMgPSBhc3luYyAoY29yZSkgPT4ge1xuICAgIGNvcmUuYXBwLmxvZygndmVyYm9zZScsICdvb2xvbmcgbGlzdFZhbGlkYXRvcnMnKTtcblxuICAgIGxldCBsaXN0ID0gY29yZS5hcGkuZ2V0VmFsaWRhdG9yTGlzdCgpO1xuXG4gICAgY29yZS5hcHAubG9nKCdpbmZvJywgJ0F2YWlsYWJsZSB2YWxpZGF0b3JzOiBcXG4nICsgbGlzdC5qb2luKCdcXG4nKSArICdcXG4nKTtcbn0iXX0=