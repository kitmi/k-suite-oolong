#!/usr/bin/env node
"use strict";

require("source-map-support/register");

if (process.env.DIAG_HANDLE) {
  const diagLog = require('why-is-node-running');

  setTimeout(function () {
    diagLog();
  }, 300000);
}

const CliApp = require('@k-suite/app');

const winston = require('winston');

const {
  combine,
  timestamp,
  colorize,
  json,
  simple
} = winston.format;

const OolongCore = require('./OolongCore');

const pkg = require('../../package.json');

let cliApp = new CliApp('oolong', {
  logger: {
    "transports": [{
      "type": "console",
      "options": {
        "level": "debug",
        "format": combine(colorize(), simple())
      }
    }]
  },
  loadConfigFromOptions: true,
  config: {
    "version": pkg.version,
    "commandLineOptions": {
      "banner": `Oolong command line helper v${pkg.version}`,
      "program": "oolong",
      "arguments": [{
        "name": "command",
        "default": 'main'
      }],
      "options": {
        "e": {
          "desc": "Target environment",
          "alias": ["env", "environment"],
          "default": "development"
        },
        "s": {
          "desc": "Silent mode",
          "alias": ["silent"],
          "isBool": true,
          "default": false
        },
        "v": {
          "desc": "Show version number",
          "alias": ["version"],
          "isBool": true,
          "default": false
        },
        "?": {
          "desc": "Show usage message",
          "alias": ["help"],
          "isBool": true,
          "default": false
        }
      }
    }
  }
});
cliApp.start_().then(async () => {
  let core = new OolongCore(cliApp);

  if (await core.initialize_()) {
    await core.execute_();
    return cliApp.stop_();
  }

  core.showUsage();
  await cliApp.stop_();
  process.exit(1);
}).catch(error => {
  console.error(error);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvb29sb25nLmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJESUFHX0hBTkRMRSIsImRpYWdMb2ciLCJyZXF1aXJlIiwic2V0VGltZW91dCIsIkNsaUFwcCIsIndpbnN0b24iLCJjb21iaW5lIiwidGltZXN0YW1wIiwiY29sb3JpemUiLCJqc29uIiwic2ltcGxlIiwiZm9ybWF0IiwiT29sb25nQ29yZSIsInBrZyIsImNsaUFwcCIsImxvZ2dlciIsImxvYWRDb25maWdGcm9tT3B0aW9ucyIsImNvbmZpZyIsInZlcnNpb24iLCJzdGFydF8iLCJ0aGVuIiwiY29yZSIsImluaXRpYWxpemVfIiwiZXhlY3V0ZV8iLCJzdG9wXyIsInNob3dVc2FnZSIsImV4aXQiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBRUEsSUFBSUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFdBQWhCLEVBQTZCO0FBQ3pCLFFBQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQXZCOztBQUNBQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQkYsSUFBQUEsT0FBTztBQUNWLEdBRlMsRUFFUCxNQUZPLENBQVY7QUFHSDs7QUFFRCxNQUFNRyxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxjQUFELENBQXRCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFSSxFQUFBQSxPQUFGO0FBQVdDLEVBQUFBLFNBQVg7QUFBc0JDLEVBQUFBLFFBQXRCO0FBQWdDQyxFQUFBQSxJQUFoQztBQUFzQ0MsRUFBQUE7QUFBdEMsSUFBaURMLE9BQU8sQ0FBQ00sTUFBL0Q7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHVixPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFDQSxNQUFNVyxHQUFHLEdBQUdYLE9BQU8sQ0FBQyxvQkFBRCxDQUFuQjs7QUFFQSxJQUFJWSxNQUFNLEdBQUcsSUFBSVYsTUFBSixDQUFXLFFBQVgsRUFBcUI7QUFDOUJXLEVBQUFBLE1BQU0sRUFBRTtBQUNKLGtCQUFjLENBQ1Y7QUFDSSxjQUFRLFNBRFo7QUFFSSxpQkFBVztBQUNQLGlCQUFTLE9BREY7QUFFUCxrQkFBVVQsT0FBTyxDQUFDRSxRQUFRLEVBQVQsRUFBYUUsTUFBTSxFQUFuQjtBQUZWO0FBRmYsS0FEVTtBQURWLEdBRHNCO0FBWTlCTSxFQUFBQSxxQkFBcUIsRUFBRSxJQVpPO0FBYTlCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSixlQUFXSixHQUFHLENBQUNLLE9BRFg7QUFFSiwwQkFBc0I7QUFDbEIsZ0JBQVcsK0JBQThCTCxHQUFHLENBQUNLLE9BQVEsRUFEbkM7QUFFbEIsaUJBQVcsUUFGTztBQUdsQixtQkFBYSxDQUNUO0FBQUUsZ0JBQVEsU0FBVjtBQUFxQixtQkFBVztBQUFoQyxPQURTLENBSEs7QUFNbEIsaUJBQVc7QUFDUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLEtBQUYsRUFBUyxhQUFULENBRlI7QUFHRCxxQkFBVztBQUhWLFNBREU7QUFNUCxhQUFLO0FBQ0Qsa0JBQVEsYUFEUDtBQUVELG1CQUFTLENBQUUsUUFBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FORTtBQVlQLGFBQUs7QUFDRCxrQkFBUSxxQkFEUDtBQUVELG1CQUFTLENBQUUsU0FBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FaRTtBQWtCUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLE1BQUYsQ0FGUjtBQUdELG9CQUFVLElBSFQ7QUFJRCxxQkFBVztBQUpWO0FBbEJFO0FBTk87QUFGbEI7QUFic0IsQ0FBckIsQ0FBYjtBQWtEQUosTUFBTSxDQUFDSyxNQUFQLEdBQWdCQyxJQUFoQixDQUFxQixZQUFZO0FBQzdCLE1BQUlDLElBQUksR0FBRyxJQUFJVCxVQUFKLENBQWVFLE1BQWYsQ0FBWDs7QUFFQSxNQUFJLE1BQU1PLElBQUksQ0FBQ0MsV0FBTCxFQUFWLEVBQThCO0FBQzFCLFVBQU1ELElBQUksQ0FBQ0UsUUFBTCxFQUFOO0FBQ0EsV0FBT1QsTUFBTSxDQUFDVSxLQUFQLEVBQVA7QUFDSDs7QUFFREgsRUFBQUEsSUFBSSxDQUFDSSxTQUFMO0FBQ0EsUUFBTVgsTUFBTSxDQUFDVSxLQUFQLEVBQU47QUFFQTFCLEVBQUFBLE9BQU8sQ0FBQzRCLElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0FaRCxFQVlHQyxLQVpILENBWVNDLEtBQUssSUFBSTtBQUNkQyxFQUFBQSxPQUFPLENBQUNELEtBQVIsQ0FBY0EsS0FBZDtBQUNBOUIsRUFBQUEsT0FBTyxDQUFDNEIsSUFBUixDQUFhLENBQWI7QUFDSCxDQWZEIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pZiAocHJvY2Vzcy5lbnYuRElBR19IQU5ETEUpIHtcbiAgICBjb25zdCBkaWFnTG9nID0gcmVxdWlyZSgnd2h5LWlzLW5vZGUtcnVubmluZycpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkaWFnTG9nKCkgLy8gbG9ncyBvdXQgYWN0aXZlIGhhbmRsZXMgdGhhdCBhcmUga2VlcGluZyBub2RlIHJ1bm5pbmdcbiAgICB9LCAzMDAwMDApO1xufVxuXG5jb25zdCBDbGlBcHAgPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAnKTtcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCd3aW5zdG9uJyk7XG5jb25zdCB7IGNvbWJpbmUsIHRpbWVzdGFtcCwgY29sb3JpemUsIGpzb24sIHNpbXBsZSB9ID0gd2luc3Rvbi5mb3JtYXQ7XG5jb25zdCBPb2xvbmdDb3JlID0gcmVxdWlyZSgnLi9Pb2xvbmdDb3JlJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcblxubGV0IGNsaUFwcCA9IG5ldyBDbGlBcHAoJ29vbG9uZycsIHsgXG4gICAgbG9nZ2VyOiB7ICAgICAgICBcbiAgICAgICAgXCJ0cmFuc3BvcnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogXCJkZWJ1Z1wiLFxuICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBjb21iaW5lKGNvbG9yaXplKCksIHNpbXBsZSgpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAgbG9hZENvbmZpZ0Zyb21PcHRpb25zOiB0cnVlLFxuICAgIGNvbmZpZzoge1xuICAgICAgICBcInZlcnNpb25cIjogcGtnLnZlcnNpb24sXG4gICAgICAgIFwiY29tbWFuZExpbmVPcHRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYmFubmVyXCI6IGBPb2xvbmcgY29tbWFuZCBsaW5lIGhlbHBlciB2JHtwa2cudmVyc2lvbn1gLFxuICAgICAgICAgICAgXCJwcm9ncmFtXCI6IFwib29sb25nXCIsXG4gICAgICAgICAgICBcImFyZ3VtZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgeyBcIm5hbWVcIjogXCJjb21tYW5kXCIsIFwiZGVmYXVsdFwiOiAnbWFpbicgfVxuICAgICAgICAgICAgXSwgIFxuICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCJlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiVGFyZ2V0IGVudmlyb25tZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcImVudlwiLCBcImVudmlyb25tZW50XCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiZGV2ZWxvcG1lbnRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiU2lsZW50IG1vZGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwic2lsZW50XCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpc0Jvb2xcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSwgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcInZcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaG93IHZlcnNpb24gbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcInZlcnNpb25cIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiP1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiOiBcIlNob3cgdXNhZ2UgbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IFsgXCJoZWxwXCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpc0Jvb2xcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNsaUFwcC5zdGFydF8oKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICBsZXQgY29yZSA9IG5ldyBPb2xvbmdDb3JlKGNsaUFwcCk7XG5cbiAgICBpZiAoYXdhaXQgY29yZS5pbml0aWFsaXplXygpKSB7XG4gICAgICAgIGF3YWl0IGNvcmUuZXhlY3V0ZV8oKTsgICAgICAgIFxuICAgICAgICByZXR1cm4gY2xpQXBwLnN0b3BfKCk7XG4gICAgfSAgICBcblxuICAgIGNvcmUuc2hvd1VzYWdlKCk7XG4gICAgYXdhaXQgY2xpQXBwLnN0b3BfKCk7XG5cbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KS5jYXRjaChlcnJvciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufSk7Il19