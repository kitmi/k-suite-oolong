#!/usr/bin/env node
"use strict";

require("source-map-support/register");

const CliApp = require('@k-suite/app');

const winston = require('winston');

const {
  combine,
  timestamp,
  colorize,
  json,
  simple
} = winston.format;

const OolongCore = require('./OolongCore');

const pkg = require('../../package.json');

let cliApp = new CliApp('oolong', {
  logger: {
    "transports": [{
      "type": "console",
      "options": {
        "level": "debug",
        "format": combine(colorize(), simple())
      }
    }]
  },
  loadConfigFromOptions: true,
  config: {
    "version": pkg.version,
    "commandLineOptions": {
      "banner": `Oolong command line helper v${pkg.version}`,
      "program": "oolong",
      "arguments": [{
        "name": "command",
        "default": 'main'
      }],
      "options": {
        "e": {
          "desc": "Target environment",
          "alias": ["env", "environment"],
          "default": "development"
        },
        "s": {
          "desc": "Silent mode",
          "alias": ["silent"],
          "isBool": true,
          "default": false
        },
        "v": {
          "desc": "Show version number",
          "alias": ["version"],
          "isBool": true,
          "default": false
        },
        "?": {
          "desc": "Show usage message",
          "alias": ["help"],
          "isBool": true,
          "default": false
        }
      }
    }
  }
});
cliApp.start_().then(async () => {
  let core = new OolongCore(cliApp);

  if (await core.initialize_()) {
    await core.execute_();
    return cliApp.stop_();
  }

  core.showUsage();
  await cliApp.stop_();
  process.exit(1);
}).catch(error => {
  console.error(error);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvb29sb25nLmpzIl0sIm5hbWVzIjpbIkNsaUFwcCIsInJlcXVpcmUiLCJ3aW5zdG9uIiwiY29tYmluZSIsInRpbWVzdGFtcCIsImNvbG9yaXplIiwianNvbiIsInNpbXBsZSIsImZvcm1hdCIsIk9vbG9uZ0NvcmUiLCJwa2ciLCJjbGlBcHAiLCJsb2dnZXIiLCJsb2FkQ29uZmlnRnJvbU9wdGlvbnMiLCJjb25maWciLCJ2ZXJzaW9uIiwic3RhcnRfIiwidGhlbiIsImNvcmUiLCJpbml0aWFsaXplXyIsImV4ZWN1dGVfIiwic3RvcF8iLCJzaG93VXNhZ2UiLCJwcm9jZXNzIiwiZXhpdCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXRCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxPQUFGO0FBQVdDLEVBQUFBLFNBQVg7QUFBc0JDLEVBQUFBLFFBQXRCO0FBQWdDQyxFQUFBQSxJQUFoQztBQUFzQ0MsRUFBQUE7QUFBdEMsSUFBaURMLE9BQU8sQ0FBQ00sTUFBL0Q7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHUixPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFDQSxNQUFNUyxHQUFHLEdBQUdULE9BQU8sQ0FBQyxvQkFBRCxDQUFuQjs7QUFFQSxJQUFJVSxNQUFNLEdBQUcsSUFBSVgsTUFBSixDQUFXLFFBQVgsRUFBcUI7QUFDOUJZLEVBQUFBLE1BQU0sRUFBRTtBQUNKLGtCQUFjLENBQ1Y7QUFDSSxjQUFRLFNBRFo7QUFFSSxpQkFBVztBQUNQLGlCQUFTLE9BREY7QUFFUCxrQkFBVVQsT0FBTyxDQUFDRSxRQUFRLEVBQVQsRUFBYUUsTUFBTSxFQUFuQjtBQUZWO0FBRmYsS0FEVTtBQURWLEdBRHNCO0FBWTlCTSxFQUFBQSxxQkFBcUIsRUFBRSxJQVpPO0FBYTlCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSixlQUFXSixHQUFHLENBQUNLLE9BRFg7QUFFSiwwQkFBc0I7QUFDbEIsZ0JBQVcsK0JBQThCTCxHQUFHLENBQUNLLE9BQVEsRUFEbkM7QUFFbEIsaUJBQVcsUUFGTztBQUdsQixtQkFBYSxDQUNUO0FBQUUsZ0JBQVEsU0FBVjtBQUFxQixtQkFBVztBQUFoQyxPQURTLENBSEs7QUFNbEIsaUJBQVc7QUFDUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLEtBQUYsRUFBUyxhQUFULENBRlI7QUFHRCxxQkFBVztBQUhWLFNBREU7QUFNUCxhQUFLO0FBQ0Qsa0JBQVEsYUFEUDtBQUVELG1CQUFTLENBQUUsUUFBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FORTtBQVlQLGFBQUs7QUFDRCxrQkFBUSxxQkFEUDtBQUVELG1CQUFTLENBQUUsU0FBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FaRTtBQWtCUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLE1BQUYsQ0FGUjtBQUdELG9CQUFVLElBSFQ7QUFJRCxxQkFBVztBQUpWO0FBbEJFO0FBTk87QUFGbEI7QUFic0IsQ0FBckIsQ0FBYjtBQWtEQUosTUFBTSxDQUFDSyxNQUFQLEdBQWdCQyxJQUFoQixDQUFxQixZQUFZO0FBQzdCLE1BQUlDLElBQUksR0FBRyxJQUFJVCxVQUFKLENBQWVFLE1BQWYsQ0FBWDs7QUFFQSxNQUFJLE1BQU1PLElBQUksQ0FBQ0MsV0FBTCxFQUFWLEVBQThCO0FBQzFCLFVBQU1ELElBQUksQ0FBQ0UsUUFBTCxFQUFOO0FBQ0EsV0FBT1QsTUFBTSxDQUFDVSxLQUFQLEVBQVA7QUFDSDs7QUFFREgsRUFBQUEsSUFBSSxDQUFDSSxTQUFMO0FBQ0EsUUFBTVgsTUFBTSxDQUFDVSxLQUFQLEVBQU47QUFFQUUsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQUNILENBWkQsRUFZR0MsS0FaSCxDQVlTQyxLQUFLLElBQUk7QUFDZEMsRUFBQUEsT0FBTyxDQUFDRCxLQUFSLENBQWNBLEtBQWQ7QUFDQUgsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQUNILENBZkQiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmNvbnN0IENsaUFwcCA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcCcpO1xuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcbmNvbnN0IHsgY29tYmluZSwgdGltZXN0YW1wLCBjb2xvcml6ZSwganNvbiwgc2ltcGxlIH0gPSB3aW5zdG9uLmZvcm1hdDtcbmNvbnN0IE9vbG9uZ0NvcmUgPSByZXF1aXJlKCcuL09vbG9uZ0NvcmUnKTtcbmNvbnN0IHBrZyA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG5sZXQgY2xpQXBwID0gbmV3IENsaUFwcCgnb29sb25nJywgeyBcbiAgICBsb2dnZXI6IHsgICAgICAgIFxuICAgICAgICBcInRyYW5zcG9ydHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbnNvbGVcIixcbiAgICAgICAgICAgICAgICBcIm9wdGlvbnNcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImRlYnVnXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IGNvbWJpbmUoY29sb3JpemUoKSwgc2ltcGxlKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICBsb2FkQ29uZmlnRnJvbU9wdGlvbnM6IHRydWUsXG4gICAgY29uZmlnOiB7XG4gICAgICAgIFwidmVyc2lvblwiOiBwa2cudmVyc2lvbixcbiAgICAgICAgXCJjb21tYW5kTGluZU9wdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJiYW5uZXJcIjogYE9vbG9uZyBjb21tYW5kIGxpbmUgaGVscGVyIHYke3BrZy52ZXJzaW9ufWAsXG4gICAgICAgICAgICBcInByb2dyYW1cIjogXCJvb2xvbmdcIixcbiAgICAgICAgICAgIFwiYXJndW1lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICB7IFwibmFtZVwiOiBcImNvbW1hbmRcIiwgXCJkZWZhdWx0XCI6ICdtYWluJyB9XG4gICAgICAgICAgICBdLCAgXG4gICAgICAgICAgICBcIm9wdGlvbnNcIjogeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcImVcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJUYXJnZXQgZW52aXJvbm1lbnRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwiZW52XCIsIFwiZW52aXJvbm1lbnRcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJkZXZlbG9wbWVudFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaWxlbnQgbW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IFsgXCJzaWxlbnRcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFwidlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiOiBcIlNob3cgdmVyc2lvbiBudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwidmVyc2lvblwiIF0sXG4gICAgICAgICAgICAgICAgICAgIFwiaXNCb29sXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCI/XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiU2hvdyB1c2FnZSBtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcImhlbHBcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuY2xpQXBwLnN0YXJ0XygpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgIGxldCBjb3JlID0gbmV3IE9vbG9uZ0NvcmUoY2xpQXBwKTtcblxuICAgIGlmIChhd2FpdCBjb3JlLmluaXRpYWxpemVfKCkpIHtcbiAgICAgICAgYXdhaXQgY29yZS5leGVjdXRlXygpOyAgICAgICAgXG4gICAgICAgIHJldHVybiBjbGlBcHAuc3RvcF8oKTtcbiAgICB9ICAgIFxuXG4gICAgY29yZS5zaG93VXNhZ2UoKTtcbiAgICBhd2FpdCBjbGlBcHAuc3RvcF8oKTtcblxuICAgIHByb2Nlc3MuZXhpdCgxKTtcbn0pLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTsiXX0=