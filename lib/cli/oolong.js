#!/usr/bin/env node
"use strict";

require("source-map-support/register");

const CliApp = require('@k-suite/app');

const winston = require('winston');

const {
  combine,
  timestamp,
  colorize,
  json,
  simple
} = winston.format;

const path = require('path');

const OolongCore = require('./OolongCore');

const pkg = require('../../package.json');

const CWD = process.cwd();
const logPath = path.resolve(CWD, 'oolong-cli.log');
let cliApp = new CliApp('oolong', {
  logger: {
    "transports": [{
      "type": "console",
      "options": {
        "level": "debug",
        "format": combine(colorize(), simple())
      }
    }, {
      "type": "file",
      "options": {
        "level": "verbose",
        "format": combine(timestamp(), json()),
        "filename": logPath
      }
    }]
  },
  loadConfigFromOptions: true,
  config: {
    "version": pkg.version,
    "commandLineOptions": {
      "banner": `Oolong command line helper v${pkg.version}`,
      "program": "oolong",
      "arguments": [{
        "name": "command",
        "default": 'main'
      }],
      "options": {
        "e": {
          "desc": "Target environment",
          "alias": ["env", "environment"],
          "default": "development"
        },
        "s": {
          "desc": "Silent mode",
          "alias": ["silent"],
          "isBool": true,
          "default": false
        },
        "v": {
          "desc": "Show version number",
          "alias": ["version"],
          "isBool": true,
          "default": false
        },
        "?": {
          "desc": "Show usage message",
          "alias": ["help"],
          "isBool": true,
          "default": false
        }
      }
    }
  }
});
cliApp.start_().then(async () => {
  let core = new OolongCore(cliApp);

  if (await core.initialize_()) {
    await core.execute_();
    return cliApp.stop_();
  }

  core.showUsage();
  await cliApp.stop_();
  process.exit(1);
}).catch(error => {
  console.error(error);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvb29sb25nLmpzIl0sIm5hbWVzIjpbIkNsaUFwcCIsInJlcXVpcmUiLCJ3aW5zdG9uIiwiY29tYmluZSIsInRpbWVzdGFtcCIsImNvbG9yaXplIiwianNvbiIsInNpbXBsZSIsImZvcm1hdCIsInBhdGgiLCJPb2xvbmdDb3JlIiwicGtnIiwiQ1dEIiwicHJvY2VzcyIsImN3ZCIsImxvZ1BhdGgiLCJyZXNvbHZlIiwiY2xpQXBwIiwibG9nZ2VyIiwibG9hZENvbmZpZ0Zyb21PcHRpb25zIiwiY29uZmlnIiwidmVyc2lvbiIsInN0YXJ0XyIsInRoZW4iLCJjb3JlIiwiaW5pdGlhbGl6ZV8iLCJleGVjdXRlXyIsInN0b3BfIiwic2hvd1VzYWdlIiwiZXhpdCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXRCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxPQUFGO0FBQVdDLEVBQUFBLFNBQVg7QUFBc0JDLEVBQUFBLFFBQXRCO0FBQWdDQyxFQUFBQSxJQUFoQztBQUFzQ0MsRUFBQUE7QUFBdEMsSUFBaURMLE9BQU8sQ0FBQ00sTUFBL0Q7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHUixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNUyxVQUFVLEdBQUdULE9BQU8sQ0FBQyxjQUFELENBQTFCOztBQUNBLE1BQU1VLEdBQUcsR0FBR1YsT0FBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLE1BQU1XLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLEVBQVo7QUFDQSxNQUFNQyxPQUFPLEdBQUdOLElBQUksQ0FBQ08sT0FBTCxDQUFhSixHQUFiLEVBQWtCLGdCQUFsQixDQUFoQjtBQUVBLElBQUlLLE1BQU0sR0FBRyxJQUFJakIsTUFBSixDQUFXLFFBQVgsRUFBcUI7QUFDOUJrQixFQUFBQSxNQUFNLEVBQUU7QUFDSixrQkFBYyxDQUNWO0FBQ0ksY0FBUSxTQURaO0FBRUksaUJBQVc7QUFDUCxpQkFBUyxPQURGO0FBRVAsa0JBQVVmLE9BQU8sQ0FBQ0UsUUFBUSxFQUFULEVBQWFFLE1BQU0sRUFBbkI7QUFGVjtBQUZmLEtBRFUsRUFRVjtBQUNJLGNBQVEsTUFEWjtBQUVJLGlCQUFXO0FBQ1AsaUJBQVMsU0FERjtBQUVQLGtCQUFVSixPQUFPLENBQUNDLFNBQVMsRUFBVixFQUFjRSxJQUFJLEVBQWxCLENBRlY7QUFHUCxvQkFBWVM7QUFITDtBQUZmLEtBUlU7QUFEVixHQURzQjtBQW9COUJJLEVBQUFBLHFCQUFxQixFQUFFLElBcEJPO0FBcUI5QkMsRUFBQUEsTUFBTSxFQUFFO0FBQ0osZUFBV1QsR0FBRyxDQUFDVSxPQURYO0FBRUosMEJBQXNCO0FBQ2xCLGdCQUFXLCtCQUE4QlYsR0FBRyxDQUFDVSxPQUFRLEVBRG5DO0FBRWxCLGlCQUFXLFFBRk87QUFHbEIsbUJBQWEsQ0FDVDtBQUFFLGdCQUFRLFNBQVY7QUFBcUIsbUJBQVc7QUFBaEMsT0FEUyxDQUhLO0FBTWxCLGlCQUFXO0FBQ1AsYUFBSztBQUNELGtCQUFRLG9CQURQO0FBRUQsbUJBQVMsQ0FBRSxLQUFGLEVBQVMsYUFBVCxDQUZSO0FBR0QscUJBQVc7QUFIVixTQURFO0FBTVAsYUFBSztBQUNELGtCQUFRLGFBRFA7QUFFRCxtQkFBUyxDQUFFLFFBQUYsQ0FGUjtBQUdELG9CQUFVLElBSFQ7QUFJRCxxQkFBVztBQUpWLFNBTkU7QUFZUCxhQUFLO0FBQ0Qsa0JBQVEscUJBRFA7QUFFRCxtQkFBUyxDQUFFLFNBQUYsQ0FGUjtBQUdELG9CQUFVLElBSFQ7QUFJRCxxQkFBVztBQUpWLFNBWkU7QUFrQlAsYUFBSztBQUNELGtCQUFRLG9CQURQO0FBRUQsbUJBQVMsQ0FBRSxNQUFGLENBRlI7QUFHRCxvQkFBVSxJQUhUO0FBSUQscUJBQVc7QUFKVjtBQWxCRTtBQU5PO0FBRmxCO0FBckJzQixDQUFyQixDQUFiO0FBMERBSixNQUFNLENBQUNLLE1BQVAsR0FBZ0JDLElBQWhCLENBQXFCLFlBQVk7QUFDN0IsTUFBSUMsSUFBSSxHQUFHLElBQUlkLFVBQUosQ0FBZU8sTUFBZixDQUFYOztBQUVBLE1BQUksTUFBTU8sSUFBSSxDQUFDQyxXQUFMLEVBQVYsRUFBOEI7QUFDMUIsVUFBTUQsSUFBSSxDQUFDRSxRQUFMLEVBQU47QUFDQSxXQUFPVCxNQUFNLENBQUNVLEtBQVAsRUFBUDtBQUNIOztBQUVESCxFQUFBQSxJQUFJLENBQUNJLFNBQUw7QUFDQSxRQUFNWCxNQUFNLENBQUNVLEtBQVAsRUFBTjtBQUVBZCxFQUFBQSxPQUFPLENBQUNnQixJQUFSLENBQWEsQ0FBYjtBQUNILENBWkQsRUFZR0MsS0FaSCxDQVlTQyxLQUFLLElBQUk7QUFDZEMsRUFBQUEsT0FBTyxDQUFDRCxLQUFSLENBQWNBLEtBQWQ7QUFDQWxCLEVBQUFBLE9BQU8sQ0FBQ2dCLElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0FmRCIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuY29uc3QgQ2xpQXBwID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwJyk7XG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuY29uc3QgeyBjb21iaW5lLCB0aW1lc3RhbXAsIGNvbG9yaXplLCBqc29uLCBzaW1wbGUgfSA9IHdpbnN0b24uZm9ybWF0O1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IE9vbG9uZ0NvcmUgPSByZXF1aXJlKCcuL09vbG9uZ0NvcmUnKTtcbmNvbnN0IHBrZyA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG5jb25zdCBDV0QgPSBwcm9jZXNzLmN3ZCgpO1xuY29uc3QgbG9nUGF0aCA9IHBhdGgucmVzb2x2ZShDV0QsICdvb2xvbmctY2xpLmxvZycpO1xuXG5sZXQgY2xpQXBwID0gbmV3IENsaUFwcCgnb29sb25nJywgeyBcbiAgICBsb2dnZXI6IHsgICAgICAgIFxuICAgICAgICBcInRyYW5zcG9ydHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbnNvbGVcIixcbiAgICAgICAgICAgICAgICBcIm9wdGlvbnNcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImRlYnVnXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IGNvbWJpbmUoY29sb3JpemUoKSwgc2ltcGxlKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcInZlcmJvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJmb3JtYXRcIjogY29tYmluZSh0aW1lc3RhbXAoKSwganNvbigpKSxcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBsb2dQYXRoIC8vYCR7bG9nUGF0aH1gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICBsb2FkQ29uZmlnRnJvbU9wdGlvbnM6IHRydWUsXG4gICAgY29uZmlnOiB7XG4gICAgICAgIFwidmVyc2lvblwiOiBwa2cudmVyc2lvbixcbiAgICAgICAgXCJjb21tYW5kTGluZU9wdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJiYW5uZXJcIjogYE9vbG9uZyBjb21tYW5kIGxpbmUgaGVscGVyIHYke3BrZy52ZXJzaW9ufWAsXG4gICAgICAgICAgICBcInByb2dyYW1cIjogXCJvb2xvbmdcIixcbiAgICAgICAgICAgIFwiYXJndW1lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICB7IFwibmFtZVwiOiBcImNvbW1hbmRcIiwgXCJkZWZhdWx0XCI6ICdtYWluJyB9XG4gICAgICAgICAgICBdLCAgXG4gICAgICAgICAgICBcIm9wdGlvbnNcIjogeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcImVcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJUYXJnZXQgZW52aXJvbm1lbnRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwiZW52XCIsIFwiZW52aXJvbm1lbnRcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJkZXZlbG9wbWVudFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaWxlbnQgbW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IFsgXCJzaWxlbnRcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFwidlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiOiBcIlNob3cgdmVyc2lvbiBudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwidmVyc2lvblwiIF0sXG4gICAgICAgICAgICAgICAgICAgIFwiaXNCb29sXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCI/XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiU2hvdyB1c2FnZSBtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcImhlbHBcIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuY2xpQXBwLnN0YXJ0XygpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgIGxldCBjb3JlID0gbmV3IE9vbG9uZ0NvcmUoY2xpQXBwKTtcblxuICAgIGlmIChhd2FpdCBjb3JlLmluaXRpYWxpemVfKCkpIHtcbiAgICAgICAgYXdhaXQgY29yZS5leGVjdXRlXygpOyAgICAgICAgXG4gICAgICAgIHJldHVybiBjbGlBcHAuc3RvcF8oKTtcbiAgICB9ICAgIFxuXG4gICAgY29yZS5zaG93VXNhZ2UoKTtcbiAgICBhd2FpdCBjbGlBcHAuc3RvcF8oKTtcblxuICAgIHByb2Nlc3MuZXhpdCgxKTtcbn0pLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTsiXX0=