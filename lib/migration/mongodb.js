"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  pascalCase,
  quote
} = require('rk-utils');

class MongoDbMigration {
  constructor(context, schemaName, connector) {
    this.logger = context.logger;
    this.modelPath = context.modelPath;
    this.scriptSourcePath = context.scriptSourcePath;
    this.schemaName = schemaName;
    this.connector = connector;
    this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);
  }

  async reset_() {
    return this.connector.execute_(db => db.dropDatabase());
  }

  async create_(extraOptions) {}

  async load_(dataFile) {
    let ext = path.extname(dataFile);
    let collection = path.basename(dataFile, ext);

    if (ext === '.json') {
      let docs = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });
      await this._loadData_(collection, docs);
    } else if (ext === '.js') {
      let executor = require(dataFile);

      await executor(this.connector);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadData_(collection, docs) {
    await eachAsync_(docs, doc => this.connector.insertOne_(collection, doc));
  }

}

module.exports = MongoDbMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb24vbW9uZ29kYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImVhY2hBc3luY18iLCJwYXNjYWxDYXNlIiwicXVvdGUiLCJNb25nb0RiTWlncmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb250ZXh0Iiwic2NoZW1hTmFtZSIsImNvbm5lY3RvciIsImxvZ2dlciIsIm1vZGVsUGF0aCIsInNjcmlwdFNvdXJjZVBhdGgiLCJkYlNjcmlwdFBhdGgiLCJqb2luIiwiZHJpdmVyIiwiZGF0YWJhc2UiLCJyZXNldF8iLCJleGVjdXRlXyIsImRiIiwiZHJvcERhdGFiYXNlIiwiY3JlYXRlXyIsImV4dHJhT3B0aW9ucyIsImxvYWRfIiwiZGF0YUZpbGUiLCJleHQiLCJleHRuYW1lIiwiY29sbGVjdGlvbiIsImJhc2VuYW1lIiwiZG9jcyIsInJlYWRKc29uU3luYyIsImVuY29kaW5nIiwiX2xvYWREYXRhXyIsImV4ZWN1dG9yIiwiRXJyb3IiLCJkb2MiLCJpbnNlcnRPbmVfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLFVBQVQ7QUFBcUJDLEVBQUFBLFVBQXJCO0FBQWlDQyxFQUFBQTtBQUFqQyxJQUEyQ0wsT0FBTyxDQUFDLFVBQUQsQ0FBeEQ7O0FBTUEsTUFBTU0sZ0JBQU4sQ0FBdUI7QUFLbkJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLEVBQXNCQyxTQUF0QixFQUFpQztBQUN4QyxTQUFLQyxNQUFMLEdBQWNILE9BQU8sQ0FBQ0csTUFBdEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCSixPQUFPLENBQUNJLFNBQXpCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JMLE9BQU8sQ0FBQ0ssZ0JBQWhDO0FBQ0EsU0FBS0osVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUVBLFNBQUtJLFlBQUwsR0FBb0JmLElBQUksQ0FBQ2dCLElBQUwsQ0FBVSxLQUFLRixnQkFBZixFQUFpQyxLQUFLSCxTQUFMLENBQWVNLE1BQWhELEVBQXdELEtBQUtOLFNBQUwsQ0FBZU8sUUFBdkUsQ0FBcEI7QUFDSDs7QUFFRCxRQUFNQyxNQUFOLEdBQWU7QUFDWCxXQUFPLEtBQUtSLFNBQUwsQ0FBZVMsUUFBZixDQUF3QkMsRUFBRSxJQUFJQSxFQUFFLENBQUNDLFlBQUgsRUFBOUIsQ0FBUDtBQUNIOztBQUVELFFBQU1DLE9BQU4sQ0FBY0MsWUFBZCxFQUE0QixDQUUzQjs7QUFFRCxRQUFNQyxLQUFOLENBQVlDLFFBQVosRUFBc0I7QUFDbEIsUUFBSUMsR0FBRyxHQUFHM0IsSUFBSSxDQUFDNEIsT0FBTCxDQUFhRixRQUFiLENBQVY7QUFDQSxRQUFJRyxVQUFVLEdBQUc3QixJQUFJLENBQUM4QixRQUFMLENBQWNKLFFBQWQsRUFBd0JDLEdBQXhCLENBQWpCOztBQUVBLFFBQUlBLEdBQUcsS0FBSyxPQUFaLEVBQXFCO0FBQ2pCLFVBQUlJLElBQUksR0FBRzVCLEVBQUUsQ0FBQzZCLFlBQUgsQ0FBZ0JOLFFBQWhCLEVBQTBCO0FBQUNPLFFBQUFBLFFBQVEsRUFBRTtBQUFYLE9BQTFCLENBQVg7QUFFQSxZQUFNLEtBQUtDLFVBQUwsQ0FBZ0JMLFVBQWhCLEVBQTRCRSxJQUE1QixDQUFOO0FBQ0gsS0FKRCxNQUlPLElBQUlKLEdBQUcsS0FBSyxLQUFaLEVBQW1CO0FBQ3RCLFVBQUlRLFFBQVEsR0FBR2xDLE9BQU8sQ0FBQ3lCLFFBQUQsQ0FBdEI7O0FBQ0EsWUFBTVMsUUFBUSxDQUFFLEtBQUt4QixTQUFQLENBQWQ7QUFDSCxLQUhNLE1BR0E7QUFDSCxZQUFNLElBQUl5QixLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsUUFBTUYsVUFBTixDQUFpQkwsVUFBakIsRUFBNkJFLElBQTdCLEVBQW1DO0FBQy9CLFVBQU0zQixVQUFVLENBQUMyQixJQUFELEVBQU9NLEdBQUcsSUFBSSxLQUFLMUIsU0FBTCxDQUFlMkIsVUFBZixDQUEwQlQsVUFBMUIsRUFBc0NRLEdBQXRDLENBQWQsQ0FBaEI7QUFDSDs7QUF6Q2tCOztBQTRDdkJFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpDLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBmcywgZWFjaEFzeW5jXywgcGFzY2FsQ2FzZSwgcXVvdGUgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbi8qKlxuICogTXlTUUwgbWlncmF0aW9uLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIE1vbmdvRGJNaWdyYXRpb24ge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0Nvbm5lY3Rvcn0gY29ubmVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgc2NoZW1hTmFtZSwgY29ubmVjdG9yKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gY29udGV4dC5sb2dnZXI7XG4gICAgICAgIHRoaXMubW9kZWxQYXRoID0gY29udGV4dC5tb2RlbFBhdGg7XG4gICAgICAgIHRoaXMuc2NyaXB0U291cmNlUGF0aCA9IGNvbnRleHQuc2NyaXB0U291cmNlUGF0aDtcbiAgICAgICAgdGhpcy5zY2hlbWFOYW1lID0gc2NoZW1hTmFtZTtcbiAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBjb25uZWN0b3I7XG5cbiAgICAgICAgdGhpcy5kYlNjcmlwdFBhdGggPSBwYXRoLmpvaW4odGhpcy5zY3JpcHRTb3VyY2VQYXRoLCB0aGlzLmNvbm5lY3Rvci5kcml2ZXIsIHRoaXMuY29ubmVjdG9yLmRhdGFiYXNlKTtcbiAgICB9XG5cbiAgICBhc3luYyByZXNldF8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5leGVjdXRlXyhkYiA9PiBkYi5kcm9wRGF0YWJhc2UoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlXyhleHRyYU9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkXyhkYXRhRmlsZSkge1xuICAgICAgICBsZXQgZXh0ID0gcGF0aC5leHRuYW1lKGRhdGFGaWxlKTtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBwYXRoLmJhc2VuYW1lKGRhdGFGaWxlLCBleHQpO1xuXG4gICAgICAgIGlmIChleHQgPT09ICcuanNvbicpIHtcbiAgICAgICAgICAgIGxldCBkb2NzID0gZnMucmVhZEpzb25TeW5jKGRhdGFGaWxlLCB7ZW5jb2Rpbmc6ICd1dGY4J30pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9sb2FkRGF0YV8oY29sbGVjdGlvbiwgZG9jcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLmpzJykgeyAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZXhlY3V0b3IgPSByZXF1aXJlKGRhdGFGaWxlKTtcbiAgICAgICAgICAgIGF3YWl0IGV4ZWN1dG9yKCB0aGlzLmNvbm5lY3Rvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGRhdGEgZmlsZSBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfbG9hZERhdGFfKGNvbGxlY3Rpb24sIGRvY3MpIHsgXG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18oZG9jcywgZG9jID0+IHRoaXMuY29ubmVjdG9yLmluc2VydE9uZV8oY29sbGVjdGlvbiwgZG9jKSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbmdvRGJNaWdyYXRpb247Il19