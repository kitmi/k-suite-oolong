"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  pascalCase,
  quote
} = require('rk-utils');

class MongoDbMigration {
  constructor(context, schemaName, connector) {
    this.logger = context.logger;
    this.modelPath = context.modelPath;
    this.scriptSourcePath = context.scriptSourcePath;
    this.schemaName = schemaName;
    this.connector = connector;
    this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);
  }

  async reset_() {
    return this.connector.execute_(db => db.dropDatabase());
  }

  async create_(extraOptions) {}

  async load_(dataFile) {
    let ext = path.extname(dataFile);

    if (ext === '.json') {
      let data = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });
      await this._loadData_(data);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadData_(data) {
    await eachAsync_(data, (records, entityName) => {
      return eachAsync_(records, record => this.connector.insertOne_(entityName, record));
    });
  }

}

module.exports = MongoDbMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb24vbW9uZ29kYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImVhY2hBc3luY18iLCJwYXNjYWxDYXNlIiwicXVvdGUiLCJNb25nb0RiTWlncmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb250ZXh0Iiwic2NoZW1hTmFtZSIsImNvbm5lY3RvciIsImxvZ2dlciIsIm1vZGVsUGF0aCIsInNjcmlwdFNvdXJjZVBhdGgiLCJkYlNjcmlwdFBhdGgiLCJqb2luIiwiZHJpdmVyIiwiZGF0YWJhc2UiLCJyZXNldF8iLCJleGVjdXRlXyIsImRiIiwiZHJvcERhdGFiYXNlIiwiY3JlYXRlXyIsImV4dHJhT3B0aW9ucyIsImxvYWRfIiwiZGF0YUZpbGUiLCJleHQiLCJleHRuYW1lIiwiZGF0YSIsInJlYWRKc29uU3luYyIsImVuY29kaW5nIiwiX2xvYWREYXRhXyIsIkVycm9yIiwicmVjb3JkcyIsImVudGl0eU5hbWUiLCJyZWNvcmQiLCJpbnNlcnRPbmVfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLFVBQVQ7QUFBcUJDLEVBQUFBLFVBQXJCO0FBQWlDQyxFQUFBQTtBQUFqQyxJQUEyQ0wsT0FBTyxDQUFDLFVBQUQsQ0FBeEQ7O0FBTUEsTUFBTU0sZ0JBQU4sQ0FBdUI7QUFLbkJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLEVBQXNCQyxTQUF0QixFQUFpQztBQUN4QyxTQUFLQyxNQUFMLEdBQWNILE9BQU8sQ0FBQ0csTUFBdEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCSixPQUFPLENBQUNJLFNBQXpCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JMLE9BQU8sQ0FBQ0ssZ0JBQWhDO0FBQ0EsU0FBS0osVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUVBLFNBQUtJLFlBQUwsR0FBb0JmLElBQUksQ0FBQ2dCLElBQUwsQ0FBVSxLQUFLRixnQkFBZixFQUFpQyxLQUFLSCxTQUFMLENBQWVNLE1BQWhELEVBQXdELEtBQUtOLFNBQUwsQ0FBZU8sUUFBdkUsQ0FBcEI7QUFDSDs7QUFFRCxRQUFNQyxNQUFOLEdBQWU7QUFDWCxXQUFPLEtBQUtSLFNBQUwsQ0FBZVMsUUFBZixDQUF3QkMsRUFBRSxJQUFJQSxFQUFFLENBQUNDLFlBQUgsRUFBOUIsQ0FBUDtBQUNIOztBQUVELFFBQU1DLE9BQU4sQ0FBY0MsWUFBZCxFQUE0QixDQUUzQjs7QUFFRCxRQUFNQyxLQUFOLENBQVlDLFFBQVosRUFBc0I7QUFDbEIsUUFBSUMsR0FBRyxHQUFHM0IsSUFBSSxDQUFDNEIsT0FBTCxDQUFhRixRQUFiLENBQVY7O0FBRUEsUUFBSUMsR0FBRyxLQUFLLE9BQVosRUFBcUI7QUFDakIsVUFBSUUsSUFBSSxHQUFHMUIsRUFBRSxDQUFDMkIsWUFBSCxDQUFnQkosUUFBaEIsRUFBMEI7QUFBQ0ssUUFBQUEsUUFBUSxFQUFFO0FBQVgsT0FBMUIsQ0FBWDtBQUVBLFlBQU0sS0FBS0MsVUFBTCxDQUFnQkgsSUFBaEIsQ0FBTjtBQUNILEtBSkQsTUFJTztBQUNILFlBQU0sSUFBSUksS0FBSixDQUFVLCtCQUFWLENBQU47QUFDSDtBQUNKOztBQUVELFFBQU1ELFVBQU4sQ0FBaUJILElBQWpCLEVBQXVCO0FBQ25CLFVBQU16QixVQUFVLENBQUN5QixJQUFELEVBQU8sQ0FBQ0ssT0FBRCxFQUFVQyxVQUFWLEtBQXlCO0FBQzVDLGFBQU8vQixVQUFVLENBQUM4QixPQUFELEVBQVVFLE1BQU0sSUFBSSxLQUFLekIsU0FBTCxDQUFlMEIsVUFBZixDQUEwQkYsVUFBMUIsRUFBc0NDLE1BQXRDLENBQXBCLENBQWpCO0FBQ0gsS0FGZSxDQUFoQjtBQUdIOztBQXZDa0I7O0FBMEN2QkUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEMsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfLCBwYXNjYWxDYXNlLCBxdW90ZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuLyoqXG4gKiBNeVNRTCBtaWdyYXRpb24uXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgTW9uZ29EYk1pZ3JhdGlvbiB7XG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgICAqIEBwYXJhbSB7Q29ubmVjdG9yfSBjb25uZWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBzY2hlbWFOYW1lLCBjb25uZWN0b3IpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb250ZXh0LmxvZ2dlcjtcbiAgICAgICAgdGhpcy5tb2RlbFBhdGggPSBjb250ZXh0Lm1vZGVsUGF0aDtcbiAgICAgICAgdGhpcy5zY3JpcHRTb3VyY2VQYXRoID0gY29udGV4dC5zY3JpcHRTb3VyY2VQYXRoO1xuICAgICAgICB0aGlzLnNjaGVtYU5hbWUgPSBzY2hlbWFOYW1lO1xuICAgICAgICB0aGlzLmNvbm5lY3RvciA9IGNvbm5lY3RvcjtcblxuICAgICAgICB0aGlzLmRiU2NyaXB0UGF0aCA9IHBhdGguam9pbih0aGlzLnNjcmlwdFNvdXJjZVBhdGgsIHRoaXMuY29ubmVjdG9yLmRyaXZlciwgdGhpcy5jb25uZWN0b3IuZGF0YWJhc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc2V0XygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmV4ZWN1dGVfKGRiID0+IGRiLmRyb3BEYXRhYmFzZSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVfKGV4dHJhT3B0aW9ucykgeyAgICAgICAgXG4gICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRfKGRhdGFGaWxlKSB7XG4gICAgICAgIGxldCBleHQgPSBwYXRoLmV4dG5hbWUoZGF0YUZpbGUpO1xuXG4gICAgICAgIGlmIChleHQgPT09ICcuanNvbicpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gZnMucmVhZEpzb25TeW5jKGRhdGFGaWxlLCB7ZW5jb2Rpbmc6ICd1dGY4J30pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9sb2FkRGF0YV8oZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGRhdGEgZmlsZSBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfbG9hZERhdGFfKGRhdGEpIHsgXG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18oZGF0YSwgKHJlY29yZHMsIGVudGl0eU5hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlYWNoQXN5bmNfKHJlY29yZHMsIHJlY29yZCA9PiB0aGlzLmNvbm5lY3Rvci5pbnNlcnRPbmVfKGVudGl0eU5hbWUsIHJlY29yZCkpOyAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9uZ29EYk1pZ3JhdGlvbjsiXX0=