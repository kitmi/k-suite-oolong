"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  pascalCase,
  quote
} = require('rk-utils');

class MongoDbMigration {
  constructor(context, schemaName, connector) {
    this.logger = context.logger;
    this.modelPath = context.modelPath;
    this.scriptSourcePath = context.scriptSourcePath;
    this.schemaName = schemaName;
    this.connector = connector;
    this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);
  }

  async reset_() {
    return this.connector.execute_(db => db.dropDatabase());
  }

  async create_(extraOptions) {}

  async load_(dataFile) {
    let ext = path.extname(dataFile);
    let collection = path.basename(dataFile, ext);

    if (ext === '.json') {
      let docs = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });
      await this._loadData_(collection, docs);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadData_(collection, docs) {
    await eachAsync_(docs, doc => this.connector.insertOne_(collection, doc));
  }

}

module.exports = MongoDbMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb24vbW9uZ29kYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImVhY2hBc3luY18iLCJwYXNjYWxDYXNlIiwicXVvdGUiLCJNb25nb0RiTWlncmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb250ZXh0Iiwic2NoZW1hTmFtZSIsImNvbm5lY3RvciIsImxvZ2dlciIsIm1vZGVsUGF0aCIsInNjcmlwdFNvdXJjZVBhdGgiLCJkYlNjcmlwdFBhdGgiLCJqb2luIiwiZHJpdmVyIiwiZGF0YWJhc2UiLCJyZXNldF8iLCJleGVjdXRlXyIsImRiIiwiZHJvcERhdGFiYXNlIiwiY3JlYXRlXyIsImV4dHJhT3B0aW9ucyIsImxvYWRfIiwiZGF0YUZpbGUiLCJleHQiLCJleHRuYW1lIiwiY29sbGVjdGlvbiIsImJhc2VuYW1lIiwiZG9jcyIsInJlYWRKc29uU3luYyIsImVuY29kaW5nIiwiX2xvYWREYXRhXyIsIkVycm9yIiwiZG9jIiwiaW5zZXJ0T25lXyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsRUFBTDtBQUFTQyxFQUFBQSxVQUFUO0FBQXFCQyxFQUFBQSxVQUFyQjtBQUFpQ0MsRUFBQUE7QUFBakMsSUFBMkNMLE9BQU8sQ0FBQyxVQUFELENBQXhEOztBQU1BLE1BQU1NLGdCQUFOLENBQXVCO0FBS25CQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsVUFBVixFQUFzQkMsU0FBdEIsRUFBaUM7QUFDeEMsU0FBS0MsTUFBTCxHQUFjSCxPQUFPLENBQUNHLE1BQXRCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkosT0FBTyxDQUFDSSxTQUF6QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCTCxPQUFPLENBQUNLLGdCQUFoQztBQUNBLFNBQUtKLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFFQSxTQUFLSSxZQUFMLEdBQW9CZixJQUFJLENBQUNnQixJQUFMLENBQVUsS0FBS0YsZ0JBQWYsRUFBaUMsS0FBS0gsU0FBTCxDQUFlTSxNQUFoRCxFQUF3RCxLQUFLTixTQUFMLENBQWVPLFFBQXZFLENBQXBCO0FBQ0g7O0FBRUQsUUFBTUMsTUFBTixHQUFlO0FBQ1gsV0FBTyxLQUFLUixTQUFMLENBQWVTLFFBQWYsQ0FBd0JDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxZQUFILEVBQTlCLENBQVA7QUFDSDs7QUFFRCxRQUFNQyxPQUFOLENBQWNDLFlBQWQsRUFBNEIsQ0FFM0I7O0FBRUQsUUFBTUMsS0FBTixDQUFZQyxRQUFaLEVBQXNCO0FBQ2xCLFFBQUlDLEdBQUcsR0FBRzNCLElBQUksQ0FBQzRCLE9BQUwsQ0FBYUYsUUFBYixDQUFWO0FBQ0EsUUFBSUcsVUFBVSxHQUFHN0IsSUFBSSxDQUFDOEIsUUFBTCxDQUFjSixRQUFkLEVBQXdCQyxHQUF4QixDQUFqQjs7QUFFQSxRQUFJQSxHQUFHLEtBQUssT0FBWixFQUFxQjtBQUNqQixVQUFJSSxJQUFJLEdBQUc1QixFQUFFLENBQUM2QixZQUFILENBQWdCTixRQUFoQixFQUEwQjtBQUFDTyxRQUFBQSxRQUFRLEVBQUU7QUFBWCxPQUExQixDQUFYO0FBRUEsWUFBTSxLQUFLQyxVQUFMLENBQWdCTCxVQUFoQixFQUE0QkUsSUFBNUIsQ0FBTjtBQUNILEtBSkQsTUFJTztBQUNILFlBQU0sSUFBSUksS0FBSixDQUFVLCtCQUFWLENBQU47QUFDSDtBQUNKOztBQUVELFFBQU1ELFVBQU4sQ0FBaUJMLFVBQWpCLEVBQTZCRSxJQUE3QixFQUFtQztBQUMvQixVQUFNM0IsVUFBVSxDQUFDMkIsSUFBRCxFQUFPSyxHQUFHLElBQUksS0FBS3pCLFNBQUwsQ0FBZTBCLFVBQWYsQ0FBMEJSLFVBQTFCLEVBQXNDTyxHQUF0QyxDQUFkLENBQWhCO0FBQ0g7O0FBdENrQjs7QUF5Q3ZCRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQyxnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGVhY2hBc3luY18sIHBhc2NhbENhc2UsIHF1b3RlIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG4vKipcbiAqIE15U1FMIG1pZ3JhdGlvbi5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBNb25nb0RiTWlncmF0aW9uIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDb25uZWN0b3J9IGNvbm5lY3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHNjaGVtYU5hbWUsIGNvbm5lY3Rvcikge1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGNvbnRleHQubG9nZ2VyO1xuICAgICAgICB0aGlzLm1vZGVsUGF0aCA9IGNvbnRleHQubW9kZWxQYXRoO1xuICAgICAgICB0aGlzLnNjcmlwdFNvdXJjZVBhdGggPSBjb250ZXh0LnNjcmlwdFNvdXJjZVBhdGg7XG4gICAgICAgIHRoaXMuc2NoZW1hTmFtZSA9IHNjaGVtYU5hbWU7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yO1xuXG4gICAgICAgIHRoaXMuZGJTY3JpcHRQYXRoID0gcGF0aC5qb2luKHRoaXMuc2NyaXB0U291cmNlUGF0aCwgdGhpcy5jb25uZWN0b3IuZHJpdmVyLCB0aGlzLmNvbm5lY3Rvci5kYXRhYmFzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVzZXRfKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IuZXhlY3V0ZV8oZGIgPT4gZGIuZHJvcERhdGFiYXNlKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZV8oZXh0cmFPcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZF8oZGF0YUZpbGUpIHtcbiAgICAgICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShkYXRhRmlsZSk7XG4gICAgICAgIGxldCBjb2xsZWN0aW9uID0gcGF0aC5iYXNlbmFtZShkYXRhRmlsZSwgZXh0KTtcblxuICAgICAgICBpZiAoZXh0ID09PSAnLmpzb24nKSB7XG4gICAgICAgICAgICBsZXQgZG9jcyA9IGZzLnJlYWRKc29uU3luYyhkYXRhRmlsZSwge2VuY29kaW5nOiAndXRmOCd9KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbG9hZERhdGFfKGNvbGxlY3Rpb24sIGRvY3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBkYXRhIGZpbGUgZm9ybWF0LicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2xvYWREYXRhXyhjb2xsZWN0aW9uLCBkb2NzKSB7IFxuICAgICAgICBhd2FpdCBlYWNoQXN5bmNfKGRvY3MsIGRvYyA9PiB0aGlzLmNvbm5lY3Rvci5pbnNlcnRPbmVfKGNvbGxlY3Rpb24sIGRvYykpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb25nb0RiTWlncmF0aW9uOyJdfQ==