"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  pascalCase,
  quote
} = require('rk-utils');

class MySQLMigration {
  constructor(context, schemaName, connector) {
    this.logger = context.logger;
    this.modelPath = context.modelPath;
    this.scriptSourcePath = context.scriptSourcePath;
    this.schemaName = schemaName;
    this.connector = connector;
    this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);
  }

  async reset_() {
    return this.connector.execute_(`DROP DATABASE IF EXISTS ??`, [this.connector.database], {
      createDatabase: true
    });
  }

  async create_(extraOptions) {
    let sqlFiles = ['entities.sql', 'relations.sql', 'procedures.sql'];
    let sqlCreate = 'CREATE DATABASE IF NOT EXISTS ??';

    if (extraOptions && !_.isEmpty(extraOptions.db)) {
      sqlCreate += ' ' + _.reduce(extraOptions.db, (r, v, k) => {
        return r + ' ' + _.upperCase(k) + ' ' + quote(v.toString(), '"');
      }, '');
    }

    let result = await this.connector.execute_(sqlCreate, [this.connector.database], {
      createDatabase: true
    });

    if (result.warningStatus == 0) {
      this.logger.log('info', `Created database "${this.connector.database}".`);
    } else {
      this.logger.log('warn', `Database "${this.connector.database}" exists.`);
    }

    return eachAsync_(sqlFiles, async file => {
      let sqlFile = path.join(this.dbScriptPath, file);

      if (!fs.existsSync(sqlFile)) {
        throw new Error(`Database script "${sqlFile}" not found. Try run "oolong build" first.`);
      }

      let sql = _.trim(fs.readFileSync(sqlFile, {
        encoding: 'utf8'
      }));

      if (sql) {
        result = _.castArray((await this.connector.execute_(sql, null, {
          multipleStatements: 1
        })));

        let warningRows = _.reduce(result, (sum, row) => {
          sum += row.warningStatus;
          return sum;
        }, 0);

        if (warningRows > 0) {
          this.logger.log('warn', `${warningRows} warning(s) reported while running "${file}".`);
        } else {
          this.logger.log('info', `Database scripts "${sqlFile}" run successfully.`);
        }
      }
    });
  }

  async load_(dataFile) {
    let ext = path.extname(dataFile);

    if (ext === '.json') {
      let data = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });

      if (Array.isArray(data)) {
        let entityName = path.basename(dataFile, ext);
        await this._loadSingleEntityRecords_(entityName, data);
      } else {
        await this._loadMultiEntityRecords_(data);
      }
    } else if (ext === '.sql') {
      let sql = fs.readFileSync(dataFile, {
        encoding: 'utf8'
      });
      let result = await this.connector.execute_(sql, null, {
        multipleStatements: 1
      });
      this.logger.log('verbose', `Executed SQL file: ${dataFile}`, result);
    } else if (ext === '.xlsx') {
      const Excel = require('exceljs');

      let workbook = new Excel.Workbook();
      await workbook.xlsx.readFile(dataFile);
      let data = {};
      workbook.eachSheet((worksheet, sheetId) => {
        let colKeys;
        let entityName = worksheet.name;
        let entityData = [];
        data[entityName] = entityData;
        worksheet.eachRow(function (row, rowNumber) {
          if (!colKeys) {
            colKeys = _.drop(row.values);
          } else {
            let record = _.fromPairs(_.zip(colKeys, _.drop(row.values)));

            entityData.push(record);
          }
        });
      });
      await this._loadMultiEntityRecords_(data);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadMultiEntityRecords_(data) {
    let className = pascalCase(this.schemaName);

    let Db = require(path.join(this.modelPath, className));

    let db = new Db(this.connector.connectionString, this.connector.options);

    try {
      await db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');
      await eachAsync_(data, async (records, entityName) => {
        let items = Array.isArray(records) ? records : [records];
        return eachAsync_(items, item => db.model(entityName).create_(item, {
          $migration: true
        }));
      });
    } catch (error) {
      throw error;
    } finally {
      await db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');
      await db.close_();
    }
  }

  async _loadSingleEntityRecords_(entityName, data) {
    let className = pascalCase(this.schemaName);

    let Db = require(path.join(this.modelPath, className));

    let db = new Db(this.connector.connectionString, this.connector.options);

    try {
      await db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');
      await eachAsync_(data, item => db.model(entityName).create_(item, {
        $migration: true
      }));
    } catch (error) {
      throw error;
    } finally {
      await db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');
      await db.close_();
    }
  }

}

module.exports = MySQLMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb24vbXlzcWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZnMiLCJlYWNoQXN5bmNfIiwicGFzY2FsQ2FzZSIsInF1b3RlIiwiTXlTUUxNaWdyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbnRleHQiLCJzY2hlbWFOYW1lIiwiY29ubmVjdG9yIiwibG9nZ2VyIiwibW9kZWxQYXRoIiwic2NyaXB0U291cmNlUGF0aCIsImRiU2NyaXB0UGF0aCIsImpvaW4iLCJkcml2ZXIiLCJkYXRhYmFzZSIsInJlc2V0XyIsImV4ZWN1dGVfIiwiY3JlYXRlRGF0YWJhc2UiLCJjcmVhdGVfIiwiZXh0cmFPcHRpb25zIiwic3FsRmlsZXMiLCJzcWxDcmVhdGUiLCJpc0VtcHR5IiwiZGIiLCJyZWR1Y2UiLCJyIiwidiIsImsiLCJ1cHBlckNhc2UiLCJ0b1N0cmluZyIsInJlc3VsdCIsIndhcm5pbmdTdGF0dXMiLCJsb2ciLCJmaWxlIiwic3FsRmlsZSIsImV4aXN0c1N5bmMiLCJFcnJvciIsInNxbCIsInRyaW0iLCJyZWFkRmlsZVN5bmMiLCJlbmNvZGluZyIsImNhc3RBcnJheSIsIm11bHRpcGxlU3RhdGVtZW50cyIsIndhcm5pbmdSb3dzIiwic3VtIiwicm93IiwibG9hZF8iLCJkYXRhRmlsZSIsImV4dCIsImV4dG5hbWUiLCJkYXRhIiwicmVhZEpzb25TeW5jIiwiQXJyYXkiLCJpc0FycmF5IiwiZW50aXR5TmFtZSIsImJhc2VuYW1lIiwiX2xvYWRTaW5nbGVFbnRpdHlSZWNvcmRzXyIsIl9sb2FkTXVsdGlFbnRpdHlSZWNvcmRzXyIsIkV4Y2VsIiwid29ya2Jvb2siLCJXb3JrYm9vayIsInhsc3giLCJyZWFkRmlsZSIsImVhY2hTaGVldCIsIndvcmtzaGVldCIsInNoZWV0SWQiLCJjb2xLZXlzIiwibmFtZSIsImVudGl0eURhdGEiLCJlYWNoUm93Iiwicm93TnVtYmVyIiwiZHJvcCIsInZhbHVlcyIsInJlY29yZCIsImZyb21QYWlycyIsInppcCIsInB1c2giLCJjbGFzc05hbWUiLCJEYiIsImNvbm5lY3Rpb25TdHJpbmciLCJvcHRpb25zIiwicmVjb3JkcyIsIml0ZW1zIiwiaXRlbSIsIm1vZGVsIiwiJG1pZ3JhdGlvbiIsImVycm9yIiwiY2xvc2VfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLFVBQVQ7QUFBcUJDLEVBQUFBLFVBQXJCO0FBQWlDQyxFQUFBQTtBQUFqQyxJQUEyQ0wsT0FBTyxDQUFDLFVBQUQsQ0FBeEQ7O0FBTUEsTUFBTU0sY0FBTixDQUFxQjtBQUtqQkMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLFVBQVYsRUFBc0JDLFNBQXRCLEVBQWlDO0FBQ3hDLFNBQUtDLE1BQUwsR0FBY0gsT0FBTyxDQUFDRyxNQUF0QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJKLE9BQU8sQ0FBQ0ksU0FBekI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QkwsT0FBTyxDQUFDSyxnQkFBaEM7QUFDQSxTQUFLSixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBRUEsU0FBS0ksWUFBTCxHQUFvQmYsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVLEtBQUtGLGdCQUFmLEVBQWlDLEtBQUtILFNBQUwsQ0FBZU0sTUFBaEQsRUFBd0QsS0FBS04sU0FBTCxDQUFlTyxRQUF2RSxDQUFwQjtBQUNIOztBQUVELFFBQU1DLE1BQU4sR0FBZTtBQUNYLFdBQU8sS0FBS1IsU0FBTCxDQUFlUyxRQUFmLENBQXlCLDRCQUF6QixFQUFzRCxDQUFFLEtBQUtULFNBQUwsQ0FBZU8sUUFBakIsQ0FBdEQsRUFBbUY7QUFBRUcsTUFBQUEsY0FBYyxFQUFFO0FBQWxCLEtBQW5GLENBQVA7QUFDSDs7QUFFRCxRQUFNQyxPQUFOLENBQWNDLFlBQWQsRUFBNEI7QUFDeEIsUUFBSUMsUUFBUSxHQUFHLENBQUUsY0FBRixFQUFrQixlQUFsQixFQUFtQyxnQkFBbkMsQ0FBZjtBQUVBLFFBQUlDLFNBQVMsR0FBRyxrQ0FBaEI7O0FBRUEsUUFBSUYsWUFBWSxJQUFJLENBQUNyQixDQUFDLENBQUN3QixPQUFGLENBQVVILFlBQVksQ0FBQ0ksRUFBdkIsQ0FBckIsRUFBaUQ7QUFDN0NGLE1BQUFBLFNBQVMsSUFBSSxNQUFNdkIsQ0FBQyxDQUFDMEIsTUFBRixDQUFTTCxZQUFZLENBQUNJLEVBQXRCLEVBQTBCLENBQUNFLENBQUQsRUFBSUMsQ0FBSixFQUFPQyxDQUFQLEtBQWE7QUFDdEQsZUFBT0YsQ0FBQyxHQUFHLEdBQUosR0FBVTNCLENBQUMsQ0FBQzhCLFNBQUYsQ0FBWUQsQ0FBWixDQUFWLEdBQTJCLEdBQTNCLEdBQWlDekIsS0FBSyxDQUFDd0IsQ0FBQyxDQUFDRyxRQUFGLEVBQUQsRUFBZSxHQUFmLENBQTdDO0FBQ0gsT0FGa0IsRUFFaEIsRUFGZ0IsQ0FBbkI7QUFHSDs7QUFFRCxRQUFJQyxNQUFNLEdBQUcsTUFBTSxLQUFLdkIsU0FBTCxDQUFlUyxRQUFmLENBQXdCSyxTQUF4QixFQUNmLENBQUUsS0FBS2QsU0FBTCxDQUFlTyxRQUFqQixDQURlLEVBRWY7QUFBRUcsTUFBQUEsY0FBYyxFQUFFO0FBQWxCLEtBRmUsQ0FBbkI7O0FBS0EsUUFBSWEsTUFBTSxDQUFDQyxhQUFQLElBQXdCLENBQTVCLEVBQStCO0FBQzNCLFdBQUt2QixNQUFMLENBQVl3QixHQUFaLENBQWdCLE1BQWhCLEVBQXlCLHFCQUFvQixLQUFLekIsU0FBTCxDQUFlTyxRQUFTLElBQXJFO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsV0FBS04sTUFBTCxDQUFZd0IsR0FBWixDQUFnQixNQUFoQixFQUF5QixhQUFZLEtBQUt6QixTQUFMLENBQWVPLFFBQVMsV0FBN0Q7QUFDSDs7QUFFRCxXQUFPZCxVQUFVLENBQUNvQixRQUFELEVBQVcsTUFBT2EsSUFBUCxJQUFnQjtBQUN4QyxVQUFJQyxPQUFPLEdBQUd0QyxJQUFJLENBQUNnQixJQUFMLENBQVUsS0FBS0QsWUFBZixFQUE2QnNCLElBQTdCLENBQWQ7O0FBQ0EsVUFBSSxDQUFDbEMsRUFBRSxDQUFDb0MsVUFBSCxDQUFjRCxPQUFkLENBQUwsRUFBNkI7QUFDekIsY0FBTSxJQUFJRSxLQUFKLENBQVcsb0JBQW1CRixPQUFRLDRDQUF0QyxDQUFOO0FBQ0g7O0FBRUQsVUFBSUcsR0FBRyxHQUFHdkMsQ0FBQyxDQUFDd0MsSUFBRixDQUFPdkMsRUFBRSxDQUFDd0MsWUFBSCxDQUFnQkwsT0FBaEIsRUFBeUI7QUFBRU0sUUFBQUEsUUFBUSxFQUFFO0FBQVosT0FBekIsQ0FBUCxDQUFWOztBQUNBLFVBQUlILEdBQUosRUFBUztBQUNMUCxRQUFBQSxNQUFNLEdBQUdoQyxDQUFDLENBQUMyQyxTQUFGLEVBQVksTUFBTSxLQUFLbEMsU0FBTCxDQUFlUyxRQUFmLENBQXdCcUIsR0FBeEIsRUFBNkIsSUFBN0IsRUFBbUM7QUFBRUssVUFBQUEsa0JBQWtCLEVBQUU7QUFBdEIsU0FBbkMsQ0FBbEIsRUFBVDs7QUFFQSxZQUFJQyxXQUFXLEdBQUc3QyxDQUFDLENBQUMwQixNQUFGLENBQVNNLE1BQVQsRUFBaUIsQ0FBQ2MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDN0NELFVBQUFBLEdBQUcsSUFBSUMsR0FBRyxDQUFDZCxhQUFYO0FBQ0EsaUJBQU9hLEdBQVA7QUFDSCxTQUhpQixFQUdmLENBSGUsQ0FBbEI7O0FBS0EsWUFBSUQsV0FBVyxHQUFHLENBQWxCLEVBQXFCO0FBQ2pCLGVBQUtuQyxNQUFMLENBQVl3QixHQUFaLENBQWdCLE1BQWhCLEVBQXlCLEdBQUVXLFdBQVksdUNBQXNDVixJQUFLLElBQWxGO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsZUFBS3pCLE1BQUwsQ0FBWXdCLEdBQVosQ0FBZ0IsTUFBaEIsRUFBeUIscUJBQW9CRSxPQUFRLHFCQUFyRDtBQUNIO0FBQ0o7QUFDSixLQXJCZ0IsQ0FBakI7QUFzQkg7O0FBRUQsUUFBTVksS0FBTixDQUFZQyxRQUFaLEVBQXNCO0FBQ2xCLFFBQUlDLEdBQUcsR0FBR3BELElBQUksQ0FBQ3FELE9BQUwsQ0FBYUYsUUFBYixDQUFWOztBQUVBLFFBQUlDLEdBQUcsS0FBSyxPQUFaLEVBQXFCO0FBQ2pCLFVBQUlFLElBQUksR0FBR25ELEVBQUUsQ0FBQ29ELFlBQUgsQ0FBZ0JKLFFBQWhCLEVBQTBCO0FBQUNQLFFBQUFBLFFBQVEsRUFBRTtBQUFYLE9BQTFCLENBQVg7O0FBRUEsVUFBSVksS0FBSyxDQUFDQyxPQUFOLENBQWNILElBQWQsQ0FBSixFQUF5QjtBQUNyQixZQUFJSSxVQUFVLEdBQUcxRCxJQUFJLENBQUMyRCxRQUFMLENBQWNSLFFBQWQsRUFBd0JDLEdBQXhCLENBQWpCO0FBQ0EsY0FBTSxLQUFLUSx5QkFBTCxDQUErQkYsVUFBL0IsRUFBMkNKLElBQTNDLENBQU47QUFDSCxPQUhELE1BR087QUFDSCxjQUFNLEtBQUtPLHdCQUFMLENBQThCUCxJQUE5QixDQUFOO0FBQ0g7QUFDSixLQVRELE1BU08sSUFBSUYsR0FBRyxLQUFLLE1BQVosRUFBb0I7QUFDdkIsVUFBSVgsR0FBRyxHQUFHdEMsRUFBRSxDQUFDd0MsWUFBSCxDQUFnQlEsUUFBaEIsRUFBMEI7QUFBQ1AsUUFBQUEsUUFBUSxFQUFFO0FBQVgsT0FBMUIsQ0FBVjtBQUNBLFVBQUlWLE1BQU0sR0FBRyxNQUFNLEtBQUt2QixTQUFMLENBQWVTLFFBQWYsQ0FBd0JxQixHQUF4QixFQUE2QixJQUE3QixFQUFtQztBQUFFSyxRQUFBQSxrQkFBa0IsRUFBRTtBQUF0QixPQUFuQyxDQUFuQjtBQUNBLFdBQUtsQyxNQUFMLENBQVl3QixHQUFaLENBQWdCLFNBQWhCLEVBQTRCLHNCQUFxQmUsUUFBUyxFQUExRCxFQUE2RGpCLE1BQTdEO0FBQ0gsS0FKTSxNQUlBLElBQUlrQixHQUFHLEtBQUssT0FBWixFQUFxQjtBQUV4QixZQUFNVSxLQUFLLEdBQUc3RCxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQSxVQUFJOEQsUUFBUSxHQUFHLElBQUlELEtBQUssQ0FBQ0UsUUFBVixFQUFmO0FBQ0EsWUFBTUQsUUFBUSxDQUFDRSxJQUFULENBQWNDLFFBQWQsQ0FBdUJmLFFBQXZCLENBQU47QUFFQSxVQUFJRyxJQUFJLEdBQUcsRUFBWDtBQUVBUyxNQUFBQSxRQUFRLENBQUNJLFNBQVQsQ0FBbUIsQ0FBQ0MsU0FBRCxFQUFZQyxPQUFaLEtBQXdCO0FBQ3ZDLFlBQUlDLE9BQUo7QUFFQSxZQUFJWixVQUFVLEdBQUdVLFNBQVMsQ0FBQ0csSUFBM0I7QUFDQSxZQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFDQWxCLFFBQUFBLElBQUksQ0FBQ0ksVUFBRCxDQUFKLEdBQW1CYyxVQUFuQjtBQUVBSixRQUFBQSxTQUFTLENBQUNLLE9BQVYsQ0FBa0IsVUFBU3hCLEdBQVQsRUFBY3lCLFNBQWQsRUFBeUI7QUFFdkMsY0FBSSxDQUFDSixPQUFMLEVBQWM7QUFDVkEsWUFBQUEsT0FBTyxHQUFHcEUsQ0FBQyxDQUFDeUUsSUFBRixDQUFPMUIsR0FBRyxDQUFDMkIsTUFBWCxDQUFWO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsZ0JBQUlDLE1BQU0sR0FBRzNFLENBQUMsQ0FBQzRFLFNBQUYsQ0FBWTVFLENBQUMsQ0FBQzZFLEdBQUYsQ0FBTVQsT0FBTixFQUFlcEUsQ0FBQyxDQUFDeUUsSUFBRixDQUFPMUIsR0FBRyxDQUFDMkIsTUFBWCxDQUFmLENBQVosQ0FBYjs7QUFDQUosWUFBQUEsVUFBVSxDQUFDUSxJQUFYLENBQWdCSCxNQUFoQjtBQUNIO0FBQ0osU0FSRDtBQVNILE9BaEJEO0FBa0JBLFlBQU0sS0FBS2hCLHdCQUFMLENBQThCUCxJQUE5QixDQUFOO0FBQ0gsS0EzQk0sTUEyQkE7QUFDSCxZQUFNLElBQUlkLEtBQUosQ0FBVSwrQkFBVixDQUFOO0FBQ0g7QUFDSjs7QUFFRCxRQUFNcUIsd0JBQU4sQ0FBK0JQLElBQS9CLEVBQXFDO0FBQ2pDLFFBQUkyQixTQUFTLEdBQUc1RSxVQUFVLENBQUMsS0FBS0ssVUFBTixDQUExQjs7QUFDQSxRQUFJd0UsRUFBRSxHQUFHakYsT0FBTyxDQUFDRCxJQUFJLENBQUNnQixJQUFMLENBQVUsS0FBS0gsU0FBZixFQUEwQm9FLFNBQTFCLENBQUQsQ0FBaEI7O0FBQ0EsUUFBSXRELEVBQUUsR0FBRyxJQUFJdUQsRUFBSixDQUFPLEtBQUt2RSxTQUFMLENBQWV3RSxnQkFBdEIsRUFBd0MsS0FBS3hFLFNBQUwsQ0FBZXlFLE9BQXZELENBQVQ7O0FBRUEsUUFBSTtBQUNBLFlBQU16RCxFQUFFLENBQUNoQixTQUFILENBQWFTLFFBQWIsQ0FBc0IsMkJBQXRCLENBQU47QUFFQSxZQUFNaEIsVUFBVSxDQUFDa0QsSUFBRCxFQUFPLE9BQU8rQixPQUFQLEVBQWdCM0IsVUFBaEIsS0FBK0I7QUFDbEQsWUFBSTRCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsT0FBTixDQUFjNEIsT0FBZCxJQUF5QkEsT0FBekIsR0FBbUMsQ0FBRUEsT0FBRixDQUEvQztBQUNBLGVBQU9qRixVQUFVLENBQUNrRixLQUFELEVBQVFDLElBQUksSUFBSTVELEVBQUUsQ0FBQzZELEtBQUgsQ0FBUzlCLFVBQVQsRUFBcUJwQyxPQUFyQixDQUE2QmlFLElBQTdCLEVBQW1DO0FBQUVFLFVBQUFBLFVBQVUsRUFBRTtBQUFkLFNBQW5DLENBQWhCLENBQWpCO0FBQ0gsT0FIZSxDQUFoQjtBQUlILEtBUEQsQ0FPRSxPQUFPQyxLQUFQLEVBQWM7QUFDWixZQUFNQSxLQUFOO0FBQ0gsS0FURCxTQVNVO0FBQ04sWUFBTS9ELEVBQUUsQ0FBQ2hCLFNBQUgsQ0FBYVMsUUFBYixDQUFzQiwyQkFBdEIsQ0FBTjtBQUNBLFlBQU1PLEVBQUUsQ0FBQ2dFLE1BQUgsRUFBTjtBQUNIO0FBQ0o7O0FBRUQsUUFBTS9CLHlCQUFOLENBQWdDRixVQUFoQyxFQUE0Q0osSUFBNUMsRUFBa0Q7QUFDOUMsUUFBSTJCLFNBQVMsR0FBRzVFLFVBQVUsQ0FBQyxLQUFLSyxVQUFOLENBQTFCOztBQUNBLFFBQUl3RSxFQUFFLEdBQUdqRixPQUFPLENBQUNELElBQUksQ0FBQ2dCLElBQUwsQ0FBVSxLQUFLSCxTQUFmLEVBQTBCb0UsU0FBMUIsQ0FBRCxDQUFoQjs7QUFDQSxRQUFJdEQsRUFBRSxHQUFHLElBQUl1RCxFQUFKLENBQU8sS0FBS3ZFLFNBQUwsQ0FBZXdFLGdCQUF0QixFQUF3QyxLQUFLeEUsU0FBTCxDQUFleUUsT0FBdkQsQ0FBVDs7QUFFQSxRQUFJO0FBQ0EsWUFBTXpELEVBQUUsQ0FBQ2hCLFNBQUgsQ0FBYVMsUUFBYixDQUFzQiwyQkFBdEIsQ0FBTjtBQUVBLFlBQU1oQixVQUFVLENBQUNrRCxJQUFELEVBQU9pQyxJQUFJLElBQUk1RCxFQUFFLENBQUM2RCxLQUFILENBQVM5QixVQUFULEVBQXFCcEMsT0FBckIsQ0FBNkJpRSxJQUE3QixFQUFtQztBQUFFRSxRQUFBQSxVQUFVLEVBQUU7QUFBZCxPQUFuQyxDQUFmLENBQWhCO0FBQ0gsS0FKRCxDQUlFLE9BQU9DLEtBQVAsRUFBYztBQUNaLFlBQU1BLEtBQU47QUFDSCxLQU5ELFNBTVU7QUFDTixZQUFNL0QsRUFBRSxDQUFDaEIsU0FBSCxDQUFhUyxRQUFiLENBQXNCLDJCQUF0QixDQUFOO0FBQ0EsWUFBTU8sRUFBRSxDQUFDZ0UsTUFBSCxFQUFOO0FBQ0g7QUFDSjs7QUFwSmdCOztBQXVKckJDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRGLGNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfLCBwYXNjYWxDYXNlLCBxdW90ZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuLyoqXG4gKiBNeVNRTCBtaWdyYXRpb24uXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgTXlTUUxNaWdyYXRpb24ge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0Nvbm5lY3Rvcn0gY29ubmVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgc2NoZW1hTmFtZSwgY29ubmVjdG9yKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gY29udGV4dC5sb2dnZXI7XG4gICAgICAgIHRoaXMubW9kZWxQYXRoID0gY29udGV4dC5tb2RlbFBhdGg7XG4gICAgICAgIHRoaXMuc2NyaXB0U291cmNlUGF0aCA9IGNvbnRleHQuc2NyaXB0U291cmNlUGF0aDtcbiAgICAgICAgdGhpcy5zY2hlbWFOYW1lID0gc2NoZW1hTmFtZTtcbiAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBjb25uZWN0b3I7XG5cbiAgICAgICAgdGhpcy5kYlNjcmlwdFBhdGggPSBwYXRoLmpvaW4odGhpcy5zY3JpcHRTb3VyY2VQYXRoLCB0aGlzLmNvbm5lY3Rvci5kcml2ZXIsIHRoaXMuY29ubmVjdG9yLmRhdGFiYXNlKTtcbiAgICB9XG5cbiAgICBhc3luYyByZXNldF8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5leGVjdXRlXyhgRFJPUCBEQVRBQkFTRSBJRiBFWElTVFMgPz9gLCBbIHRoaXMuY29ubmVjdG9yLmRhdGFiYXNlIF0sIHsgY3JlYXRlRGF0YWJhc2U6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlXyhleHRyYU9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBsZXQgc3FsRmlsZXMgPSBbICdlbnRpdGllcy5zcWwnLCAncmVsYXRpb25zLnNxbCcsICdwcm9jZWR1cmVzLnNxbCcgXTtcblxuICAgICAgICBsZXQgc3FsQ3JlYXRlID0gJ0NSRUFURSBEQVRBQkFTRSBJRiBOT1QgRVhJU1RTID8/JztcblxuICAgICAgICBpZiAoZXh0cmFPcHRpb25zICYmICFfLmlzRW1wdHkoZXh0cmFPcHRpb25zLmRiKSkge1xuICAgICAgICAgICAgc3FsQ3JlYXRlICs9ICcgJyArIF8ucmVkdWNlKGV4dHJhT3B0aW9ucy5kYiwgKHIsIHYsIGspID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gciArICcgJyArIF8udXBwZXJDYXNlKGspICsgJyAnICsgcXVvdGUodi50b1N0cmluZygpLCAnXCInKTtcbiAgICAgICAgICAgIH0sICcnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29ubmVjdG9yLmV4ZWN1dGVfKHNxbENyZWF0ZSwgXG4gICAgICAgICAgICBbIHRoaXMuY29ubmVjdG9yLmRhdGFiYXNlIF0sIFxuICAgICAgICAgICAgeyBjcmVhdGVEYXRhYmFzZTogdHJ1ZSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lndhcm5pbmdTdGF0dXMgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdpbmZvJywgYENyZWF0ZWQgZGF0YWJhc2UgXCIke3RoaXMuY29ubmVjdG9yLmRhdGFiYXNlfVwiLmApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCd3YXJuJywgYERhdGFiYXNlIFwiJHt0aGlzLmNvbm5lY3Rvci5kYXRhYmFzZX1cIiBleGlzdHMuYCk7XG4gICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhzcWxGaWxlcywgYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgICAgICAgIGxldCBzcWxGaWxlID0gcGF0aC5qb2luKHRoaXMuZGJTY3JpcHRQYXRoLCBmaWxlKTtcbiAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhzcWxGaWxlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGF0YWJhc2Ugc2NyaXB0IFwiJHtzcWxGaWxlfVwiIG5vdCBmb3VuZC4gVHJ5IHJ1biBcIm9vbG9uZyBidWlsZFwiIGZpcnN0LmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgc3FsID0gXy50cmltKGZzLnJlYWRGaWxlU3luYyhzcWxGaWxlLCB7IGVuY29kaW5nOiAndXRmOCcgfSkpO1xuICAgICAgICAgICAgaWYgKHNxbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF8uY2FzdEFycmF5KGF3YWl0IHRoaXMuY29ubmVjdG9yLmV4ZWN1dGVfKHNxbCwgbnVsbCwgeyBtdWx0aXBsZVN0YXRlbWVudHM6IDEgfSkpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHdhcm5pbmdSb3dzID0gXy5yZWR1Y2UocmVzdWx0LCAoc3VtLCByb3cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3VtICs9IHJvdy53YXJuaW5nU3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdSb3dzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ3dhcm4nLCBgJHt3YXJuaW5nUm93c30gd2FybmluZyhzKSByZXBvcnRlZCB3aGlsZSBydW5uaW5nIFwiJHtmaWxlfVwiLmApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygnaW5mbycsIGBEYXRhYmFzZSBzY3JpcHRzIFwiJHtzcWxGaWxlfVwiIHJ1biBzdWNjZXNzZnVsbHkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkXyhkYXRhRmlsZSkge1xuICAgICAgICBsZXQgZXh0ID0gcGF0aC5leHRuYW1lKGRhdGFGaWxlKTtcblxuICAgICAgICBpZiAoZXh0ID09PSAnLmpzb24nKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IGZzLnJlYWRKc29uU3luYyhkYXRhRmlsZSwge2VuY29kaW5nOiAndXRmOCd9KTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW50aXR5TmFtZSA9IHBhdGguYmFzZW5hbWUoZGF0YUZpbGUsIGV4dCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbG9hZFNpbmdsZUVudGl0eVJlY29yZHNfKGVudGl0eU5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9sb2FkTXVsdGlFbnRpdHlSZWNvcmRzXyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHQgPT09ICcuc3FsJykge1xuICAgICAgICAgICAgbGV0IHNxbCA9IGZzLnJlYWRGaWxlU3luYyhkYXRhRmlsZSwge2VuY29kaW5nOiAndXRmOCd9KTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLmNvbm5lY3Rvci5leGVjdXRlXyhzcWwsIG51bGwsIHsgbXVsdGlwbGVTdGF0ZW1lbnRzOiAxIH0pO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCd2ZXJib3NlJywgYEV4ZWN1dGVkIFNRTCBmaWxlOiAke2RhdGFGaWxlfWAsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLnhsc3gnKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IEV4Y2VsID0gcmVxdWlyZSgnZXhjZWxqcycpO1xuICAgICAgICAgICAgbGV0IHdvcmtib29rID0gbmV3IEV4Y2VsLldvcmtib29rKCk7XG4gICAgICAgICAgICBhd2FpdCB3b3JrYm9vay54bHN4LnJlYWRGaWxlKGRhdGFGaWxlKTsgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHt9O1xuXG4gICAgICAgICAgICB3b3JrYm9vay5lYWNoU2hlZXQoKHdvcmtzaGVldCwgc2hlZXRJZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2xLZXlzO1xuXG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eU5hbWUgPSB3b3Jrc2hlZXQubmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgZW50aXR5RGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIGRhdGFbZW50aXR5TmFtZV0gPSBlbnRpdHlEYXRhO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdvcmtzaGVldC5lYWNoUm93KGZ1bmN0aW9uKHJvdywgcm93TnVtYmVyKSB7ICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2xLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xLZXlzID0gXy5kcm9wKHJvdy52YWx1ZXMpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWNvcmQgPSBfLmZyb21QYWlycyhfLnppcChjb2xLZXlzLCBfLmRyb3Aocm93LnZhbHVlcykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eURhdGEucHVzaChyZWNvcmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbG9hZE11bHRpRW50aXR5UmVjb3Jkc18oZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGRhdGEgZmlsZSBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfbG9hZE11bHRpRW50aXR5UmVjb3Jkc18oZGF0YSkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lID0gcGFzY2FsQ2FzZSh0aGlzLnNjaGVtYU5hbWUpO1xuICAgICAgICBsZXQgRGIgPSByZXF1aXJlKHBhdGguam9pbih0aGlzLm1vZGVsUGF0aCwgY2xhc3NOYW1lKSk7XG4gICAgICAgIGxldCBkYiA9IG5ldyBEYih0aGlzLmNvbm5lY3Rvci5jb25uZWN0aW9uU3RyaW5nLCB0aGlzLmNvbm5lY3Rvci5vcHRpb25zKTsgICAgXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRiLmNvbm5lY3Rvci5leGVjdXRlXygnU0VUIEZPUkVJR05fS0VZX0NIRUNLUz0wOycpO1xuXG4gICAgICAgICAgICBhd2FpdCBlYWNoQXN5bmNfKGRhdGEsIGFzeW5jIChyZWNvcmRzLCBlbnRpdHlOYW1lKSA9PiB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IEFycmF5LmlzQXJyYXkocmVjb3JkcykgPyByZWNvcmRzIDogWyByZWNvcmRzIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oaXRlbXMsIGl0ZW0gPT4gZGIubW9kZWwoZW50aXR5TmFtZSkuY3JlYXRlXyhpdGVtLCB7ICRtaWdyYXRpb246IHRydWUgfSkpOyAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgYXdhaXQgZGIuY29ubmVjdG9yLmV4ZWN1dGVfKCdTRVQgRk9SRUlHTl9LRVlfQ0hFQ0tTPTE7Jyk7XG4gICAgICAgICAgICBhd2FpdCBkYi5jbG9zZV8oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9sb2FkU2luZ2xlRW50aXR5UmVjb3Jkc18oZW50aXR5TmFtZSwgZGF0YSkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lID0gcGFzY2FsQ2FzZSh0aGlzLnNjaGVtYU5hbWUpO1xuICAgICAgICBsZXQgRGIgPSByZXF1aXJlKHBhdGguam9pbih0aGlzLm1vZGVsUGF0aCwgY2xhc3NOYW1lKSk7XG4gICAgICAgIGxldCBkYiA9IG5ldyBEYih0aGlzLmNvbm5lY3Rvci5jb25uZWN0aW9uU3RyaW5nLCB0aGlzLmNvbm5lY3Rvci5vcHRpb25zKTsgICAgXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRiLmNvbm5lY3Rvci5leGVjdXRlXygnU0VUIEZPUkVJR05fS0VZX0NIRUNLUz0wOycpO1xuXG4gICAgICAgICAgICBhd2FpdCBlYWNoQXN5bmNfKGRhdGEsIGl0ZW0gPT4gZGIubW9kZWwoZW50aXR5TmFtZSkuY3JlYXRlXyhpdGVtLCB7ICRtaWdyYXRpb246IHRydWUgfSkpOyAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGF3YWl0IGRiLmNvbm5lY3Rvci5leGVjdXRlXygnU0VUIEZPUkVJR05fS0VZX0NIRUNLUz0xOycpO1xuICAgICAgICAgICAgYXdhaXQgZGIuY2xvc2VfKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXlTUUxNaWdyYXRpb247Il19