"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  pascalCase,
  replaceAll,
  putIntoBucket
} = require('rk-utils');

const swig = require('swig-templates');

const OolTypes = require('../lang/OolTypes');

const JsLang = require('./util/ast.js');

const OolToAst = require('./util/oolToAst.js');

const Snippets = require('./dao/snippets');

const ChainableType = [OolToAst.AST_BLK_VALIDATOR_CALL, OolToAst.AST_BLK_PROCESSOR_CALL, OolToAst.AST_BLK_ACTIVATOR_CALL];

const getFieldName = t => t.split('.').pop();

const isChainable = (current, next) => ChainableType.indexOf(current.type) > -1 && current.target === next.target && next.type === current.type;

const chainCall = (lastBlock, lastType, currentBlock, currentType) => {
  if (lastBlock) {
    if (lastType === 'ValidatorCall') {
      if (!(currentType === 'ValidatorCall')) {
        throw new Error('Unexpected currentType');
      }

      currentBlock = JsLang.astBinExp(lastBlock, '&&', currentBlock);
    } else {
      if (!(currentType === 'ProcessorCall')) {
        throw new Error('Unexpected currentType: ' + currentType + ' last: ' + lastType);
      }

      currentBlock.arguments[0] = lastBlock;
    }
  }

  return currentBlock;
};

const asyncMethodNaming = name => name + '_';

const indentLines = (lines, indentation) => lines.split('\n').map((line, i) => i === 0 ? line : _.repeat(' ', indentation) + line).join('\n');

const OOL_MODIFIER_RETURN = {
  [OolTypes.Modifier.VALIDATOR]: () => [JsLang.astReturn(true)],
  [OolTypes.Modifier.PROCESSOR]: args => [JsLang.astReturn(JsLang.astId(args[0]))],
  [OolTypes.Modifier.ACTIVATOR]: () => [JsLang.astReturn(JsLang.astId("undefined"))]
};

class DaoModeler {
  constructor(context, connector) {
    this.logger = context.logger;
    this.outputPath = context.modelOutputPath;
    this.manifestPath = context.manifestOutputPath;
    this.connector = connector;
  }

  modeling_(schema) {
    this.logger.log('info', 'Generating entity models for schema "' + schema.name + '"...');

    this._generateSchemaModel(schema);

    this._generateEntityModel(schema);

    if (this.manifestPath) {
      this._generateEntityManifest(schema);
    }
  }

  _generateSchemaModel(schema) {
    let capitalized = pascalCase(schema.name);
    let locals = {
      driver: this.connector.driver,
      className: capitalized,
      schemaName: schema.name
    };
    let classTemplate = path.resolve(__dirname, 'database', this.connector.driver, 'Database.js.swig');
    let classCode = swig.renderFile(classTemplate, locals);
    let modelFilePath = path.resolve(this.outputPath, capitalized + '.js');
    fs.ensureFileSync(modelFilePath);
    fs.writeFileSync(modelFilePath, classCode);
    this.logger.log('info', 'Generated database model: ' + modelFilePath);
  }

  _generateEntityModel(schema) {
    _.forOwn(schema.entities, (entity, entityInstanceName) => {
      let capitalized = pascalCase(entityInstanceName);
      let sharedContext = {
        mapOfFunctorToFile: {},
        newFunctorFiles: []
      };

      let {
        ast: astClassMain,
        fieldReferences
      } = this._processFieldModifiers(entity, sharedContext);

      astClassMain = [astClassMain];
      let uniqueKeys = [_.castArray(entity.key)];

      if (entity.indexes) {
        entity.indexes.forEach(index => {
          if (index.unique) {
            uniqueKeys.push(index.fields);
          }
        });
      }

      let modelMeta = {
        schemaName: schema.name,
        name: entityInstanceName,
        keyField: entity.key,
        fields: _.mapValues(entity.fields, f => f.toJSON()),
        features: entity.features || {},
        uniqueKeys
      };

      if (!_.isEmpty(entity.indexes)) {
        modelMeta.indexes = entity.indexes;
      }

      if (!_.isEmpty(entity.features)) {
        modelMeta.features = entity.features;
      }

      if (!_.isEmpty(entity.associations)) {
        modelMeta.associations = entity.associations;
      }

      if (!_.isEmpty(fieldReferences)) {
        modelMeta.fieldDependencies = fieldReferences;
      }

      if (entity.interfaces) {
        let astInterfaces = this._buildInterfaces(entity, modelMeta, sharedContext);

        astClassMain = astClassMain.concat(astInterfaces);
      }

      let importLines = [];

      if (!_.isEmpty(sharedContext.mapOfFunctorToFile)) {
        _.forOwn(sharedContext.mapOfFunctorToFile, (fileName, functionName) => {
          importLines.push(JsLang.astToCode(JsLang.astRequire(functionName, fileName)));
        });
      }

      if (!_.isEmpty(sharedContext.newFunctorFiles)) {
        _.each(sharedContext.newFunctorFiles, entry => {
          this._generateFunctionTemplateFile(schema, entry);
        });
      }

      let mixins = [];

      if (!_.isEmpty(entity.info.mixins)) {
        let mixinsDirPath = path.resolve(this.outputPath, schema.name, 'mixins');
        fs.ensureDirSync(mixinsDirPath);
        entity.info.mixins.forEach(m => {
          let mixinName = pascalCase(m);
          let mixinFilePath = path.join(mixinsDirPath, mixinName + '.js');

          if (!fs.pathExistsSync(mixinFilePath)) {
            fs.writeFileSync(mixinFilePath, "throw new Error('to be implemented...')");
          }

          let mixinVarName = 'mixin' + mixinName;
          importLines.push(JsLang.astToCode(JsLang.astRequire(mixinVarName, './mixins/' + mixinName)));
          mixins.push(mixinVarName);
        });
      }

      let locals = {
        imports: importLines.join('\n'),
        className: capitalized,
        entityMeta: indentLines(JSON.stringify(modelMeta, null, 4), 4),
        classBody: indentLines(astClassMain.map(block => JsLang.astToCode(block)).join('\n\n'), 8),
        functors: indentLines(JsLang.astToCode(JsLang.astValue(_.reduce(sharedContext.newFunctorFiles, (result, functor) => {
          result['$' + functor.functionName] = JsLang.astId(functor.functionName);
          return result;
        }, {}))), 4),
        mixins
      };
      let classTemplate = path.resolve(__dirname, 'database', this.connector.driver, 'EntityModel.js.swig');
      let classCode = swig.renderFile(classTemplate, locals);
      let modelFilePath = path.resolve(this.outputPath, schema.name, capitalized + '.js');
      fs.ensureFileSync(modelFilePath);
      fs.writeFileSync(modelFilePath, classCode);
      this.logger.log('info', 'Generated entity model: ' + modelFilePath);
    });
  }

  _generateEntityManifest(schema) {
    let entities = Object.keys(schema.entities).sort().reduce((result, v) => {
      result[v] = {};
      return result;
    }, {});
    let outputFilePath = path.resolve(this.manifestPath, schema.name + '.manifest.json');
    fs.ensureFileSync(outputFilePath);
    fs.writeFileSync(outputFilePath, JSON.stringify(entities, null, 4));
    this.logger.log('info', 'Generated schema manifest: ' + outputFilePath);
  }

  _processFieldModifiers(entity, sharedContext) {
    let compileContext = OolToAst.createCompileContext(entity.oolModule.name, this.logger, sharedContext);
    compileContext.variables['raw'] = {
      source: 'context',
      finalized: true
    };
    compileContext.variables['i18n'] = {
      source: 'context',
      finalized: true
    };
    compileContext.variables['connector'] = {
      source: 'context',
      finalized: true
    };
    compileContext.variables['latest'] = {
      source: 'context'
    };
    const allFinished = OolToAst.createTopoId(compileContext, 'done.');
    let fieldReferences = {};

    _.forOwn(entity.fields, (field, fieldName) => {
      let topoId = OolToAst.compileField(fieldName, field, compileContext);
      OolToAst.dependsOn(compileContext, topoId, allFinished);

      if (field.writeOnce || field.freezeAfterNonDefault) {
        putIntoBucket(fieldReferences, fieldName, fieldName);
      }
    });

    let deps = compileContext.topoSort.sort();
    deps = deps.filter(dep => compileContext.mapOfTokenToMeta.has(dep));
    let methodBodyValidateAndFill = [],
        lastFieldsGroup,
        methodBodyCache = [],
        lastBlock,
        lastAstType;

    const _mergeDoValidateAndFillCode = function (fieldName, references, astCache, requireTargetField) {
      let fields = (requireTargetField ? [fieldName] : []).concat(references);
      let checker = fields.join(',');

      if (lastFieldsGroup && lastFieldsGroup.checker !== checker) {
        methodBodyValidateAndFill = methodBodyValidateAndFill.concat(Snippets._fieldRequirementCheck(lastFieldsGroup.fieldName, lastFieldsGroup.references, methodBodyCache, lastFieldsGroup.requireTargetField));
        methodBodyCache = [];
      }

      methodBodyCache = methodBodyCache.concat(astCache);
      lastFieldsGroup = {
        fieldName,
        references,
        requireTargetField,
        checker
      };
    };

    _.each(deps, (dep, i) => {
      let sourceMap = compileContext.mapOfTokenToMeta.get(dep);
      let astBlock = compileContext.astMap[dep];
      let targetFieldName = getFieldName(sourceMap.target);

      if (sourceMap.references) {
        let fieldReference = fieldReferences[targetFieldName];

        if (!fieldReference) {
          fieldReferences[targetFieldName] = fieldReference = [];
        }

        sourceMap.references.forEach(ref => {
          if (fieldReference.indexOf(ref) === -1) fieldReference.push(ref);
        });
      }

      if (lastBlock) {
        astBlock = chainCall(lastBlock, lastAstType, astBlock, sourceMap.type);
        lastBlock = undefined;
      }

      if (i < deps.length - 1) {
        let nextType = compileContext.mapOfTokenToMeta.get(deps[i + 1]);

        if (isChainable(sourceMap, nextType)) {
          lastBlock = astBlock;
          lastAstType = sourceMap.type;
          return;
        }
      }

      if (sourceMap.type === OolToAst.AST_BLK_VALIDATOR_CALL) {
        let astCache = Snippets._validateCheck(targetFieldName, astBlock);

        _mergeDoValidateAndFillCode(targetFieldName, sourceMap.references, astCache, true);
      } else if (sourceMap.type === OolToAst.AST_BLK_PROCESSOR_CALL) {
        let astCache = JsLang.astAssign(JsLang.astVarRef(sourceMap.target, true), astBlock, `Processing "${targetFieldName}"`);

        _mergeDoValidateAndFillCode(targetFieldName, sourceMap.references, astCache, true);
      } else if (sourceMap.type === OolToAst.AST_BLK_ACTIVATOR_CALL) {
        let astCache = JsLang.astAssign(JsLang.astVarRef(sourceMap.target, true), astBlock, `Activating "${targetFieldName}"`);

        _mergeDoValidateAndFillCode(targetFieldName, sourceMap.references, astCache, false);
      } else {
        throw new Error('To be implemented.');
      }
    });

    if (!_.isEmpty(methodBodyCache)) {
      methodBodyValidateAndFill = methodBodyValidateAndFill.concat(Snippets._fieldRequirementCheck(lastFieldsGroup.fieldName, lastFieldsGroup.references, methodBodyCache, lastFieldsGroup.requireTargetField));
    }

    return {
      ast: JsLang.astMemberMethod(asyncMethodNaming('applyModifiers'), ['context', 'isUpdating'], Snippets._applyModifiersHeader.concat(methodBodyValidateAndFill).concat([JsLang.astReturn(JsLang.astId('context'))]), false, true, true, 'Applying predefined modifiers to entity fields.'),
      fieldReferences
    };
  }

  _generateFunctionTemplateFile(schema, {
    functionName,
    functorType,
    fileName,
    args
  }) {
    let filePath = path.resolve(this.outputPath, schema.name, fileName);

    if (fs.existsSync(filePath)) {
      this.logger.log('info', `${_.upperFirst(functorType)} "${fileName}" exists. File generating skipped.`);
      return;
    }

    let ast = JsLang.astProgram();
    JsLang.astPushInBody(ast, JsLang.astFunction(functionName, args, OOL_MODIFIER_RETURN[functorType](args)));
    JsLang.astPushInBody(ast, JsLang.astAssign('module.exports', JsLang.astVarRef(functionName)));
    fs.ensureFileSync(filePath);
    fs.writeFileSync(filePath, JsLang.astToCode(ast));
    this.logger.log('info', `Generated ${functorType} file: ${filePath}`);
  }

  _buildInterfaces(entity, modelMetaInit, sharedContext) {
    let ast = [];

    _.forOwn(entity.interfaces, (method, name) => {
      this.logger.info('Building interface: ' + name);
      let astBody = [JsLang.astVarDeclare('$meta', JsLang.astVarRef('this.meta.interfaces.' + name), true, false, 'Retrieving the meta data')];
      let compileContext = OolToAst.createCompileContext(entity.oolModule.name, this.logger, sharedContext);
      let paramMeta;

      if (method.accept) {
        paramMeta = this._processParams(method.accept, compileContext);
      }

      modelMetaInit['interfaces'] || (modelMetaInit['interfaces'] = {});
      modelMetaInit['interfaces'][name] = {
        params: Object.values(paramMeta)
      };

      _.each(method.implementation, (operation, index) => {
        OolToAst.compileDbOperation(index, operation, compileContext, compileContext.mainStartId);
      });

      if (method.return) {
        OolToAst.compileExceptionalReturn(method.return, compileContext);
      }

      let deps = compileContext.topoSort.sort();
      deps = deps.filter(dep => compileContext.mapOfTokenToMeta.has(dep));

      _.each(deps, dep => {
        let sourceMap = compileContext.mapOfTokenToMeta.get(dep);
        let astBlock = compileContext.astMap[dep];
        let targetFieldName = sourceMap.target;

        if (sourceMap.type === OolToAst.AST_BLK_VALIDATOR_CALL) {
          astBlock = Snippets._validateCheck(targetFieldName, astBlock);
        } else if (sourceMap.type === OolToAst.AST_BLK_PROCESSOR_CALL) {
          if (sourceMap.needDeclare) {
            astBlock = JsLang.astVarDeclare(JsLang.astVarRef(sourceMap.target), astBlock, false, false, `Processing "${targetFieldName}"`);
          } else {
            astBlock = JsLang.astAssign(JsLang.astVarRef(sourceMap.target, true), astBlock, `Processing "${targetFieldName}"`);
          }
        } else if (sourceMap.type === OolToAst.AST_BLK_ACTIVATOR_CALL) {
          if (sourceMap.needDeclare) {
            astBlock = JsLang.astVarDeclare(JsLang.astVarRef(sourceMap.target), astBlock, false, false, `Processing "${targetFieldName}"`);
          } else {
            astBlock = JsLang.astAssign(JsLang.astVarRef(sourceMap.target, true), astBlock, `Activating "${targetFieldName}"`);
          }
        }

        astBody = astBody.concat(_.castArray(astBlock));
      });

      ast.push(JsLang.astMemberMethod(asyncMethodNaming(name), Object.keys(paramMeta), astBody, false, true, true, replaceAll(_.kebabCase(name), '-', ' ')));
    });

    return ast;
  }

  _processParams(acceptParams, compileContext) {
    let paramMeta = {};
    acceptParams.forEach((param, i) => {
      OolToAst.compileParam(i, param, compileContext);
      paramMeta[param.name] = param;
      compileContext.variables[param.name] = {
        source: 'argument'
      };
    });
    return paramMeta;
  }

}

module.exports = DaoModeler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbGVyL0Rhby5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsInBhc2NhbENhc2UiLCJyZXBsYWNlQWxsIiwicHV0SW50b0J1Y2tldCIsInN3aWciLCJPb2xUeXBlcyIsIkpzTGFuZyIsIk9vbFRvQXN0IiwiU25pcHBldHMiLCJDaGFpbmFibGVUeXBlIiwiQVNUX0JMS19WQUxJREFUT1JfQ0FMTCIsIkFTVF9CTEtfUFJPQ0VTU09SX0NBTEwiLCJBU1RfQkxLX0FDVElWQVRPUl9DQUxMIiwiZ2V0RmllbGROYW1lIiwidCIsInNwbGl0IiwicG9wIiwiaXNDaGFpbmFibGUiLCJjdXJyZW50IiwibmV4dCIsImluZGV4T2YiLCJ0eXBlIiwidGFyZ2V0IiwiY2hhaW5DYWxsIiwibGFzdEJsb2NrIiwibGFzdFR5cGUiLCJjdXJyZW50QmxvY2siLCJjdXJyZW50VHlwZSIsImFzdEJpbkV4cCIsImFyZ3VtZW50cyIsImFzeW5jTWV0aG9kTmFtaW5nIiwibmFtZSIsImluZGVudExpbmVzIiwibGluZXMiLCJpbmRlbnRhdGlvbiIsIm1hcCIsImxpbmUiLCJpIiwicmVwZWF0Iiwiam9pbiIsIk9PTF9NT0RJRklFUl9SRVRVUk4iLCJNb2RpZmllciIsIlZBTElEQVRPUiIsImFzdFJldHVybiIsIlBST0NFU1NPUiIsImFyZ3MiLCJhc3RJZCIsIkFDVElWQVRPUiIsIkRhb01vZGVsZXIiLCJjb25zdHJ1Y3RvciIsImNvbnRleHQiLCJjb25uZWN0b3IiLCJsb2dnZXIiLCJvdXRwdXRQYXRoIiwibW9kZWxPdXRwdXRQYXRoIiwibWFuaWZlc3RQYXRoIiwibWFuaWZlc3RPdXRwdXRQYXRoIiwibW9kZWxpbmdfIiwic2NoZW1hIiwibG9nIiwiX2dlbmVyYXRlU2NoZW1hTW9kZWwiLCJfZ2VuZXJhdGVFbnRpdHlNb2RlbCIsIl9nZW5lcmF0ZUVudGl0eU1hbmlmZXN0IiwiY2FwaXRhbGl6ZWQiLCJsb2NhbHMiLCJkcml2ZXIiLCJjbGFzc05hbWUiLCJzY2hlbWFOYW1lIiwiY2xhc3NUZW1wbGF0ZSIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJjbGFzc0NvZGUiLCJyZW5kZXJGaWxlIiwibW9kZWxGaWxlUGF0aCIsImVuc3VyZUZpbGVTeW5jIiwid3JpdGVGaWxlU3luYyIsImZvck93biIsImVudGl0aWVzIiwiZW50aXR5IiwiZW50aXR5SW5zdGFuY2VOYW1lIiwic2hhcmVkQ29udGV4dCIsIm1hcE9mRnVuY3RvclRvRmlsZSIsIm5ld0Z1bmN0b3JGaWxlcyIsImFzdCIsImFzdENsYXNzTWFpbiIsImZpZWxkUmVmZXJlbmNlcyIsIl9wcm9jZXNzRmllbGRNb2RpZmllcnMiLCJ1bmlxdWVLZXlzIiwiY2FzdEFycmF5Iiwia2V5IiwiaW5kZXhlcyIsImZvckVhY2giLCJpbmRleCIsInVuaXF1ZSIsInB1c2giLCJmaWVsZHMiLCJtb2RlbE1ldGEiLCJrZXlGaWVsZCIsIm1hcFZhbHVlcyIsImYiLCJ0b0pTT04iLCJmZWF0dXJlcyIsImlzRW1wdHkiLCJhc3NvY2lhdGlvbnMiLCJmaWVsZERlcGVuZGVuY2llcyIsImludGVyZmFjZXMiLCJhc3RJbnRlcmZhY2VzIiwiX2J1aWxkSW50ZXJmYWNlcyIsImNvbmNhdCIsImltcG9ydExpbmVzIiwiZmlsZU5hbWUiLCJmdW5jdGlvbk5hbWUiLCJhc3RUb0NvZGUiLCJhc3RSZXF1aXJlIiwiZWFjaCIsImVudHJ5IiwiX2dlbmVyYXRlRnVuY3Rpb25UZW1wbGF0ZUZpbGUiLCJtaXhpbnMiLCJpbmZvIiwibWl4aW5zRGlyUGF0aCIsImVuc3VyZURpclN5bmMiLCJtIiwibWl4aW5OYW1lIiwibWl4aW5GaWxlUGF0aCIsInBhdGhFeGlzdHNTeW5jIiwibWl4aW5WYXJOYW1lIiwiaW1wb3J0cyIsImVudGl0eU1ldGEiLCJKU09OIiwic3RyaW5naWZ5IiwiY2xhc3NCb2R5IiwiYmxvY2siLCJmdW5jdG9ycyIsImFzdFZhbHVlIiwicmVkdWNlIiwicmVzdWx0IiwiZnVuY3RvciIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwidiIsIm91dHB1dEZpbGVQYXRoIiwiY29tcGlsZUNvbnRleHQiLCJjcmVhdGVDb21waWxlQ29udGV4dCIsIm9vbE1vZHVsZSIsInZhcmlhYmxlcyIsInNvdXJjZSIsImZpbmFsaXplZCIsImFsbEZpbmlzaGVkIiwiY3JlYXRlVG9wb0lkIiwiZmllbGQiLCJmaWVsZE5hbWUiLCJ0b3BvSWQiLCJjb21waWxlRmllbGQiLCJkZXBlbmRzT24iLCJ3cml0ZU9uY2UiLCJmcmVlemVBZnRlck5vbkRlZmF1bHQiLCJkZXBzIiwidG9wb1NvcnQiLCJmaWx0ZXIiLCJkZXAiLCJtYXBPZlRva2VuVG9NZXRhIiwiaGFzIiwibWV0aG9kQm9keVZhbGlkYXRlQW5kRmlsbCIsImxhc3RGaWVsZHNHcm91cCIsIm1ldGhvZEJvZHlDYWNoZSIsImxhc3RBc3RUeXBlIiwiX21lcmdlRG9WYWxpZGF0ZUFuZEZpbGxDb2RlIiwicmVmZXJlbmNlcyIsImFzdENhY2hlIiwicmVxdWlyZVRhcmdldEZpZWxkIiwiY2hlY2tlciIsIl9maWVsZFJlcXVpcmVtZW50Q2hlY2siLCJzb3VyY2VNYXAiLCJnZXQiLCJhc3RCbG9jayIsImFzdE1hcCIsInRhcmdldEZpZWxkTmFtZSIsImZpZWxkUmVmZXJlbmNlIiwicmVmIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwibmV4dFR5cGUiLCJfdmFsaWRhdGVDaGVjayIsImFzdEFzc2lnbiIsImFzdFZhclJlZiIsIkVycm9yIiwiYXN0TWVtYmVyTWV0aG9kIiwiX2FwcGx5TW9kaWZpZXJzSGVhZGVyIiwiZnVuY3RvclR5cGUiLCJmaWxlUGF0aCIsImV4aXN0c1N5bmMiLCJ1cHBlckZpcnN0IiwiYXN0UHJvZ3JhbSIsImFzdFB1c2hJbkJvZHkiLCJhc3RGdW5jdGlvbiIsIm1vZGVsTWV0YUluaXQiLCJtZXRob2QiLCJhc3RCb2R5IiwiYXN0VmFyRGVjbGFyZSIsInBhcmFtTWV0YSIsImFjY2VwdCIsIl9wcm9jZXNzUGFyYW1zIiwicGFyYW1zIiwidmFsdWVzIiwiaW1wbGVtZW50YXRpb24iLCJvcGVyYXRpb24iLCJjb21waWxlRGJPcGVyYXRpb24iLCJtYWluU3RhcnRJZCIsInJldHVybiIsImNvbXBpbGVFeGNlcHRpb25hbFJldHVybiIsIm5lZWREZWNsYXJlIiwia2ViYWJDYXNlIiwiYWNjZXB0UGFyYW1zIiwicGFyYW0iLCJjb21waWxlUGFyYW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLEVBQUw7QUFBU0MsRUFBQUEsVUFBVDtBQUFxQkMsRUFBQUEsVUFBckI7QUFBaUNDLEVBQUFBO0FBQWpDLElBQW9ETCxPQUFPLENBQUMsVUFBRCxDQUFqRTs7QUFDQSxNQUFNTSxJQUFJLEdBQUlOLE9BQU8sQ0FBQyxnQkFBRCxDQUFyQjs7QUFFQSxNQUFNTyxRQUFRLEdBQUdQLE9BQU8sQ0FBQyxrQkFBRCxDQUF4Qjs7QUFDQSxNQUFNUSxNQUFNLEdBQUdSLE9BQU8sQ0FBQyxlQUFELENBQXRCOztBQUNBLE1BQU1TLFFBQVEsR0FBR1QsT0FBTyxDQUFDLG9CQUFELENBQXhCOztBQUNBLE1BQU1VLFFBQVEsR0FBR1YsT0FBTyxDQUFDLGdCQUFELENBQXhCOztBQUVBLE1BQU1XLGFBQWEsR0FBRyxDQUNsQkYsUUFBUSxDQUFDRyxzQkFEUyxFQUVsQkgsUUFBUSxDQUFDSSxzQkFGUyxFQUdsQkosUUFBUSxDQUFDSyxzQkFIUyxDQUF0Qjs7QUFNQSxNQUFNQyxZQUFZLEdBQUdDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsR0FBUixFQUFhQyxHQUFiLEVBQTFCOztBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUFDQyxPQUFELEVBQVVDLElBQVYsS0FBbUJWLGFBQWEsQ0FBQ1csT0FBZCxDQUFzQkYsT0FBTyxDQUFDRyxJQUE5QixJQUFzQyxDQUFDLENBQXZDLElBQ2hDSCxPQUFPLENBQUNJLE1BQVIsS0FBbUJILElBQUks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QUFmLENBQVY7QUFDSCxPQTNCRDs7QUE2QkE1RixNQUFBQSxHQUFHLENBQUNXLElBQUosQ0FBU3hGLE1BQU0sQ0FBQ3FMLGVBQVAsQ0FBdUI3SixpQkFBaUIsQ0FBQ0MsSUFBRCxDQUF4QyxFQUFnRDBHLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZOEQsU0FBWixDQUFoRCxFQUF3RUYsT0FBeEUsRUFBaUYsS0FBakYsRUFBd0YsSUFBeEYsRUFBOEYsSUFBOUYsRUFBb0dwTSxVQUFVLENBQUNILENBQUMsQ0FBQ3FOLFNBQUYsQ0FBWXJMLElBQVosQ0FBRCxFQUFvQixHQUFwQixFQUF5QixHQUF6QixDQUE5RyxDQUFUO0FBQ0gsS0FoRUQ7O0FBa0VBLFdBQU9vRCxHQUFQO0FBQ0g7O0FBRUR1SCxFQUFBQSxjQUFjLENBQUNXLFlBQUQsRUFBZXZFLGNBQWYsRUFBK0I7QUFDekMsUUFBSTBELFNBQVMsR0FBRyxFQUFoQjtBQUVBYSxJQUFBQSxZQUFZLENBQUMxSCxPQUFiLENBQXFCLENBQUMySCxLQUFELEVBQVFqTCxDQUFSLEtBQWM7QUFDL0I5QixNQUFBQSxRQUFRLENBQUNnTixZQUFULENBQXNCbEwsQ0FBdEIsRUFBeUJpTCxLQUF6QixFQUFnQ3hFLGNBQWhDO0FBQ0EwRCxNQUFBQSxTQUFTLENBQUNjLEtBQUssQ0FBQ3ZMLElBQVAsQ0FBVCxHQUF3QnVMLEtBQXhCO0FBQ0F4RSxNQUFBQSxjQUFjLENBQUNHLFNBQWYsQ0FBeUJxRSxLQUFLLENBQUN2TCxJQUEvQixJQUF1QztBQUFFbUgsUUFBQUEsTUFBTSxFQUFFO0FBQVYsT0FBdkM7QUFDSCxLQUpEO0FBTUEsV0FBT3NELFNBQVA7QUFDSDs7QUE3Z0JZOztBQWdoQmpCZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekssVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIHBhc2NhbENhc2UsIHJlcGxhY2VBbGwsIHB1dEludG9CdWNrZXQgfSAgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3Qgc3dpZyAgPSByZXF1aXJlKCdzd2lnLXRlbXBsYXRlcycpO1xuXG5jb25zdCBPb2xUeXBlcyA9IHJlcXVpcmUoJy4uL2xhbmcvT29sVHlwZXMnKTtcbmNvbnN0IEpzTGFuZyA9IHJlcXVpcmUoJy4vdXRpbC9hc3QuanMnKTtcbmNvbnN0IE9vbFRvQXN0ID0gcmVxdWlyZSgnLi91dGlsL29vbFRvQXN0LmpzJyk7XG5jb25zdCBTbmlwcGV0cyA9IHJlcXVpcmUoJy4vZGFvL3NuaXBwZXRzJyk7XG5cbmNvbnN0IENoYWluYWJsZVR5cGUgPSBbXG4gICAgT29sVG9Bc3QuQVNUX0JMS19WQUxJREFUT1JfQ0FMTCwgXG4gICAgT29sVG9Bc3QuQVNUX0JMS19QUk9DRVNTT1JfQ0FMTCxcbiAgICBPb2xUb0FzdC5BU1RfQkxLX0FDVElWQVRPUl9DQUxMXG5dO1xuXG5jb25zdCBnZXRGaWVsZE5hbWUgPSB0ID0+IHQuc3BsaXQoJy4nKS5wb3AoKTtcbmNvbnN0IGlzQ2hhaW5hYmxlID0gKGN1cnJlbnQsIG5leHQpID0+IENoYWluYWJsZVR5cGUuaW5kZXhPZihjdXJyZW50LnR5cGUpID4gLTFcbiAgICAmJiBjdXJyZW50LnRhcmdldCA9PT0gbmV4dC50YXJnZXRcbiAgICAmJiBuZXh0LnR5cGUgPT09IGN1cnJlbnQudHlwZTtcbmNvbnN0IGNoYWluQ2FsbCA9IChsYXN0QmxvY2ssIGxhc3RUeXBlLCBjdXJyZW50QmxvY2ssIGN1cnJlbnRUeXBlKSA9PiB7XG4gICAgaWYgKGxhc3RCbG9jaykge1xuICAgICAgICBpZiAobGFzdFR5cGUgPT09ICdWYWxpZGF0b3JDYWxsJykge1xuICAgICAgICAgICAgYXNzZXJ0OiBjdXJyZW50VHlwZSA9PT0gJ1ZhbGlkYXRvckNhbGwnLCAnVW5leHBlY3RlZCBjdXJyZW50VHlwZSc7XG5cbiAgICAgICAgICAgIGN1cnJlbnRCbG9jayA9IEpzTGFuZy5hc3RCaW5FeHAobGFzdEJsb2NrLCAnJiYnLCBjdXJyZW50QmxvY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0OiBjdXJyZW50VHlwZSA9PT0gJ1Byb2Nlc3NvckNhbGwnLCAnVW5leHBlY3RlZCBjdXJyZW50VHlwZTogJyArIGN1cnJlbnRUeXBlICsgJyBsYXN0OiAnICsgbGFzdFR5cGU7XG5cbiAgICAgICAgICAgIGN1cnJlbnRCbG9jay5hcmd1bWVudHNbMF0gPSBsYXN0QmxvY2s7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudEJsb2NrO1xufTtcbmNvbnN0IGFzeW5jTWV0aG9kTmFtaW5nID0gKG5hbWUpID0+IG5hbWUgKyAnXyc7XG5cbmNvbnN0IGluZGVudExpbmVzID0gKGxpbmVzLCBpbmRlbnRhdGlvbikgPT4gbGluZXMuc3BsaXQoJ1xcbicpLm1hcCgobGluZSwgaSkgPT4gaSA9PT0gMCA/IGxpbmUgOiAoXy5yZXBlYXQoJyAnLCBpbmRlbnRhdGlvbikgKyBsaW5lKSkuam9pbignXFxuJyk7XG5cbmNvbnN0IE9PTF9NT0RJRklFUl9SRVRVUk4gPSB7XG4gICAgW09vbFR5cGVzLk1vZGlmaWVyLlZBTElEQVRPUl06ICgpID0+IFsgSnNMYW5nLmFzdFJldHVybih0cnVlKSBdLFxuICAgIFtPb2xUeXBlcy5Nb2RpZmllci5QUk9DRVNTT1JdOiBhcmdzID0+IFsgSnNMYW5nLmFzdFJldHVybihKc0xhbmcuYXN0SWQoYXJnc1swXSkpIF0sXG4gICAgW09vbFR5cGVzLk1vZGlmaWVyLkFDVElWQVRPUl06ICgpID0+IFsgSnNMYW5nLmFzdFJldHVybihKc0xhbmcuYXN0SWQoXCJ1bmRlZmluZWRcIikpIF1cbn07XG5cbi8qKlxuICogT29sb25nIGRhdGFiYXNlIGFjY2VzcyBvYmplY3QgKERBTykgbW9kZWxlci5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBEYW9Nb2RlbGVyIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAgICogQHByb3BlcnR5IHtMb2dnZXJ9IGNvbnRleHQubG9nZ2VyIC0gTG9nZ2VyIG9iamVjdCAgICAgICAgICBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5tb2RlbE91dHB1dFBhdGggLSBHZW5lcmF0ZWQgbW9kZWwgb3V0cHV0IHBhdGhcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5tYW5pZmVzdE91dHB1dFBhdGggLSBFbnRpdGllcyBtYW5pZmVzdCBvdXRwdXQgcGF0aFxuICAgICAqIEBwYXJhbSB7Q29ubmVjdG9yfSBjb25uZWN0b3IgICAgICBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjb25uZWN0b3IpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb250ZXh0LmxvZ2dlcjsgICAgICAgXG4gICAgICAgIHRoaXMub3V0cHV0UGF0aCA9IGNvbnRleHQubW9kZWxPdXRwdXRQYXRoO1xuICAgICAgICB0aGlzLm1hbmlmZXN0UGF0aCA9IGNvbnRleHQubWFuaWZlc3RPdXRwdXRQYXRoO1xuXG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yOyAgICAgICAgXG4gICAgfVxuXG4gICAgbW9kZWxpbmdfKHNjaGVtYSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2luZm8nLCAnR2VuZXJhdGluZyBlbnRpdHkgbW9kZWxzIGZvciBzY2hlbWEgXCInICsgc2NoZW1hLm5hbWUgKyAnXCIuLi4nKTtcblxuICAgICAgICB0aGlzLl9nZW5lcmF0ZVNjaGVtYU1vZGVsKHNjaGVtYSk7XG4gICAgICAgIHRoaXMuX2dlbmVyYXRlRW50aXR5TW9kZWwoc2NoZW1hKTtcbiAgICAgICAgLy90aGlzLl9nZW5lcmF0ZVZpZXdNb2RlbCgpO1xuXG4gICAgICAgIGlmICh0aGlzLm1hbmlmZXN0UGF0aCkge1xuICAgICAgICAgICAgdGhpcy5fZ2VuZXJhdGVFbnRpdHlNYW5pZmVzdChzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dlbmVyYXRlU2NoZW1hTW9kZWwoc2NoZW1hKSB7XG4gICAgICAgIGxldCBjYXBpdGFsaXplZCA9IHBhc2NhbENhc2Uoc2NoZW1hLm5hbWUpO1xuXG4gICAgICAgIGxldCBsb2NhbHMgPSB7XG4gICAgICAgICAgICBkcml2ZXI6IHRoaXMuY29ubmVjdG9yLmRyaXZlcixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2FwaXRhbGl6ZWQsXG4gICAgICAgICAgICBzY2hlbWFOYW1lOiBzY2hlbWEubmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjbGFzc1RlbXBsYXRlID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2RhdGFiYXNlJywgdGhpcy5jb25uZWN0b3IuZHJpdmVyLCAnRGF0YWJhc2UuanMuc3dpZycpO1xuICAgICAgICBsZXQgY2xhc3NDb2RlID0gc3dpZy5yZW5kZXJGaWxlKGNsYXNzVGVtcGxhdGUsIGxvY2Fscyk7XG5cbiAgICAgICAgbGV0IG1vZGVsRmlsZVBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5vdXRwdXRQYXRoLCBjYXBpdGFsaXplZCArICcuanMnKTtcbiAgICAgICAgZnMuZW5zdXJlRmlsZVN5bmMobW9kZWxGaWxlUGF0aCk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMobW9kZWxGaWxlUGF0aCwgY2xhc3NDb2RlKTtcblxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2luZm8nLCAnR2VuZXJhdGVkIGRhdGFiYXNlIG1vZGVsOiAnICsgbW9kZWxGaWxlUGF0aCk7XG4gICAgfVxuXG4gICAgX2dlbmVyYXRlRW50aXR5TW9kZWwoc2NoZW1hKSB7XG4gICAgICAgIF8uZm9yT3duKHNjaGVtYS5lbnRpdGllcywgKGVudGl0eSwgZW50aXR5SW5zdGFuY2VOYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgY2FwaXRhbGl6ZWQgPSBwYXNjYWxDYXNlKGVudGl0eUluc3RhbmNlTmFtZSk7ICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vc2hhcmVkIGluZm9ybWF0aW9uIHdpdGggbW9kZWwgQ1JVRCBhbmQgY3VzdG9taXplZCBpbnRlcmZhY2VzXG4gICAgICAgICAgICBsZXQgc2hhcmVkQ29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBtYXBPZkZ1bmN0b3JUb0ZpbGU6IHt9LFxuICAgICAgICAgICAgICAgIG5ld0Z1bmN0b3JGaWxlczogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCB7IGFzdDogYXN0Q2xhc3NNYWluLCBmaWVsZFJlZmVyZW5jZXMgfSA9IHRoaXMuX3Byb2Nlc3NGaWVsZE1vZGlmaWVycyhlbnRpdHksIHNoYXJlZENvbnRleHQpO1xuICAgICAgICAgICAgYXN0Q2xhc3NNYWluID0gWyBhc3RDbGFzc01haW4gXTtcblxuICAgICAgICAgICAgLy9wcmVwYXJlIG1ldGEgZGF0YVxuICAgICAgICAgICAgbGV0IHVuaXF1ZUtleXMgPSBbIF8uY2FzdEFycmF5KGVudGl0eS5rZXkpIF07XG5cbiAgICAgICAgICAgIGlmIChlbnRpdHkuaW5kZXhlcykge1xuICAgICAgICAgICAgICAgIGVudGl0eS5pbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXgudW5pcXVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVLZXlzLnB1c2goaW5kZXguZmllbGRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbW9kZWxNZXRhID0ge1xuICAgICAgICAgICAgICAgIHNjaGVtYU5hbWU6IHNjaGVtYS5uYW1lLFxuICAgICAgICAgICAgICAgIG5hbWU6IGVudGl0eUluc3RhbmNlTmFtZSxcbiAgICAgICAgICAgICAgICBrZXlGaWVsZDogZW50aXR5LmtleSxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IF8ubWFwVmFsdWVzKGVudGl0eS5maWVsZHMsIGYgPT4gZi50b0pTT04oKSksXG4gICAgICAgICAgICAgICAgZmVhdHVyZXM6IGVudGl0eS5mZWF0dXJlcyB8fCB7fSxcbiAgICAgICAgICAgICAgICB1bmlxdWVLZXlzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRpdHkuaW5kZXhlcykpIHtcbiAgICAgICAgICAgICAgICBtb2RlbE1ldGEuaW5kZXhlcyA9IGVudGl0eS5pbmRleGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRpdHkuZmVhdHVyZXMpKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxNZXRhLmZlYXR1cmVzID0gZW50aXR5LmZlYXR1cmVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRpdHkuYXNzb2NpYXRpb25zKSkge1xuICAgICAgICAgICAgICAgIG1vZGVsTWV0YS5hc3NvY2lhdGlvbnMgPSBlbnRpdHkuYXNzb2NpYXRpb25zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShmaWVsZFJlZmVyZW5jZXMpKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxNZXRhLmZpZWxkRGVwZW5kZW5jaWVzID0gZmllbGRSZWZlcmVuY2VzO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAvL2J1aWxkIGN1c3RvbWl6ZWQgaW50ZXJmYWNlcyAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVudGl0eS5pbnRlcmZhY2VzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFzdEludGVyZmFjZXMgPSB0aGlzLl9idWlsZEludGVyZmFjZXMoZW50aXR5LCBtb2RlbE1ldGEsIHNoYXJlZENvbnRleHQpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYXN0SW50ZXJmYWNlcyk7XG4gICAgICAgICAgICAgICAgLy9sZXQgYXN0Q2xhc3MgPSBhc3RDbGFzc01haW5bYXN0Q2xhc3NNYWluLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIC8vSnNMYW5nLmFzdFB1c2hJbkJvZHkoYXN0Q2xhc3MsIGFzdEludGVyZmFjZXMpO1xuICAgICAgICAgICAgICAgIGFzdENsYXNzTWFpbiA9IGFzdENsYXNzTWFpbi5jb25jYXQoYXN0SW50ZXJmYWNlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpbXBvcnRMaW5lcyA9IFtdO1xuXG4gICAgICAgICAgICAvL2dlbmVyYXRlIGZ1bmN0b3JzIGlmIGFueVxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoc2hhcmVkQ29udGV4dC5tYXBPZkZ1bmN0b3JUb0ZpbGUpKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JPd24oc2hhcmVkQ29udGV4dC5tYXBPZkZ1bmN0b3JUb0ZpbGUsIChmaWxlTmFtZSwgZnVuY3Rpb25OYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydExpbmVzLnB1c2goSnNMYW5nLmFzdFRvQ29kZShKc0xhbmcuYXN0UmVxdWlyZShmdW5jdGlvbk5hbWUsIGZpbGVOYW1lKSkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KHNoYXJlZENvbnRleHQubmV3RnVuY3RvckZpbGVzKSkge1xuICAgICAgICAgICAgICAgIF8uZWFjaChzaGFyZWRDb250ZXh0Lm5ld0Z1bmN0b3JGaWxlcywgZW50cnkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZUZ1bmN0aW9uVGVtcGxhdGVGaWxlKHNjaGVtYSwgZW50cnkpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtaXhpbnMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoZW50aXR5LmluZm8ubWl4aW5zKSkge1xuICAgICAgICAgICAgICAgIGxldCBtaXhpbnNEaXJQYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMub3V0cHV0UGF0aCwgc2NoZW1hLm5hbWUsICdtaXhpbnMnKTtcbiAgICAgICAgICAgICAgICBmcy5lbnN1cmVEaXJTeW5jKG1peGluc0RpclBhdGgpO1xuXG4gICAgICAgICAgICAgICAgZW50aXR5LmluZm8ubWl4aW5zLmZvckVhY2gobSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaXhpbk5hbWUgPSBwYXNjYWxDYXNlKG0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBtaXhpbkZpbGVQYXRoID0gcGF0aC5qb2luKG1peGluc0RpclBhdGgsIG1peGluTmFtZSArICcuanMnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmcy5wYXRoRXhpc3RzU3luYyhtaXhpbkZpbGVQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhtaXhpbkZpbGVQYXRoLCBcInRocm93IG5ldyBFcnJvcigndG8gYmUgaW1wbGVtZW50ZWQuLi4nKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBtaXhpblZhck5hbWUgPSAnbWl4aW4nICsgbWl4aW5OYW1lO1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRMaW5lcy5wdXNoKEpzTGFuZy5hc3RUb0NvZGUoSnNMYW5nLmFzdFJlcXVpcmUobWl4aW5WYXJOYW1lLCAnLi9taXhpbnMvJyArIG1peGluTmFtZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbWl4aW5zLnB1c2gobWl4aW5WYXJOYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9hc3NlbWJsZSB0aGUgc291cmNlIGNvZGUgZmlsZVxuICAgICAgICAgICAgLy9Kc0xhbmcuYXN0UHVzaEluQm9keShhc3QsIGFzdENsYXNzTWFpbik7XG5cbiAgICAgICAgICAgIC8vSnNMYW5nLmFzdFB1c2hJbkJvZHkoYXN0LCBlbnRpdHkuZmllbGRzLm1hcCgodiwgaykgPT4gSnNMYW5nLmFzdEFzc2lnbihjYXBpdGFsaXplZCArICcuRl8nICsgXy5zbmFrZUNhc2UoaykudG9VcHBlckNhc2UoKSwgaykpKTsgICBcblxuICAgICAgICAgICAgbGV0IGxvY2FscyA9IHtcbiAgICAgICAgICAgICAgICBpbXBvcnRzOiBpbXBvcnRMaW5lcy5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNhcGl0YWxpemVkLFxuICAgICAgICAgICAgICAgIGVudGl0eU1ldGE6IGluZGVudExpbmVzKEpTT04uc3RyaW5naWZ5KG1vZGVsTWV0YSwgbnVsbCwgNCksIDQpLFxuICAgICAgICAgICAgICAgIGNsYXNzQm9keTogaW5kZW50TGluZXMoYXN0Q2xhc3NNYWluLm1hcChibG9jayA9PiBKc0xhbmcuYXN0VG9Db2RlKGJsb2NrKSkuam9pbignXFxuXFxuJyksIDgpLFxuICAgICAgICAgICAgICAgIGZ1bmN0b3JzOiBpbmRlbnRMaW5lcyhKc0xhbmcuYXN0VG9Db2RlKEpzTGFuZy5hc3RWYWx1ZShfLnJlZHVjZShzaGFyZWRDb250ZXh0Lm5ld0Z1bmN0b3JGaWxlcywgKHJlc3VsdCwgZnVuY3RvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbJyQnICsgZnVuY3Rvci5mdW5jdGlvbk5hbWVdID0gSnNMYW5nLmFzdElkKGZ1bmN0b3IuZnVuY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCB7fSkpKSwgNCksXG4gICAgICAgICAgICAgICAgbWl4aW5zIFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IGNsYXNzVGVtcGxhdGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnZGF0YWJhc2UnLCB0aGlzLmNvbm5lY3Rvci5kcml2ZXIsICdFbnRpdHlNb2RlbC5qcy5zd2lnJyk7XG4gICAgICAgICAgICBsZXQgY2xhc3NDb2RlID0gc3dpZy5yZW5kZXJGaWxlKGNsYXNzVGVtcGxhdGUsIGxvY2Fscyk7XG5cbiAgICAgICAgICAgIGxldCBtb2RlbEZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMub3V0cHV0UGF0aCwgc2NoZW1hLm5hbWUsIGNhcGl0YWxpemVkICsgJy5qcycpO1xuICAgICAgICAgICAgZnMuZW5zdXJlRmlsZVN5bmMobW9kZWxGaWxlUGF0aCk7XG4gICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKG1vZGVsRmlsZVBhdGgsIGNsYXNzQ29kZSk7XG5cbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygnaW5mbycsICdHZW5lcmF0ZWQgZW50aXR5IG1vZGVsOiAnICsgbW9kZWxGaWxlUGF0aCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUVudGl0eU1hbmlmZXN0KHNjaGVtYSkge1xuICAgICAgICBsZXQgZW50aXRpZXMgPSBPYmplY3Qua2V5cyhzY2hlbWEuZW50aXRpZXMpLnNvcnQoKS5yZWR1Y2UoKHJlc3VsdCwgdikgPT4geyByZXN1bHRbdl0gPSB7fTsgcmV0dXJuIHJlc3VsdDsgfSwge30pO1xuXG4gICAgICAgIGxldCBvdXRwdXRGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLm1hbmlmZXN0UGF0aCwgc2NoZW1hLm5hbWUgKyAnLm1hbmlmZXN0Lmpzb24nKTtcbiAgICAgICAgZnMuZW5zdXJlRmlsZVN5bmMob3V0cHV0RmlsZVBhdGgpO1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKG91dHB1dEZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeShlbnRpdGllcywgbnVsbCwgNCkpO1xuXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnaW5mbycsICdHZW5lcmF0ZWQgc2NoZW1hIG1hbmlmZXN0OiAnICsgb3V0cHV0RmlsZVBhdGgpO1xuICAgIH1cblxuICAgIC8qXG4gICAgX2dlbmVyYXRlVmlld01vZGVsKHNjaGVtYSwgZGJTZXJ2aWNlKSB7ICAgICAgICBcbiAgICAgICAgXy5mb3JPd24oc2NoZW1hLnZpZXdzLCAodmlld0luZm8sIHZpZXdOYW1lKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdCdWlsZGluZyB2aWV3OiAnICsgdmlld05hbWUpO1xuXG4gICAgICAgICAgICBsZXQgY2FwaXRhbGl6ZWQgPSBfLnVwcGVyRmlyc3Qodmlld05hbWUpO1xuXG4gICAgICAgICAgICBsZXQgYXN0ID0gSnNMYW5nLmFzdFByb2dyYW0oKTtcblxuICAgICAgICAgICAgSnNMYW5nLmFzdFB1c2hJbkJvZHkoYXN0LCBKc0xhbmcuYXN0UmVxdWlyZSgnTW93YScsICdtb3dhJykpO1xuICAgICAgICAgICAgSnNMYW5nLmFzdFB1c2hJbkJvZHkoYXN0LCBKc0xhbmcuYXN0VmFyRGVjbGFyZSgnVXRpbCcsIEpzTGFuZy5hc3RWYXJSZWYoJ01vd2EuVXRpbCcpLCB0cnVlKSk7XG4gICAgICAgICAgICBKc0xhbmcuYXN0UHVzaEluQm9keShhc3QsIEpzTGFuZy5hc3RWYXJEZWNsYXJlKCdfJywgSnNMYW5nLmFzdFZhclJlZignVXRpbC5fJyksIHRydWUpKTtcbiAgICAgICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdFJlcXVpcmUoJ1ZpZXcnLCAnbW93YS9saWIvb29sb25nL3J1bnRpbWUvdmlldycpKTtcblxuICAgICAgICAgICAgbGV0IGNvbXBpbGVDb250ZXh0ID0gT29sVG9Bc3QuY3JlYXRlQ29tcGlsZUNvbnRleHQodmlld05hbWUsIGRiU2VydmljZS5zZXJ2aWNlSWQsIHRoaXMubG9nZ2VyKTtcblxuICAgICAgICAgICAgY29tcGlsZUNvbnRleHQubW9kZWxWYXJzLmFkZCh2aWV3SW5mby5lbnRpdHkpO1xuXG4gICAgICAgICAgICBsZXQgcGFyYW1NZXRhO1xuXG4gICAgICAgICAgICBpZiAodmlld0luZm8ucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1NZXRhID0gdGhpcy5fcHJvY2Vzc1BhcmFtcyh2aWV3SW5mby5wYXJhbXMsIGNvbXBpbGVDb250ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHZpZXdNZXRhID0ge1xuICAgICAgICAgICAgICAgIGlzTGlzdDogdmlld0luZm8uaXNMaXN0LFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1NZXRhXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgdmlld0JvZHlUb3BvSWQgPSBPb2xUb0FzdC5jcmVhdGVUb3BvSWQoY29tcGlsZUNvbnRleHQsICckdmlldycpO1xuICAgICAgICAgICAgT29sVG9Bc3QuZGVwZW5kc09uKGNvbXBpbGVDb250ZXh0LCBjb21waWxlQ29udGV4dC5tYWluU3RhcnRJZCwgdmlld0JvZHlUb3BvSWQpO1xuXG4gICAgICAgICAgICBsZXQgdmlld01vZGVsZXIgPSByZXF1aXJlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL2Rhby92aWV3JywgZGJTZXJ2aWNlLmRiVHlwZSArICcuanMnKSk7XG4gICAgICAgICAgICBjb21waWxlQ29udGV4dC5hc3RNYXBbdmlld0JvZHlUb3BvSWRdID0gdmlld01vZGVsZXIoZGJTZXJ2aWNlLCB2aWV3TmFtZSwgdmlld0luZm8pO1xuICAgICAgICAgICAgT29sVG9Bc3QuYWRkQ29kZUJsb2NrKGNvbXBpbGVDb250ZXh0LCB2aWV3Qm9keVRvcG9JZCwge1xuICAgICAgICAgICAgICAgIHR5cGU6IE9vbFRvQXN0LkFTVF9CTEtfVklFV19PUEVSQVRJT05cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgcmV0dXJuVG9wb0lkID0gT29sVG9Bc3QuY3JlYXRlVG9wb0lkKGNvbXBpbGVDb250ZXh0LCAnJHJldHVybjp2YWx1ZScpO1xuICAgICAgICAgICAgT29sVG9Bc3QuZGVwZW5kc09uKGNvbXBpbGVDb250ZXh0LCB2aWV3Qm9keVRvcG9JZCwgcmV0dXJuVG9wb0lkKTtcbiAgICAgICAgICAgIE9vbFRvQXN0LmNvbXBpbGVSZXR1cm4ocmV0dXJuVG9wb0lkLCB7XG4gICAgICAgICAgICAgICAgXCJvb2xUeXBlXCI6IFwiT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmlld0RhdGFcIlxuICAgICAgICAgICAgfSwgY29tcGlsZUNvbnRleHQpO1xuXG4gICAgICAgICAgICBsZXQgZGVwcyA9IGNvbXBpbGVDb250ZXh0LnRvcG9Tb3J0LnNvcnQoKTtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0FsbCBkZXBlbmRlbmNpZXM6XFxuJyArIEpTT04uc3RyaW5naWZ5KGRlcHMsIG51bGwsIDIpKTtcblxuICAgICAgICAgICAgZGVwcyA9IGRlcHMuZmlsdGVyKGRlcCA9PiBjb21waWxlQ29udGV4dC5tYXBPZlRva2VuVG9NZXRhLmhhcyhkZXApKTtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0FsbCBuZWNlc3Nhcnkgc291cmNlIGNvZGU6XFxuJyArIEpTT04uc3RyaW5naWZ5KGRlcHMsIG51bGwsIDIpKTtcblxuICAgICAgICAgICAgbGV0IGFzdERvTG9hZE1haW4gPSBbXG4gICAgICAgICAgICAgICAgSnNMYW5nLmFzdFZhckRlY2xhcmUoJyRtZXRhJywgSnNMYW5nLmFzdFZhclJlZigndGhpcy5tZXRhJyksIHRydWUsIGZhbHNlLCAnUmV0cmlldmluZyB0aGUgbWV0YSBkYXRhJylcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIF8uZWFjaChkZXBzLCBkZXAgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBhc3RNZXRhID0gY29tcGlsZUNvbnRleHQubWFwT2ZUb2tlblRvTWV0YS5nZXQoZGVwKTtcblxuICAgICAgICAgICAgICAgIGxldCBhc3RCbG9jayA9IGNvbXBpbGVDb250ZXh0LmFzdE1hcFtkZXBdO1xuICAgICAgICAgICAgICAgIGFzc2VydDogYXN0QmxvY2ssICdFbXB0eSBhc3QgYmxvY2snO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFzdE1ldGEudHlwZSA9PT0gJ01vZGlmaWVyQ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkTmFtZSA9IGdldEZpZWxkTmFtZShhc3RNZXRhLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhc3RDYWNoZSA9IEpzTGFuZy5hc3RBc3NpZ24oSnNMYW5nLmFzdFZhclJlZihhc3RNZXRhLnRhcmdldCksIGFzdEJsb2NrLCBgTW9kaWZ5aW5nICR7ZmllbGROYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBhc3REb0xvYWRNYWluLnB1c2goYXN0Q2FjaGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXN0RG9Mb2FkTWFpbiA9IGFzdERvTG9hZE1haW4uY29uY2F0KF8uY2FzdEFycmF5KGNvbXBpbGVDb250ZXh0LmFzdE1hcFtkZXBdKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoY29tcGlsZUNvbnRleHQubWFwT2ZGdW5jdG9yVG9GaWxlKSkge1xuICAgICAgICAgICAgICAgIF8uZm9yT3duKGNvbXBpbGVDb250ZXh0Lm1hcE9mRnVuY3RvclRvRmlsZSwgKGZpbGVOYW1lLCBmdW5jdGlvbk5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgSnNMYW5nLmFzdFB1c2hJbkJvZHkoYXN0LCBKc0xhbmcuYXN0UmVxdWlyZShmdW5jdGlvbk5hbWUsICcuJyArIGZpbGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGNvbXBpbGVDb250ZXh0Lm5ld0Z1bmN0b3JGaWxlcykpIHtcbiAgICAgICAgICAgICAgICBfLmVhY2goY29tcGlsZUNvbnRleHQubmV3RnVuY3RvckZpbGVzLCBlbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dlbmVyYXRlRnVuY3Rpb25UZW1wbGF0ZUZpbGUoZGJTZXJ2aWNlLCBlbnRyeSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdENsYXNzRGVjbGFyZShjYXBpdGFsaXplZCwgJ1ZpZXcnLCBbXG4gICAgICAgICAgICAgICAgSnNMYW5nLmFzdE1lbWJlck1ldGhvZCgnX2RvTG9hZCcsIE9iamVjdC5rZXlzKHBhcmFtTWV0YSksXG4gICAgICAgICAgICAgICAgICAgIGFzdERvTG9hZE1haW4sXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLCB0cnVlLCBmYWxzZSwgJ1BvcHVsYXRlIHZpZXcgZGF0YSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdLCBgJHtjYXBpdGFsaXplZH0gdmlld2ApKTtcbiAgICAgICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdEFzc2lnbihjYXBpdGFsaXplZCArICcubWV0YScsIEpzTGFuZy5hc3RWYWx1ZSh2aWV3TWV0YSkpKTtcbiAgICAgICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdEFzc2lnbignbW9kdWxlLmV4cG9ydHMnLCBKc0xhbmcuYXN0VmFyUmVmKGNhcGl0YWxpemVkKSkpO1xuXG4gICAgICAgICAgICBsZXQgbW9kZWxGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLm91dHB1dFBhdGgsIGRiU2VydmljZS5kYlR5cGUsIGRiU2VydmljZS5uYW1lLCAndmlld3MnLCB2aWV3TmFtZSArICcuanMnKTtcbiAgICAgICAgICAgIGZzLmVuc3VyZUZpbGVTeW5jKG1vZGVsRmlsZVBhdGgpO1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhtb2RlbEZpbGVQYXRoICsgJy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYXN0LCBudWxsLCAyKSk7XG5cbiAgICAgICAgICAgIERhb01vZGVsZXIuX2V4cG9ydFNvdXJjZUNvZGUoYXN0LCBtb2RlbEZpbGVQYXRoKTtcblxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdpbmZvJywgJ0dlbmVyYXRlZCB2aWV3IG1vZGVsOiAnICsgbW9kZWxGaWxlUGF0aCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgKi9cblxuICAgIF9wcm9jZXNzRmllbGRNb2RpZmllcnMoZW50aXR5LCBzaGFyZWRDb250ZXh0KSB7XG4gICAgICAgIGxldCBjb21waWxlQ29udGV4dCA9IE9vbFRvQXN0LmNyZWF0ZUNvbXBpbGVDb250ZXh0KGVudGl0eS5vb2xNb2R1bGUubmFtZSwgdGhpcy5sb2dnZXIsIHNoYXJlZENvbnRleHQpO1xuICAgICAgICBjb21waWxlQ29udGV4dC52YXJpYWJsZXNbJ3JhdyddID0geyBzb3VyY2U6ICdjb250ZXh0JywgZmluYWxpemVkOiB0cnVlIH07XG4gICAgICAgIGNvbXBpbGVDb250ZXh0LnZhcmlhYmxlc1snaTE4biddID0geyBzb3VyY2U6ICdjb250ZXh0JywgZmluYWxpemVkOiB0cnVlIH07XG4gICAgICAgIGNvbXBpbGVDb250ZXh0LnZhcmlhYmxlc1snY29ubmVjdG9yJ10gPSB7IHNvdXJjZTogJ2NvbnRleHQnLCBmaW5hbGl6ZWQ6IHRydWUgfTtcbiAgICAgICAgY29tcGlsZUNvbnRleHQudmFyaWFibGVzWydsYXRlc3QnXSA9IHsgc291cmNlOiAnY29udGV4dCcgfTtcblxuICAgICAgICBjb25zdCBhbGxGaW5pc2hlZCA9IE9vbFRvQXN0LmNyZWF0ZVRvcG9JZChjb21waWxlQ29udGV4dCwgJ2RvbmUuJyk7XG5cbiAgICAgICAgLy9tYXAgb2YgZmllbGQgbmFtZSB0byBkZXBlbmRlbmNpZXNcbiAgICAgICAgbGV0IGZpZWxkUmVmZXJlbmNlcyA9IHt9O1xuXG4gICAgICAgIF8uZm9yT3duKGVudGl0eS5maWVsZHMsIChmaWVsZCwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgdG9wb0lkID0gT29sVG9Bc3QuY29tcGlsZUZpZWxkKGZpZWxkTmFtZSwgZmllbGQsIGNvbXBpbGVDb250ZXh0KTtcbiAgICAgICAgICAgIE9vbFRvQXN0LmRlcGVuZHNPbihjb21waWxlQ29udGV4dCwgdG9wb0lkLCBhbGxGaW5pc2hlZCk7XG5cbiAgICAgICAgICAgIGlmIChmaWVsZC53cml0ZU9uY2UgfHwgZmllbGQuZnJlZXplQWZ0ZXJOb25EZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgcHV0SW50b0J1Y2tldChmaWVsZFJlZmVyZW5jZXMsIGZpZWxkTmFtZSwgZmllbGROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGRlcHMgPSBjb21waWxlQ29udGV4dC50b3BvU29ydC5zb3J0KCk7XG4gICAgICAgIC8vdGhpcy5sb2dnZXIudmVyYm9zZSgnQWxsIGRlcGVuZGVuY2llczpcXG4nICsgSlNPTi5zdHJpbmdpZnkoZGVwcywgbnVsbCwgMikpO1xuXG4gICAgICAgIGRlcHMgPSBkZXBzLmZpbHRlcihkZXAgPT4gY29tcGlsZUNvbnRleHQubWFwT2ZUb2tlblRvTWV0YS5oYXMoZGVwKSk7XG4gICAgICAgIC8vdGhpcy5sb2dnZXIudmVyYm9zZSgnQWxsIG5lY2Vzc2FyeSBzb3VyY2UgY29kZTpcXG4nICsgSlNPTi5zdHJpbmdpZnkoZGVwcywgbnVsbCwgMikpO1xuXG4gICAgICAgIGxldCBtZXRob2RCb2R5VmFsaWRhdGVBbmRGaWxsID0gW10sIGxhc3RGaWVsZHNHcm91cCwgXG4gICAgICAgICAgICBtZXRob2RCb2R5Q2FjaGUgPSBbXSwgXG4gICAgICAgICAgICBsYXN0QmxvY2ssIGxhc3RBc3RUeXBlOy8vLCBoYXNWYWxpZGF0b3IgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBfbWVyZ2VEb1ZhbGlkYXRlQW5kRmlsbENvZGUgPSBmdW5jdGlvbiAoZmllbGROYW1lLCByZWZlcmVuY2VzLCBhc3RDYWNoZSwgcmVxdWlyZVRhcmdldEZpZWxkKSB7IFxuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IChyZXF1aXJlVGFyZ2V0RmllbGQgPyBbIGZpZWxkTmFtZSBdIDogW10pLmNvbmNhdChyZWZlcmVuY2VzKTtcbiAgICAgICAgICAgIGxldCBjaGVja2VyID0gZmllbGRzLmpvaW4oJywnKTtcblxuICAgICAgICAgICAgaWYgKGxhc3RGaWVsZHNHcm91cCAmJiBsYXN0RmllbGRzR3JvdXAuY2hlY2tlciAhPT0gY2hlY2tlcikge1xuICAgICAgICAgICAgICAgIG1ldGhvZEJvZHlWYWxpZGF0ZUFuZEZpbGwgPSBtZXRob2RCb2R5VmFsaWRhdGVBbmRGaWxsLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgU25pcHBldHMuX2ZpZWxkUmVxdWlyZW1lbnRDaGVjayhsYXN0RmllbGRzR3JvdXAuZmllbGROYW1lLCBsYXN0RmllbGRzR3JvdXAucmVmZXJlbmNlcywgbWV0aG9kQm9keUNhY2hlLCBsYXN0RmllbGRzR3JvdXAucmVxdWlyZVRhcmdldEZpZWxkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbWV0aG9kQm9keUNhY2hlID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1ldGhvZEJvZHlDYWNoZSA9IG1ldGhvZEJvZHlDYWNoZS5jb25jYXQoYXN0Q2FjaGUpO1xuICAgICAgICAgICAgbGFzdEZpZWxkc0dyb3VwID0ge1xuICAgICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VzLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVUYXJnZXRGaWVsZCwgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2hlY2tlcixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvL2NvbnNvbGUuZGlyKGNvbXBpbGVDb250ZXh0LmFzdE1hcFsnbW9iaWxlfmlzTW9iaWxlUGhvbmU6YXJnWzFdfD5zdHJpbmdEYXNoZXJpemUnXSwgeyBkZXB0aDogOCB9KTsgXG5cbiAgICAgICAgXy5lYWNoKGRlcHMsIChkZXAsIGkpID0+IHtcbiAgICAgICAgICAgIC8vZ2V0IG1ldGFkYXRhIG9mIHNvdXJjZSBjb2RlIGJsb2NrXG4gICAgICAgICAgICBsZXQgc291cmNlTWFwID0gY29tcGlsZUNvbnRleHQubWFwT2ZUb2tlblRvTWV0YS5nZXQoZGVwKTtcblxuICAgICAgICAgICAgLy9nZXQgc291cmNlIGNvZGUgYmxvY2tcbiAgICAgICAgICAgIGxldCBhc3RCbG9jayA9IGNvbXBpbGVDb250ZXh0LmFzdE1hcFtkZXBdO1xuXG4gICAgICAgICAgICBsZXQgdGFyZ2V0RmllbGROYW1lID0gZ2V0RmllbGROYW1lKHNvdXJjZU1hcC50YXJnZXQpOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpZiAoc291cmNlTWFwLnJlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGRSZWZlcmVuY2UgPSBmaWVsZFJlZmVyZW5jZXNbdGFyZ2V0RmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUmVmZXJlbmNlc1t0YXJnZXRGaWVsZE5hbWVdID0gZmllbGRSZWZlcmVuY2UgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzb3VyY2VNYXAucmVmZXJlbmNlcy5mb3JFYWNoKHJlZiA9PiB7IGlmIChmaWVsZFJlZmVyZW5jZS5pbmRleE9mKHJlZikgPT09IC0xKSBmaWVsZFJlZmVyZW5jZS5wdXNoKHJlZik7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgYXN0QmxvY2sgPSBjaGFpbkNhbGwobGFzdEJsb2NrLCBsYXN0QXN0VHlwZSwgYXN0QmxvY2ssIHNvdXJjZU1hcC50eXBlKTtcbiAgICAgICAgICAgICAgICBsYXN0QmxvY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpIDwgZGVwcy5sZW5ndGgtMSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0VHlwZSA9IGNvbXBpbGVDb250ZXh0Lm1hcE9mVG9rZW5Ub01ldGEuZ2V0KGRlcHNbaSsxXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNDaGFpbmFibGUoc291cmNlTWFwLCBuZXh0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEJsb2NrID0gYXN0QmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RBc3RUeXBlID0gc291cmNlTWFwLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmIChzb3VyY2VNYXAudHlwZSA9PT0gT29sVG9Bc3QuQVNUX0JMS19WQUxJREFUT1JfQ0FMTCkge1xuICAgICAgICAgICAgICAgIC8vaGFzVmFsaWRhdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsZXQgYXN0Q2FjaGUgPSBTbmlwcGV0cy5fdmFsaWRhdGVDaGVjayh0YXJnZXRGaWVsZE5hbWUsIGFzdEJsb2NrKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBfbWVyZ2VEb1ZhbGlkYXRlQW5kRmlsbENvZGUodGFyZ2V0RmllbGROYW1lLCBzb3VyY2VNYXAucmVmZXJlbmNlcywgYXN0Q2FjaGUsIHRydWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcC50eXBlID09PSBPb2xUb0FzdC5BU1RfQkxLX1BST0NFU1NPUl9DQUxMKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFzdENhY2hlID0gSnNMYW5nLmFzdEFzc2lnbihKc0xhbmcuYXN0VmFyUmVmKHNvdXJjZU1hcC50YXJnZXQsIHRydWUpLCBhc3RCbG9jaywgYFByb2Nlc3NpbmcgXCIke3RhcmdldEZpZWxkTmFtZX1cImApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIF9tZXJnZURvVmFsaWRhdGVBbmRGaWxsQ29kZSh0YXJnZXRGaWVsZE5hbWUsIHNvdXJjZU1hcC5yZWZlcmVuY2VzLCBhc3RDYWNoZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcC50eXBlID09PSBPb2xUb0FzdC5BU1RfQkxLX0FDVElWQVRPUl9DQUxMKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFzdENhY2hlID0gSnNMYW5nLmFzdEFzc2lnbihKc0xhbmcuYXN0VmFyUmVmKHNvdXJjZU1hcC50YXJnZXQsIHRydWUpLCBhc3RCbG9jaywgYEFjdGl2YXRpbmcgXCIke3RhcmdldEZpZWxkTmFtZX1cImApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIF9tZXJnZURvVmFsaWRhdGVBbmRGaWxsQ29kZSh0YXJnZXRGaWVsZE5hbWUsIHNvdXJjZU1hcC5yZWZlcmVuY2VzLCBhc3RDYWNoZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvIGJlIGltcGxlbWVudGVkLicpO1xuICAgICAgICAgICAgICAgIC8vYXN0QmxvY2sgPSBfLmNhc3RBcnJheShhc3RCbG9jayk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vX21lcmdlRG9WYWxpZGF0ZUFuZEZpbGxDb2RlKHRhcmdldEZpZWxkTmFtZSwgW10sIGFzdEJsb2NrKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvKiBDaGFuZ2VkIHRvIHRocm93IGVycm9yIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgZXJyb3Igb2JqZWN0XG4gICAgICAgIGlmIChoYXNWYWxpZGF0b3IpIHtcbiAgICAgICAgICAgIGxldCBkZWNsYXJlID0gSnNMYW5nLmFzdFZhckRlY2xhcmUodmFsaWRTdGF0ZU5hbWUsIGZhbHNlKTtcbiAgICAgICAgICAgIG1ldGhvZEJvZHlDcmVhdGUudW5zaGlmdChkZWNsYXJlKTtcbiAgICAgICAgICAgIG1ldGhvZEJvZHlVcGRhdGUudW5zaGlmdChkZWNsYXJlKTtcbiAgICAgICAgfVxuICAgICAgICAqL1xuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KG1ldGhvZEJvZHlDYWNoZSkpIHtcbiAgICAgICAgICAgIG1ldGhvZEJvZHlWYWxpZGF0ZUFuZEZpbGwgPSBtZXRob2RCb2R5VmFsaWRhdGVBbmRGaWxsLmNvbmNhdChcbiAgICAgICAgICAgICAgICBTbmlwcGV0cy5fZmllbGRSZXF1aXJlbWVudENoZWNrKGxhc3RGaWVsZHNHcm91cC5maWVsZE5hbWUsIFxuICAgICAgICAgICAgICAgICAgICBsYXN0RmllbGRzR3JvdXAucmVmZXJlbmNlcywgXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZEJvZHlDYWNoZSwgXG4gICAgICAgICAgICAgICAgICAgIGxhc3RGaWVsZHNHcm91cC5yZXF1aXJlVGFyZ2V0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGxldCBhc3QgPSBKc0xhbmcuYXN0UHJvZ3JhbShmYWxzZSk7XG4gICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdENsYXNzRGVjbGFyZSgnQWJjJywgJ01vZGVsJywgW1xuICAgICAgICAgICAgSnNMYW5nLmFzdE1lbWJlck1ldGhvZChhc3luY01ldGhvZE5hbWluZygncHJlcGFyZUVudGl0eURhdGFfJyksIFsgJ2NvbnRleHQnIF0sXG4gICAgICAgICAgICBTbmlwcGV0cy5fZG9WYWxpZGF0ZUFuZEZpbGxIZWFkZXIuY29uY2F0KG1ldGhvZEJvZHlWYWxpZGF0ZUFuZEZpbGwpLmNvbmNhdChbIEpzTGFuZy5hc3RSZXR1cm4oSnNMYW5nLmFzdElkKCdjb250ZXh0JykpIF0pLFxuICAgICAgICAgICAgZmFsc2UsIHRydWUsIHRydWVcbiAgICAgICAgKV0sICdjb21tZW50JykpO1xuICAgICAgICAqL1xuXG4gICAgICAgIHJldHVybiB7IGFzdDogSnNMYW5nLmFzdE1lbWJlck1ldGhvZChhc3luY01ldGhvZE5hbWluZygnYXBwbHlNb2RpZmllcnMnKSwgWyAnY29udGV4dCcsICdpc1VwZGF0aW5nJyBdLFxuICAgICAgICAgICAgU25pcHBldHMuX2FwcGx5TW9kaWZpZXJzSGVhZGVyLmNvbmNhdChtZXRob2RCb2R5VmFsaWRhdGVBbmRGaWxsKS5jb25jYXQoWyBKc0xhbmcuYXN0UmV0dXJuKEpzTGFuZy5hc3RJZCgnY29udGV4dCcpKSBdKSxcbiAgICAgICAgICAgIGZhbHNlLCB0cnVlLCB0cnVlLCAnQXBwbHlpbmcgcHJlZGVmaW5lZCBtb2RpZmllcnMgdG8gZW50aXR5IGZpZWxkcy4nXG4gICAgICAgICksIGZpZWxkUmVmZXJlbmNlcyB9O1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUZ1bmN0aW9uVGVtcGxhdGVGaWxlKHNjaGVtYSwgeyBmdW5jdGlvbk5hbWUsIGZ1bmN0b3JUeXBlLCBmaWxlTmFtZSwgYXJncyB9KSB7XG4gICAgICAgIGxldCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIHRoaXMub3V0cHV0UGF0aCxcbiAgICAgICAgICAgIHNjaGVtYS5uYW1lLFxuICAgICAgICAgICAgZmlsZU5hbWVcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcbiAgICAgICAgICAgIC8vdG9kbzogYW5hbHlzZSBjb2RlLCBjb21wYXJlIGFyZ3VtZW50c1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdpbmZvJywgYCR7IF8udXBwZXJGaXJzdChmdW5jdG9yVHlwZSkgfSBcIiR7ZmlsZU5hbWV9XCIgZXhpc3RzLiBGaWxlIGdlbmVyYXRpbmcgc2tpcHBlZC5gKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFzdCA9IEpzTGFuZy5hc3RQcm9ncmFtKCk7XG4gICAgICAgIFxuICAgICAgICBKc0xhbmcuYXN0UHVzaEluQm9keShhc3QsIEpzTGFuZy5hc3RGdW5jdGlvbihmdW5jdGlvbk5hbWUsIGFyZ3MsIE9PTF9NT0RJRklFUl9SRVRVUk5bZnVuY3RvclR5cGVdKGFyZ3MpKSk7XG4gICAgICAgIEpzTGFuZy5hc3RQdXNoSW5Cb2R5KGFzdCwgSnNMYW5nLmFzdEFzc2lnbignbW9kdWxlLmV4cG9ydHMnLCBKc0xhbmcuYXN0VmFyUmVmKGZ1bmN0aW9uTmFtZSkpKTtcblxuICAgICAgICBmcy5lbnN1cmVGaWxlU3luYyhmaWxlUGF0aCk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIEpzTGFuZy5hc3RUb0NvZGUoYXN0KSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnaW5mbycsIGBHZW5lcmF0ZWQgJHsgZnVuY3RvclR5cGUgfSBmaWxlOiAke2ZpbGVQYXRofWApO1xuICAgIH1cblxuICAgIF9idWlsZEludGVyZmFjZXMoZW50aXR5LCBtb2RlbE1ldGFJbml0LCBzaGFyZWRDb250ZXh0KSB7XG4gICAgICAgIGxldCBhc3QgPSBbXTtcblxuICAgICAgICBfLmZvck93bihlbnRpdHkuaW50ZXJmYWNlcywgKG1ldGhvZCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnQnVpbGRpbmcgaW50ZXJmYWNlOiAnICsgbmFtZSk7XG5cbiAgICAgICAgICAgIGxldCBhc3RCb2R5ID0gW1xuICAgICAgICAgICAgICAgIEpzTGFuZy5hc3RWYXJEZWNsYXJlKCckbWV0YScsIEpzTGFuZy5hc3RWYXJSZWYoJ3RoaXMubWV0YS5pbnRlcmZhY2VzLicgKyBuYW1lKSwgdHJ1ZSwgZmFsc2UsICdSZXRyaWV2aW5nIHRoZSBtZXRhIGRhdGEnKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgbGV0IGNvbXBpbGVDb250ZXh0ID0gT29sVG9Bc3QuY3JlYXRlQ29tcGlsZUNvbnRleHQoZW50aXR5Lm9vbE1vZHVsZS5uYW1lLCB0aGlzLmxvZ2dlciwgc2hhcmVkQ29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBwYXJhbU1ldGE7XG5cbiAgICAgICAgICAgIGlmIChtZXRob2QuYWNjZXB0KSB7XG4gICAgICAgICAgICAgICAgcGFyYW1NZXRhID0gdGhpcy5fcHJvY2Vzc1BhcmFtcyhtZXRob2QuYWNjZXB0LCBjb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vbWV0YWRhdGFcbiAgICAgICAgICAgIG1vZGVsTWV0YUluaXRbJ2ludGVyZmFjZXMnXSB8fCAobW9kZWxNZXRhSW5pdFsnaW50ZXJmYWNlcyddID0ge30pO1xuICAgICAgICAgICAgbW9kZWxNZXRhSW5pdFsnaW50ZXJmYWNlcyddW25hbWVdID0geyBwYXJhbXM6IE9iamVjdC52YWx1ZXMocGFyYW1NZXRhKSB9O1xuXG4gICAgICAgICAgICBfLmVhY2gobWV0aG9kLmltcGxlbWVudGF0aW9uLCAob3BlcmF0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vbGV0IGxhc3RUb3BvSWQgPSBcbiAgICAgICAgICAgICAgICBPb2xUb0FzdC5jb21waWxlRGJPcGVyYXRpb24oaW5kZXgsIG9wZXJhdGlvbiwgY29tcGlsZUNvbnRleHQsIGNvbXBpbGVDb250ZXh0Lm1haW5TdGFydElkKTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG1ldGhvZC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICBPb2xUb0FzdC5jb21waWxlRXhjZXB0aW9uYWxSZXR1cm4obWV0aG9kLnJldHVybiwgY29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGVwcyA9IGNvbXBpbGVDb250ZXh0LnRvcG9Tb3J0LnNvcnQoKTtcbiAgICAgICAgICAgIC8vdGhpcy5sb2dnZXIudmVyYm9zZSgnQWxsIGRlcGVuZGVuY2llczpcXG4nICsgSlNPTi5zdHJpbmdpZnkoZGVwcywgbnVsbCwgMikpO1xuXG4gICAgICAgICAgICBkZXBzID0gZGVwcy5maWx0ZXIoZGVwID0+IGNvbXBpbGVDb250ZXh0Lm1hcE9mVG9rZW5Ub01ldGEuaGFzKGRlcCkpO1xuICAgICAgICAgICAgLy90aGlzLmxvZ2dlci52ZXJib3NlKCdBbGwgbmVjZXNzYXJ5IHNvdXJjZSBjb2RlOlxcbicgKyBKU09OLnN0cmluZ2lmeShkZXBzLCBudWxsLCAyKSk7XG5cbiAgICAgICAgICAgIF8uZWFjaChkZXBzLCBkZXAgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VNYXAgPSBjb21waWxlQ29udGV4dC5tYXBPZlRva2VuVG9NZXRhLmdldChkZXApO1xuICAgICAgICAgICAgICAgIGxldCBhc3RCbG9jayA9IGNvbXBpbGVDb250ZXh0LmFzdE1hcFtkZXBdO1xuXG4gICAgICAgICAgICAgICAgLy90aGlzLmxvZ2dlci52ZXJib3NlKCdDb2RlIHBvaW50IFwiJyArIGRlcCArICdcIjpcXG4nICsgSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwLCBudWxsLCAyKSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RmllbGROYW1lID0gc291cmNlTWFwLnRhcmdldDsgLy9nZXRGaWVsZE5hbWUoc291cmNlTWFwLnRhcmdldCk7ICAgICAgXG5cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwLnR5cGUgPT09IE9vbFRvQXN0LkFTVF9CTEtfVkFMSURBVE9SX0NBTEwpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBhc3RCbG9jayA9IFNuaXBwZXRzLl92YWxpZGF0ZUNoZWNrKHRhcmdldEZpZWxkTmFtZSwgYXN0QmxvY2spO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXAudHlwZSA9PT0gT29sVG9Bc3QuQVNUX0JMS19QUk9DRVNTT1JfQ0FMTCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwLm5lZWREZWNsYXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3RCbG9jayA9IEpzTGFuZy5hc3RWYXJEZWNsYXJlKEpzTGFuZy5hc3RWYXJSZWYoc291cmNlTWFwLnRhcmdldCksIGFzdEJsb2NrLCBmYWxzZSwgZmFsc2UsIGBQcm9jZXNzaW5nIFwiJHt0YXJnZXRGaWVsZE5hbWV9XCJgKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXN0QmxvY2sgPSBKc0xhbmcuYXN0QXNzaWduKEpzTGFuZy5hc3RWYXJSZWYoc291cmNlTWFwLnRhcmdldCwgdHJ1ZSksIGFzdEJsb2NrLCBgUHJvY2Vzc2luZyBcIiR7dGFyZ2V0RmllbGROYW1lfVwiYCk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcC50eXBlID09PSBPb2xUb0FzdC5BU1RfQkxLX0FDVElWQVRPUl9DQUxMKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VNYXAubmVlZERlY2xhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzdEJsb2NrID0gSnNMYW5nLmFzdFZhckRlY2xhcmUoSnNMYW5nLmFzdFZhclJlZihzb3VyY2VNYXAudGFyZ2V0KSwgYXN0QmxvY2ssIGZhbHNlLCBmYWxzZSwgYFByb2Nlc3NpbmcgXCIke3RhcmdldEZpZWxkTmFtZX1cImApOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3RCbG9jayA9IEpzTGFuZy5hc3RBc3NpZ24oSnNMYW5nLmFzdFZhclJlZihzb3VyY2VNYXAudGFyZ2V0LCB0cnVlKSwgYXN0QmxvY2ssIGBBY3RpdmF0aW5nIFwiJHt0YXJnZXRGaWVsZE5hbWV9XCJgKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhc3RCb2R5ID0gYXN0Qm9keS5jb25jYXQoXy5jYXN0QXJyYXkoYXN0QmxvY2spKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhc3QucHVzaChKc0xhbmcuYXN0TWVtYmVyTWV0aG9kKGFzeW5jTWV0aG9kTmFtaW5nKG5hbWUpLCBPYmplY3Qua2V5cyhwYXJhbU1ldGEpLCBhc3RCb2R5LCBmYWxzZSwgdHJ1ZSwgdHJ1ZSwgcmVwbGFjZUFsbChfLmtlYmFiQ2FzZShuYW1lKSwgJy0nLCAnICcpKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhc3Q7XG4gICAgfTtcblxuICAgIF9wcm9jZXNzUGFyYW1zKGFjY2VwdFBhcmFtcywgY29tcGlsZUNvbnRleHQpIHtcbiAgICAgICAgbGV0IHBhcmFtTWV0YSA9IHt9O1xuXG4gICAgICAgIGFjY2VwdFBhcmFtcy5mb3JFYWNoKChwYXJhbSwgaSkgPT4ge1xuICAgICAgICAgICAgT29sVG9Bc3QuY29tcGlsZVBhcmFtKGksIHBhcmFtLCBjb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgICBwYXJhbU1ldGFbcGFyYW0ubmFtZV0gPSBwYXJhbTtcbiAgICAgICAgICAgIGNvbXBpbGVDb250ZXh0LnZhcmlhYmxlc1twYXJhbS5uYW1lXSA9IHsgc291cmNlOiAnYXJndW1lbnQnIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwYXJhbU1ldGE7XG4gICAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYW9Nb2RlbGVyOyJdfQ==