"use strict";

require("source-map-support/register");

const Util = require('../../util.js');

const _ = Util._;
const fs = Util.fs;

const path = require('path');

const escodegen = require('escodegen');

const Snippets = require('./dao/snippets.js');

class RestifyModeler {
  constructor(context, buildPath) {
    this.logger = context.logger;
    this.linker = context.linker;
    this.verbose = context.verbose;
    this.buildPath = buildPath;
  }

  modeling(schema, dbService) {
    this.logger.log('info', 'Modeling restful endpoints for schema "' + schema.name + '"...');

    _.forOwn(schema.entities, (entity, entityName) => {
      let controllerFile = path.resolve(this.buildPath, entityName + '.js');

      RestifyModeler._exportSourceCode(Snippets.restMethods(dbService.serviceId, entityName, _.upperFirst(entityName)), controllerFile);

      this.logger.log('info', 'Generated restful controller: ' + controllerFile);
    });
  }

  static _exportSourceCode(ast, modelFilePath) {
    let content = escodegen.generate(ast, {
      format: {
        indent: {
          style: '    ',
          base: 0,
          adjustMultilineComment: false
        },
        newline: '\n',
        space: ' ',
        json: false,
        renumber: false,
        hexadecimal: false,
        quotes: 'single',
        escapeless: false,
        compact: false,
        parentheses: true,
        semicolons: true,
        safeConcatenation: false
      },
      comment: true
    });
    fs.ensureFileSync(modelFilePath);
    fs.writeFileSync(modelFilePath, content);
  }

}

module.exports = RestifyModeler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbGVyL3Jlc3RpZnkuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZnMiLCJwYXRoIiwiZXNjb2RlZ2VuIiwiU25pcHBldHMiLCJSZXN0aWZ5TW9kZWxlciIsImNvbnN0cnVjdG9yIiwiY29udGV4dCIsImJ1aWxkUGF0aCIsImxvZ2dlciIsImxpbmtlciIsInZlcmJvc2UiLCJtb2RlbGluZyIsInNjaGVtYSIsImRiU2VydmljZSIsImxvZyIsIm5hbWUiLCJmb3JPd24iLCJlbnRpdGllcyIsImVudGl0eSIsImVudGl0eU5hbWUiLCJjb250cm9sbGVyRmlsZSIsInJlc29sdmUiLCJfZXhwb3J0U291cmNlQ29kZSIsInJlc3RNZXRob2RzIiwic2VydmljZUlkIiwidXBwZXJGaXJzdCIsImFzdCIsIm1vZGVsRmlsZVBhdGgiLCJjb250ZW50IiwiZ2VuZXJhdGUiLCJmb3JtYXQiLCJpbmRlbnQiLCJzdHlsZSIsImJhc2UiLCJhZGp1c3RNdWx0aWxpbmVDb21tZW50IiwibmV3bGluZSIsInNwYWNlIiwianNvbiIsInJlbnVtYmVyIiwiaGV4YWRlY2ltYWwiLCJxdW90ZXMiLCJlc2NhcGVsZXNzIiwiY29tcGFjdCIsInBhcmVudGhlc2VzIiwic2VtaWNvbG9ucyIsInNhZmVDb25jYXRlbmF0aW9uIiwiY29tbWVudCIsImVuc3VyZUZpbGVTeW5jIiwid3JpdGVGaWxlU3luYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxDQUFDLEdBQUdGLElBQUksQ0FBQ0UsQ0FBZjtBQUNBLE1BQU1DLEVBQUUsR0FBR0gsSUFBSSxDQUFDRyxFQUFoQjs7QUFFQSxNQUFNQyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsTUFBTUssUUFBUSxHQUFHTCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBRUEsTUFBTU0sY0FBTixDQUFxQjtBQVdqQkMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLFNBQVYsRUFBcUI7QUFDNUIsU0FBS0MsTUFBTCxHQUFjRixPQUFPLENBQUNFLE1BQXRCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjSCxPQUFPLENBQUNHLE1BQXRCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlSixPQUFPLENBQUNJLE9BQXZCO0FBQ0EsU0FBS0gsU0FBTCxHQUFpQkEsU0FBakI7QUFDSDs7QUFFREksRUFBQUEsUUFBUSxDQUFDQyxNQUFELEVBQVNDLFNBQVQsRUFBb0I7QUFDeEIsU0FBS0wsTUFBTCxDQUFZTSxHQUFaLENBQWdCLE1BQWhCLEVBQXdCLDRDQUE0Q0YsTUFBTSxDQUFDRyxJQUFuRCxHQUEwRCxNQUFsRjs7QUFFQWhCLElBQUFBLENBQUMsQ0FBQ2lCLE1BQUYsQ0FBU0osTUFBTSxDQUFDSyxRQUFoQixFQUEwQixDQUFDQyxNQUFELEVBQVNDLFVBQVQsS0FBd0I7QUFDOUMsVUFBSUMsY0FBYyxHQUFHbkIsSUFBSSxDQUFDb0IsT0FBTCxDQUFhLEtBQUtkLFNBQWxCLEVBQTZCWSxVQUFVLEdBQUcsS0FBMUMsQ0FBckI7O0FBQ0FmLE1BQUFBLGNBQWMsQ0FBQ2tCLGlCQUFmLENBQWlDbkIsUUFBUSxDQUFDb0IsV0FBVCxDQUFxQlYsU0FBUyxDQUFDVyxTQUEvQixFQUEwQ0wsVUFBMUMsRUFBc0RwQixDQUFDLENBQUMwQixVQUFGLENBQWFOLFVBQWIsQ0FBdEQsQ0FBakMsRUFBa0hDLGNBQWxIOztBQUVBLFdBQUtaLE1BQUwsQ0FBWU0sR0FBWixDQUFnQixNQUFoQixFQUF3QixtQ0FBbUNNLGNBQTNEO0FBQ0gsS0FMRDtBQU1IOztBQUVELFNBQU9FLGlCQUFQLENBQXlCSSxHQUF6QixFQUE4QkMsYUFBOUIsRUFBNkM7QUFDekMsUUFBSUMsT0FBTyxHQUFHMUIsU0FBUyxDQUFDMkIsUUFBVixDQUFtQkgsR0FBbkIsRUFBd0I7QUFDbENJLE1BQUFBLE1BQU0sRUFBRTtBQUNKQyxRQUFBQSxNQUFNLEVBQUU7QUFDSkMsVUFBQUEsS0FBSyxFQUFFLE1BREg7QUFFSkMsVUFBQUEsSUFBSSxFQUFFLENBRkY7QUFHSkMsVUFBQUEsc0JBQXNCLEVBQUU7QUFIcEIsU0FESjtBQU1KQyxRQUFBQSxPQUFPLEVBQUUsSUFOTDtBQU9KQyxRQUFBQSxLQUFLLEVBQUUsR0FQSDtBQVFKQyxRQUFBQSxJQUFJLEVBQUUsS0FSRjtBQVNKQyxRQUFBQSxRQUFRLEVBQUUsS0FUTjtBQVVKQyxRQUFBQSxXQUFXLEVBQUUsS0FWVDtBQVdKQyxRQUFBQSxNQUFNLEVBQUUsUUFYSjtBQVlKQyxRQUFBQSxVQUFVLEVBQUUsS0FaUjtBQWFKQyxRQUFBQSxPQUFPLEVBQUUsS0FiTDtBQWNKQyxRQUFBQSxXQUFXLEVBQUUsSUFkVDtBQWVKQyxRQUFBQSxVQUFVLEVBQUUsSUFmUjtBQWdCSkMsUUFBQUEsaUJBQWlCLEVBQUU7QUFoQmYsT0FEMEI7QUFtQmxDQyxNQUFBQSxPQUFPLEVBQUU7QUFuQnlCLEtBQXhCLENBQWQ7QUFzQkE5QyxJQUFBQSxFQUFFLENBQUMrQyxjQUFILENBQWtCcEIsYUFBbEI7QUFDQTNCLElBQUFBLEVBQUUsQ0FBQ2dELGFBQUgsQ0FBaUJyQixhQUFqQixFQUFnQ0MsT0FBaEM7QUFDSDs7QUF0RGdCOztBQXlEckJxQixNQUFNLENBQUNDLE9BQVAsR0FBaUI5QyxjQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vLi4vdXRpbC5qcycpO1xuY29uc3QgXyA9IFV0aWwuXztcbmNvbnN0IGZzID0gVXRpbC5mcztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGVzY29kZWdlbiA9IHJlcXVpcmUoJ2VzY29kZWdlbicpO1xuY29uc3QgU25pcHBldHMgPSByZXF1aXJlKCcuL2Rhby9zbmlwcGV0cy5qcycpO1xuXG5jbGFzcyBSZXN0aWZ5TW9kZWxlciB7XG4gICAgLyoqXG4gICAgICogT29sb25nIGRhdGFiYXNlIGFjY2VzcyBvYmplY3QgKERBTykgbW9kZWxlclxuICAgICAqIEBjb25zdHJ1Y3RzIE9vbG9uZ0Rhb01vZGVsZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgICAqIEBwcm9wZXJ0eSB7TG9nZ2VyfSBjb250ZXh0LmxvZ2dlciAtIExvZ2dlciBvYmplY3RcbiAgICAgKiBAcHJvcGVydHkge0FwcE1vZHVsZX0gY29udGV4dC5jdXJyZW50QXBwIC0gQ3VycmVudCBhcHAgbW9kdWxlXG4gICAgICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnZlcmJvc2UgLSBWZXJib3NlIG1vZGVcbiAgICAgKiBAcHJvcGVydHkge09vbG9uZ0xpbmtlcn0gY29udGV4dC5saW5rZXIgLSBPb2xvbmcgRFNMIGxpbmtlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZFBhdGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBidWlsZFBhdGgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb250ZXh0LmxvZ2dlcjtcbiAgICAgICAgdGhpcy5saW5rZXIgPSBjb250ZXh0LmxpbmtlcjtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gY29udGV4dC52ZXJib3NlO1xuICAgICAgICB0aGlzLmJ1aWxkUGF0aCA9IGJ1aWxkUGF0aDtcbiAgICB9XG5cbiAgICBtb2RlbGluZyhzY2hlbWEsIGRiU2VydmljZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2luZm8nLCAnTW9kZWxpbmcgcmVzdGZ1bCBlbmRwb2ludHMgZm9yIHNjaGVtYSBcIicgKyBzY2hlbWEubmFtZSArICdcIi4uLicpO1xuXG4gICAgICAgIF8uZm9yT3duKHNjaGVtYS5lbnRpdGllcywgKGVudGl0eSwgZW50aXR5TmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xsZXJGaWxlID0gcGF0aC5yZXNvbHZlKHRoaXMuYnVpbGRQYXRoLCBlbnRpdHlOYW1lICsgJy5qcycpO1xuICAgICAgICAgICAgUmVzdGlmeU1vZGVsZXIuX2V4cG9ydFNvdXJjZUNvZGUoU25pcHBldHMucmVzdE1ldGhvZHMoZGJTZXJ2aWNlLnNlcnZpY2VJZCwgZW50aXR5TmFtZSwgXy51cHBlckZpcnN0KGVudGl0eU5hbWUpKSwgY29udHJvbGxlckZpbGUpO1xuXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2luZm8nLCAnR2VuZXJhdGVkIHJlc3RmdWwgY29udHJvbGxlcjogJyArIGNvbnRyb2xsZXJGaWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9leHBvcnRTb3VyY2VDb2RlKGFzdCwgbW9kZWxGaWxlUGF0aCkge1xuICAgICAgICBsZXQgY29udGVudCA9IGVzY29kZWdlbi5nZW5lcmF0ZShhc3QsIHtcbiAgICAgICAgICAgIGZvcm1hdDoge1xuICAgICAgICAgICAgICAgIGluZGVudDoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJyAgICAnLFxuICAgICAgICAgICAgICAgICAgICBiYXNlOiAwLFxuICAgICAgICAgICAgICAgICAgICBhZGp1c3RNdWx0aWxpbmVDb21tZW50OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmV3bGluZTogJ1xcbicsXG4gICAgICAgICAgICAgICAgc3BhY2U6ICcgJyxcbiAgICAgICAgICAgICAgICBqc29uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZW51bWJlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaGV4YWRlY2ltYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHF1b3RlczogJ3NpbmdsZScsXG4gICAgICAgICAgICAgICAgZXNjYXBlbGVzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFyZW50aGVzZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgc2VtaWNvbG9uczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzYWZlQ29uY2F0ZW5hdGlvbjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21tZW50OiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZzLmVuc3VyZUZpbGVTeW5jKG1vZGVsRmlsZVBhdGgpO1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKG1vZGVsRmlsZVBhdGgsIGNvbnRlbnQpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN0aWZ5TW9kZWxlcjsiXX0=