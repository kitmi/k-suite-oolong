"use strict";

require("source-map-support/register");

const {
  withName,
  withExtraInfo
} = require('@k-suite/app/lib/utils/Helpers');

const HttpCode = require('http-status-codes');

const withHttpStatus = (Base, STATUS) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.status = STATUS;
    }

  }, _temp;
};

class BusinessError extends withExtraInfo(withName(Error)) {
  constructor(message, status, ...others) {
    super(message, ...others);
    this.status = status || HttpCode.BAD_REQUEST;
  }

}

class DataValidationError extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.BAD_REQUEST))) {}

class OolongUsageError extends withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR)) {}

class DsOperationError extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR))) {}

module.exports = {
  DataValidationError,
  OolongUsageError,
  DsOperationError,
  BusinessError
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL0Vycm9ycy5qcyJdLCJuYW1lcyI6WyJ3aXRoTmFtZSIsIndpdGhFeHRyYUluZm8iLCJyZXF1aXJlIiwiSHR0cENvZGUiLCJ3aXRoSHR0cFN0YXR1cyIsIkJhc2UiLCJTVEFUVVMiLCJzdGF0dXMiLCJCdXNpbmVzc0Vycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvdGhlcnMiLCJCQURfUkVRVUVTVCIsIkRhdGFWYWxpZGF0aW9uRXJyb3IiLCJPb2xvbmdVc2FnZUVycm9yIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiRHNPcGVyYXRpb25FcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxRQUFGO0FBQVlDLEVBQUFBO0FBQVosSUFBOEJDLE9BQU8sQ0FBQyxnQ0FBRCxDQUEzQzs7QUFDQSxNQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxtQkFBRCxDQUF4Qjs7QUFRQSxNQUFNRSxjQUFjLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQO0FBQUE7O0FBQUEsaUJBQWtCLGNBQWNELElBQWQsQ0FBbUI7QUFBQTtBQUFBO0FBQUEsV0FLeERFLE1BTHdELEdBSy9DRCxNQUwrQztBQUFBOztBQUFBLEdBQXJDO0FBQUEsQ0FBdkI7O0FBZUEsTUFBTUUsYUFBTixTQUE0QlAsYUFBYSxDQUFDRCxRQUFRLENBQUNTLEtBQUQsQ0FBVCxDQUF6QyxDQUEyRDtBQUN2REMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVKLE1BQVYsRUFBa0IsR0FBR0ssTUFBckIsRUFBNkI7QUFDcEMsVUFBTUQsT0FBTixFQUFlLEdBQUdDLE1BQWxCO0FBRUEsU0FBS0wsTUFBTCxHQUFjQSxNQUFNLElBQUlKLFFBQVEsQ0FBQ1UsV0FBakM7QUFDSDs7QUFMc0Q7O0FBYzNELE1BQU1DLG1CQUFOLFNBQWtDYixhQUFhLENBQUNELFFBQVEsQ0FBQ0ksY0FBYyxDQUFDSyxLQUFELEVBQVFOLFFBQVEsQ0FBQ1UsV0FBakIsQ0FBZixDQUFULENBQS9DLENBQXVHOztBQVN2RyxNQUFNRSxnQkFBTixTQUErQmYsUUFBUSxDQUFDSSxjQUFjLENBQUNLLEtBQUQsRUFBUU4sUUFBUSxDQUFDYSxxQkFBakIsQ0FBZixDQUF2QyxDQUErRjs7QUFVL0YsTUFBTUMsZ0JBQU4sU0FBK0JoQixhQUFhLENBQUNELFFBQVEsQ0FBQ0ksY0FBYyxDQUFDSyxLQUFELEVBQVFOLFFBQVEsQ0FBQ2EscUJBQWpCLENBQWYsQ0FBVCxDQUE1QyxDQUE4Rzs7QUFHOUdFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiTCxFQUFBQSxtQkFEYTtBQUViQyxFQUFBQSxnQkFGYTtBQUdiRSxFQUFBQSxnQkFIYTtBQUliVCxFQUFBQTtBQUphLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgd2l0aE5hbWUsIHdpdGhFeHRyYUluZm8gfSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcC9saWIvdXRpbHMvSGVscGVycycpO1xuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuXG4vKipcbiAqIEFkZHMgYSBzdGF0dXMgcHJvcGVydHkgdG8gdGhlIGNsYXNzLlxuICogQG1peGluXG4gKiBAcGFyYW0geyp9IEJhc2UgXG4gKiBAcGFyYW0geyp9IFNUQVRVUyBcbiAqL1xuY29uc3Qgd2l0aEh0dHBTdGF0dXMgPSAoQmFzZSwgU1RBVFVTKSA9PiBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEh0dHAgc3RhdHVzIGNvZGUuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHN0YXR1cyA9IFNUQVRVUztcbn07XG5cbi8qKlxuICogRXhwZWN0ZWQgYnVzaW5lc3MgZXJyb3JzIHVwb24gd3JvbmcgcmVxdWVzdC5cbiAqIEBjbGFzcyBFcnJvcnM6QnVzaW5lc3NFcnJvclxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm9cbiAqL1xuY2xhc3MgQnVzaW5lc3NFcnJvciBleHRlbmRzIHdpdGhFeHRyYUluZm8od2l0aE5hbWUoRXJyb3IpKSB7ICAgIFxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgLi4ub3RoZXJzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIC4uLm90aGVycyk7XG5cbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXMgfHwgSHR0cENvZGUuQkFEX1JFUVVFU1Q7XG4gICAgfVxufVxuXG4vKipcbiAqIEVycm9ycyBjYXVzZWQgYnkgZmFpbGluZyB0byBwYXNzIGlucHV0IHZhbGlkYXRpb25cbiAqIEBjbGFzcyBFcnJvcnM6RGF0YVZhbGlkYXRpb25FcnJvclxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICovXG5jbGFzcyBEYXRhVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgd2l0aEV4dHJhSW5mbyh3aXRoTmFtZSh3aXRoSHR0cFN0YXR1cyhFcnJvciwgSHR0cENvZGUuQkFEX1JFUVVFU1QpKSkge1xufVxuXG4vKipcbiAqIEVycm9ycyBjYXVzZWQgYnkgd3JvbmdseSB1c2FnZSBwYXR0ZXJucywgZS5nLiBjYWxsZWQgd2l0aCBpbnZhbGlkIG9wdGlvbnMuXG4gKiBAY2xhc3MgRXJyb3JzOk9vbG9uZ1VzYWdlRXJyb3JcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aE5hbWVcbiAqL1xuY2xhc3MgT29sb25nVXNhZ2VFcnJvciBleHRlbmRzIHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKSB7XG59XG5cbi8qKlxuICogRXJyb3JzIG9jY3VycmVkIGR1cmluZyBwZXJmb3JtaW5nIG9wZXJhdGlvbnMgYWdhaW5zdCBhIGRhdGEgc291cmNlLlxuICogQGNsYXNzIEVycm9yczpEc09wZXJhdGlvbkVycm9yXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mb1xuICovXG5jbGFzcyBEc09wZXJhdGlvbkVycm9yIGV4dGVuZHMgd2l0aEV4dHJhSW5mbyh3aXRoTmFtZSh3aXRoSHR0cFN0YXR1cyhFcnJvciwgSHR0cENvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SKSkpIHsgICAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIERhdGFWYWxpZGF0aW9uRXJyb3IsXG4gICAgT29sb25nVXNhZ2VFcnJvcixcbiAgICBEc09wZXJhdGlvbkVycm9yLFxuICAgIEJ1c2luZXNzRXJyb3Jcbn07Il19