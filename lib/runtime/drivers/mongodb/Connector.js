"use strict";

require("source-map-support/register");

const {
  _,
  waitUntil_
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const mongodb = tryRequire('mongodb');
const MongoClient = mongodb.MongoClient;

const Connector = require('../../Connector');

class MongodbConnector extends Connector {
  constructor(connectionString, options) {
    super('mongodb', connectionString, options);
    this.findAll_ = this.find_;
  }

  async end_() {
    if (this.client && this.client.isConnected()) {
      this.client.close();
    }

    delete this.client;
  }

  async connect_() {
    if (!this.client || !this.client.isConnected()) {
      let client = new MongoClient(this.connectionString, {
        useNewUrlParser: true
      });
      this.client = await client.connect();
    }

    return this.client.db(this.database);
  }

  async execute_(dbExecutor) {
    let db;

    try {
      db = await this.connect_();
      return await dbExecutor(db);
    } catch (err) {
      throw err;
    } finally {
      db && (await this.disconnect_(db));
    }
  }

  async disconnect_(conn) {}

  async ping_() {
    return this.execute_(db => {
      return db.listCollections(null, {
        nameOnly: true
      }).toArray();
    });
  }

  async insertOne_(model, data, options) {
    return this.onCollection_(model, coll => coll.insertOne(data, {
      bypassDocumentValidation: true,
      ...options
    }));
  }

  async insertMany_(model, data, options) {
    return this.onCollection_(model, coll => coll.insertMany(data, {
      bypassDocumentValidation: true,
      ordered: false,
      ...options
    }));
  }

  async findOneAndReplace_(model, data, condition, options) {
    return this.onCollection_(model, coll => coll.findOneAndReplace(condition, data, options));
  }

  async findOneAndUpdate_(model, data, condition, options) {
    return this.onCollection_(model, coll => coll.findOneAndUpdate(condition, {
      $set: data
    }, options));
  }

  async findOneAndDelete_(model, condition, options) {
    return this.onCollection_(model, coll => coll.findOneAndDelete(condition, options));
  }

  async findOne_(model, condition, options) {
    return this.onCollection_(model, coll => coll.findOne(condition, options));
  }

  async updateOne_(model, data, condition, options) {
    return this.onCollection_(model, coll => coll.updateOne(condition, {
      $set: data
    }, options));
  }

  async upsertOne_(model, data, condition, options, retry) {
    return this.onCollection_(model, async coll => {
      let current = await coll.findOneAndUpdate(condition, {
        $set: {
          __lock: true
        }
      });

      if (current.value) {
        return coll.updateOne({
          _id: current.value._id
        }, {
          $set: _.omit(data, ['_id'])
        }, {
          bypassDocumentValidation: true,
          ...options
        });
      } else {
        try {
          return await coll.insertOne(data, {
            bypassDocumentValidation: true,
            ...options
          });
        } catch (error) {
          if (!retry && error.message.startsWith('E11000 duplicate key error')) {
            return this.upsertOne_(model, data, condition, options, true);
          }

          throw error;
        }
      }
    });
  }

  async upsertMany_(model, data, uniqueKeys, options) {
    let ops = data.map(record => {
      let {
        _id,
        ...updateData
      } = record;
      let updateOp = {
        $set: updateData
      };

      if (_id) {
        updateOp.$setOnInsert = {
          _id
        };
      }

      return {
        updateOne: {
          filter: { ..._.pick(record, uniqueKeys)
          },
          update: updateOp,
          upsert: true
        }
      };
    });
    return this.onCollection_(model, coll => coll.bulkWrite(ops, {
      bypassDocumentValidation: true,
      ordered: false,
      ...options
    }));
  }

  async insertManyIfNotExist_(model, data, uniqueKeys, options) {
    let ops = data.map(record => ({
      updateOne: {
        filter: { ..._.pick(record, uniqueKeys)
        },
        update: {
          $setOnInsert: record
        },
        upsert: true
      }
    }));
    return this.onCollection_(model, coll => coll.bulkWrite(ops, {
      bypassDocumentValidation: true,
      ordered: false,
      ...options
    }));
  }

  async updateMany_(model, data, condition, options) {
    return this.onCollection_(model, coll => coll.updateMany(condition, {
      $set: data
    }, options));
  }

  async replaceOne_(model, data, condition, options) {
    return this.onCollection_(model, coll => coll.replaceOne(condition, data, options));
  }

  async deleteOne_(model, condition, options) {
    return this.onCollection_(model, coll => coll.deleteOne(condition, options));
  }

  async deleteMany_(model, condition, options) {
    return this.onCollection_(model, coll => coll.deleteMany(condition, options));
  }

  async find_(model, condition, options) {
    return this.onCollection_(model, async coll => {
      let queryOptions = { ...options
      };
      let query = {};

      if (condition) {
        let {
          $projection,
          $orderBy,
          $offset,
          $limit,
          $query,
          ...others
        } = condition;

        if ($projection) {
          queryOptions.projection = $projection;
        }

        if ($orderBy) {
          queryOptions.sort = $orderBy;
        }

        if ($offset) {
          queryOptions.skip = $offset;
        }

        if ($limit) {
          queryOptions.limit = $limit;
        }

        Object.assign(query, _.pickBy(others, (v, k) => k[0] !== '$'));

        if ($query) {
          Object.assign(query, $query);
        }
      }

      let result = await coll.find(query, queryOptions).toArray();

      if (condition && condition.$totalCount) {
        let totalCount = await coll.find(query).count();
        return [result, totalCount];
      }

      return result;
    });
  }

  async onCollection_(model, executor) {
    return this.execute_(db => executor(db.collection(model)));
  }

}

module.exports = MongodbConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,