"use strict";

require("source-map-support/register");

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const mongodb = tryRequire('mongodb');
const MongoClient = mongodb.MongoClient;

const Connector = require('../../Connector');

class MongodbConnector extends Connector {
  constructor(connectionString, options) {
    super('mongodb', connectionString, options);
    this.client = new MongoClient(this.connectionString, {
      useNewUrlParser: true
    });
  }

  async end_() {
    if (this.client.isConnected()) {
      this.client.close();
    }

    delete this.client;
  }

  async connect_(options) {
    await this.client.connect();
    return this.client.db(this.database);
  }

  async disconnect_(conn) {
    this.client.close();
  }

  async ping_() {
    let db;

    try {
      db = await this.connect_();
      await db.listCollections(null, {
        nameOnly: true
      }).toArray();
      return true;
    } catch (err) {
      this.log('error', err.stack);
      return false;
    } finally {
      db && (await this.disconnect_(db));
    }
  }

  async insertOne_(model, data, options) {
    return this._execute_(model, options, coll => coll.insertOne(data, {
      forceServerObjectId: true,
      bypassDocumentValidation: true
    }));
  }

  async findAndReplace_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.findAndReplace(condition, data, {
      upsert: true,
      returnOriginal: true
    }));
  }

  async update_(model, data, condition, options) {
    return _execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }));
  }

  async replace_(model, data, options) {
    return _execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }, {
      upsert: true
    }));
  }

  async delete_(model, condition, options) {
    return _execute_(model, options, coll => coll.deleteOne(condition));
  }

  async find_(model, condition, options) {
    let db;

    try {
      db = await this._getConnection_(options);
      let queryOptions = {};

      if (!_.isEmpty(condition.$projection)) {
        queryOptions.projection = condition.$projection;
      }

      if (!_.isEmpty(condition.$orderBy)) {
        queryOptions.sort = condition.$orderBy;
      }

      if (!_.isEmpty(condition.$offset)) {
        queryOptions.skip = condition.$offset;
      }

      if (!_.isEmpty(condition.$limit)) {
        queryOptions.limit = condition.$limit;
      }

      return await db.collection(model).find($query, queryOptions).toArray();
    } catch (err) {
      this.log('error', err.message, {
        stack: err.stack
      });
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _execute_(model, options, executor) {
    let db;

    try {
      db = await this._getConnection_(options);
      return await executor(db.collection(model));
    } catch (err) {
      throw err;
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _getConnection_(options) {
    return options && options.connection ? options.connection : this.connect_(options);
  }

  async _releaseConnection_(conn, options) {
    if (!options || !options.connection) {
      return this.disconnect_(conn);
    }
  }

}

module.exports = MongodbConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbW9uZ29kYi9Db25uZWN0b3IuanMiXSwibmFtZXMiOlsidHJ5UmVxdWlyZSIsInJlcXVpcmUiLCJtb25nb2RiIiwiTW9uZ29DbGllbnQiLCJDb25uZWN0b3IiLCJNb25nb2RiQ29ubmVjdG9yIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uU3RyaW5nIiwib3B0aW9ucyIsImNsaWVudCIsInVzZU5ld1VybFBhcnNlciIsImVuZF8iLCJpc0Nvbm5lY3RlZCIsImNsb3NlIiwiY29ubmVjdF8iLCJjb25uZWN0IiwiZGIiLCJkYXRhYmFzZSIsImRpc2Nvbm5lY3RfIiwiY29ubiIsInBpbmdfIiwibGlzdENvbGxlY3Rpb25zIiwibmFtZU9ubHkiLCJ0b0FycmF5IiwiZXJyIiwibG9nIiwic3RhY2siLCJpbnNlcnRPbmVfIiwibW9kZWwiLCJkYXRhIiwiX2V4ZWN1dGVfIiwiY29sbCIsImluc2VydE9uZSIsImZvcmNlU2VydmVyT2JqZWN0SWQiLCJieXBhc3NEb2N1bWVudFZhbGlkYXRpb24iLCJmaW5kQW5kUmVwbGFjZV8iLCJjb25kaXRpb24iLCJmaW5kQW5kUmVwbGFjZSIsInVwc2VydCIsInJldHVybk9yaWdpbmFsIiwidXBkYXRlXyIsInVwZGF0ZU9uZSIsIiRzZXQiLCJyZXBsYWNlXyIsImRlbGV0ZV8iLCJkZWxldGVPbmUiLCJmaW5kXyIsIl9nZXRDb25uZWN0aW9uXyIsInF1ZXJ5T3B0aW9ucyIsIl8iLCJpc0VtcHR5IiwiJHByb2plY3Rpb24iLCJwcm9qZWN0aW9uIiwiJG9yZGVyQnkiLCJzb3J0IiwiJG9mZnNldCIsInNraXAiLCIkbGltaXQiLCJsaW1pdCIsImNvbGxlY3Rpb24iLCJmaW5kIiwiJHF1ZXJ5IiwibWVzc2FnZSIsIl9yZWxlYXNlQ29ubmVjdGlvbl8iLCJleGVjdXRvciIsImNvbm5lY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtB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QUsrQyxtQkFBTCxDQUF5Qi9DLEVBQXpCLEVBQTZCUixPQUE3QixDQUFWLENBQUY7QUFDSDtBQUNKOztBQUVELFFBQU11QyxlQUFOLENBQXNCdkMsT0FBdEIsRUFBK0I7QUFDM0IsV0FBUUEsT0FBTyxJQUFJQSxPQUFPLENBQUN5RCxVQUFwQixHQUFrQ3pELE9BQU8sQ0FBQ3lELFVBQTFDLEdBQXVELEtBQUtuRCxRQUFMLENBQWNOLE9BQWQsQ0FBOUQ7QUFDSDs7QUFFRCxRQUFNdUQsbUJBQU4sQ0FBMEI1QyxJQUExQixFQUFnQ1gsT0FBaEMsRUFBeUM7QUFDckMsUUFBSSxDQUFDQSxPQUFELElBQVksQ0FBQ0EsT0FBTyxDQUFDeUQsVUFBekIsRUFBcUM7QUFDakMsYUFBTyxLQUFLL0MsV0FBTCxDQUFpQkMsSUFBakIsQ0FBUDtBQUNIO0FBQ0o7O0FBektvQzs7QUE0S3pDK0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUQsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IG1vbmdvZGIgPSB0cnlSZXF1aXJlKCdtb25nb2RiJyk7XG5jb25zdCBNb25nb0NsaWVudCA9IG1vbmdvZGIuTW9uZ29DbGllbnQ7XG5jb25zdCBDb25uZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9Db25uZWN0b3InKTtcblxuLyoqXG4gKiBNb25nb2RiIGRhdGEgc3RvcmFnZSBjb25uZWN0b3IuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIENvbm5lY3RvclxuICovXG5jbGFzcyBNb25nb2RiQ29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ21vbmdvZGInLCBjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKTsgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh0aGlzLmNvbm5lY3Rpb25TdHJpbmcsIHt1c2VOZXdVcmxQYXJzZXI6IHRydWV9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSBhbGwgY29ubmVjdGlvbiBpbml0aWF0ZWQgYnkgdGhpcyBjb25uZWN0b3IuXG4gICAgICovXG4gICAgYXN5bmMgZW5kXygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50LmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuY2xpZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gYmFzZWQgb24gdGhlIGRlZmF1bHQgY29ubmVjdGlvbiBzdHJpbmcgb2YgdGhlIGNvbm5lY3RvciBhbmQgZ2l2ZW4gb3B0aW9ucy4gICAgIFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBFeHRyYSBvcHRpb25zIGZvciB0aGUgY29ubmVjdGlvbiwgb3B0aW9uYWwuXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5tdWx0aXBsZVN0YXRlbWVudHM9ZmFsc2VdIC0gQWxsb3cgcnVubmluZyBtdWx0aXBsZSBzdGF0ZW1lbnRzIGF0IGEgdGltZS5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmNyZWF0ZURhdGFiYXNlPWZhbHNlXSAtIEZsYWcgdG8gdXNlZCB3aGVuIGNyZWF0aW5nIGEgZGF0YWJhc2UuXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPE15U1FMQ29ubmVjdGlvbj59XG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdF8ob3B0aW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5jb25uZWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmRiKHRoaXMuZGF0YWJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGEgZGF0YWJhc2UgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge015U1FMQ29ubmVjdGlvbn0gY29ubiAtIE15U1FMIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgZGlzY29ubmVjdF8oY29ubikgeyAgICAgICAgXG4gICAgICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7ICAgICAgICBcbiAgICB9XG4gIFxuICAgIGFzeW5jIHBpbmdfKCkgeyAgXG4gICAgICAgIGxldCBkYjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGIgPSAgYXdhaXQgdGhpcy5jb25uZWN0XygpO1xuICAgICAgICAgICAgYXdhaXQgZGIubGlzdENvbGxlY3Rpb25zKG51bGwsIHsgbmFtZU9ubHk6IHRydWUgfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2coJ2Vycm9yJywgZXJyLnN0YWNrKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRiICYmIGF3YWl0IHRoaXMuZGlzY29ubmVjdF8oZGIpO1xuICAgICAgICB9ICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBlbnRpdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBpbnNlcnRPbmVfKG1vZGVsLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwuaW5zZXJ0T25lKGRhdGEsIHsgZm9yY2VTZXJ2ZXJPYmplY3RJZDogdHJ1ZSwgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uOiB0cnVlIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIChpbnNlcnQgb3IgdXBkYXRlIGZvciBleHNpc3RpbmcpIGFuIGVudGl0eSBhbmQgcmV0dXJuIG9yaWdpbmFsIHJlY29yZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRBbmRSZXBsYWNlXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwuZmluZEFuZFJlcGxhY2UoY29uZGl0aW9uLCBkYXRhLCB7IHVwc2VydDogdHJ1ZSwgcmV0dXJuT3JpZ2luYWw6IHRydWUgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBlbnRpdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGVfKG1vZGVsLCBkYXRhLCBjb25kaXRpb24sIG9wdGlvbnMpIHsgXG4gICAgICAgIHJldHVybiBfZXhlY3V0ZV8obW9kZWwsIG9wdGlvbnMsIChjb2xsKSA9PiBjb2xsLnVwZGF0ZU9uZShjb25kaXRpb24sIHsgJHNldDogZGF0YSB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBhbiBleGlzdGluZyBlbnRpdHkgb3IgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxhY2VfKG1vZGVsLCBkYXRhLCBvcHRpb25zKSB7ICBcbiAgICAgICAgcmV0dXJuIF9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwudXBkYXRlT25lKGNvbmRpdGlvbiwgeyAkc2V0OiBkYXRhIH0sIHt1cHNlcnQ6IHRydWV9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV4aXN0aW5nIGVudGl0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHsqfSBjb25kaXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZV8obW9kZWwsIGNvbmRpdGlvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX2V4ZWN1dGVfKG1vZGVsLCBvcHRpb25zLCAoY29sbCkgPT4gY29sbC5kZWxldGVPbmUoY29uZGl0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBzZWxlY3Qgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gbW9kZWwgXG4gICAgICogQHBhcmFtIHsqfSBjb25kaXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRfKG1vZGVsLCBjb25kaXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGRiO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYiA9IGF3YWl0IHRoaXMuX2dldENvbm5lY3Rpb25fKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBsZXQgcXVlcnlPcHRpb25zID0geyAgfTtcblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoY29uZGl0aW9uLiRwcm9qZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5wcm9qZWN0aW9uID0gY29uZGl0aW9uLiRwcm9qZWN0aW9uOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoY29uZGl0aW9uLiRvcmRlckJ5KSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5zb3J0ID0gY29uZGl0aW9uLiRvcmRlckJ5OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoY29uZGl0aW9uLiRvZmZzZXQpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlPcHRpb25zLnNraXAgPSBjb25kaXRpb24uJG9mZnNldDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGNvbmRpdGlvbi4kbGltaXQpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlPcHRpb25zLmxpbWl0ID0gY29uZGl0aW9uLiRsaW1pdDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBkYi5jb2xsZWN0aW9uKG1vZGVsKS5maW5kKCRxdWVyeSwgcXVlcnlPcHRpb25zKS50b0FycmF5KCk7XG4gICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZygnZXJyb3InLCBlcnIubWVzc2FnZSwgeyBzdGFjazogZXJyLnN0YWNrIH0pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZGIgJiYgYXdhaXQgdGhpcy5fcmVsZWFzZUNvbm5lY3Rpb25fKGRiLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0gICBcblxuICAgIGFzeW5jIF9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgZXhlY3V0b3IpIHtcbiAgICAgICAgbGV0IGRiO1xuICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGIgPSBhd2FpdCB0aGlzLl9nZXRDb25uZWN0aW9uXyhvcHRpb25zKTtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGV4ZWN1dG9yKGRiLmNvbGxlY3Rpb24obW9kZWwpKTtcbiAgICAgICAgfSBjYXRjaChlcnIpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRiICYmIGF3YWl0IHRoaXMuX3JlbGVhc2VDb25uZWN0aW9uXyhkYiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfZ2V0Q29ubmVjdGlvbl8ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKG9wdGlvbnMgJiYgb3B0aW9ucy5jb25uZWN0aW9uKSA/IG9wdGlvbnMuY29ubmVjdGlvbiA6IHRoaXMuY29ubmVjdF8ob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgX3JlbGVhc2VDb25uZWN0aW9uXyhjb25uLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0Xyhjb25uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb25nb2RiQ29ubmVjdG9yOyJdfQ==