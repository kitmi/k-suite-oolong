"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const mongodb = tryRequire('mongodb');
const MongoClient = mongodb.MongoClient;

const Connector = require('../../Connector');

class MongodbConnector extends Connector {
  constructor(connectionString, options) {
    super('mongodb', connectionString, options);
  }

  async end_() {
    if (this.client && this.client.isConnected()) {
      this.client.close();
    }

    delete this.client;
  }

  async connect_(options) {
    if (!this.client || !this.client.isConnected()) {
      this.client = new MongoClient(this.connectionString, {
        useNewUrlParser: true
      });
      await this.client.connect();
      this.log('debug', 'Create connection: ' + this.connectionString);
    }

    return this.client.db(this.database);
  }

  async execute_(dbExecutor, options) {
    let db;

    try {
      db = await this._getConnection_(options);
      return await dbExecutor(db);
    } catch (err) {
      throw err;
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async disconnect_(conn) {}

  async ping_() {
    let db;

    try {
      db = await this.connect_();
      await db.listCollections(null, {
        nameOnly: true
      }).toArray();
      return true;
    } catch (err) {
      this.log('error', err.stack);
      return false;
    } finally {
      db && (await this.disconnect_(db));
    }
  }

  async insertOne_(model, data, options) {
    return this._execute_(model, options, coll => coll.insertOne(data, {
      forceServerObjectId: true,
      bypassDocumentValidation: true
    }));
  }

  async findAndReplace_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.findAndReplace(condition, data, {
      upsert: true,
      returnOriginal: true
    }));
  }

  async findOne_(model, condition, options) {
    return this._execute_(model, options, coll => coll.findOne(condition));
  }

  async updateOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }));
  }

  async upsertOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }, {
      upsert: true
    }));
  }

  async replaceOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.replaceOne(condition, data));
  }

  async deleteOne_(model, condition, options) {
    return this._execute_(model, options, coll => coll.deleteOne(condition));
  }

  async find_(model, condition, options) {
    let db;

    try {
      db = await this._getConnection_(options);
      let queryOptions = {};

      if (!_.isEmpty(condition.$projection)) {
        queryOptions.projection = condition.$projection;
      }

      if (!_.isEmpty(condition.$orderBy)) {
        queryOptions.sort = condition.$orderBy;
      }

      if (!_.isEmpty(condition.$offset)) {
        queryOptions.skip = condition.$offset;
      }

      if (!_.isEmpty(condition.$limit)) {
        queryOptions.limit = condition.$limit;
      }

      let query = condition.$query || {};
      console.log('query', query);
      console.log('queryOptions', queryOptions);
      return await db.collection(model).find(query, queryOptions).toArray();
    } catch (err) {
      this.log('error', err.message, {
        stack: err.stack
      });
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _execute_(model, options, executor) {
    let db;

    try {
      db = await this._getConnection_(options);
      return await executor(db.collection(model));
    } catch (err) {
      throw err;
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _getConnection_(options) {
    return options && options.connection ? options.connection : this.connect_(options);
  }

  async _releaseConnection_(conn, options) {
    if (!options || !options.connection) {
      return this.disconnect_(conn);
    }
  }

}

module.exports = MongodbConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,