"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const mongodb = tryRequire('mongodb');
const MongoClient = mongodb.MongoClient;

const Connector = require('../../Connector');

class MongodbConnector extends Connector {
  constructor(connectionString, options) {
    super('mongodb', connectionString, options);
  }

  async end_() {
    if (this.client && this.client.isConnected()) {
      this.client.close();
    }

    delete this.client;
  }

  async connect_(options) {
    if (!this.client || !this.client.isConnected()) {
      this.client = new MongoClient(this.connectionString, {
        useNewUrlParser: true
      });
      await this.client.connect();
      this.log('debug', 'Create connection: ' + this.connectionString);
    }

    return this.client.db(this.database);
  }

  async execute_(dbExecutor, options) {
    let db;

    try {
      db = await this._getConnection_(options);
      return await dbExecutor(db);
    } catch (err) {
      throw err;
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async disconnect_(conn) {}

  async ping_() {
    let db;

    try {
      db = await this.connect_();
      await db.listCollections(null, {
        nameOnly: true
      }).toArray();
      return true;
    } catch (err) {
      this.log('error', err.stack);
      return false;
    } finally {
      db && (await this.disconnect_(db));
    }
  }

  async insertOne_(model, data, options) {
    return this._execute_(model, options, coll => coll.insertOne(data, {
      forceServerObjectId: true,
      bypassDocumentValidation: true
    }));
  }

  async findAndReplace_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.findAndReplace(condition, data, {
      upsert: true,
      returnOriginal: true
    }));
  }

  async findOne_(model, condition, options) {
    return this._execute_(model, options, coll => coll.findOne(condition));
  }

  async updateOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }));
  }

  async upsertOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.updateOne(condition, {
      $set: data
    }, {
      upsert: true
    }));
  }

  async replaceOne_(model, data, condition, options) {
    return this._execute_(model, options, coll => coll.replaceOne(condition, data));
  }

  async deleteOne_(model, condition, options) {
    return this._execute_(model, options, coll => coll.deleteOne(condition));
  }

  async find_(model, condition, options) {
    let db;

    try {
      db = await this._getConnection_(options);
      let queryOptions = {};
      console.log(condition);

      if (condition.$projection) {
        queryOptions.projection = condition.$projection;
      }

      if (condition.$orderBy) {
        queryOptions.sort = condition.$orderBy;
      }

      if (condition.$offset) {
        queryOptions.skip = condition.$offset;
      }

      if (condition.$limit) {
        queryOptions.limit = condition.$limit;
      }

      let query = condition.$query || {};
      console.log('query', query);
      console.log('queryOptions', queryOptions);
      let result = await db.collection(model).find(query, queryOptions).toArray();

      if (condition.$totalCount) {
        let totalCount = await db.collection(model).find(query).count();
        return [result, totalCount];
      }

      return result;
    } catch (err) {
      this.log('error', err.message, {
        stack: err.stack
      });
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _execute_(model, options, executor) {
    let db;

    try {
      db = await this._getConnection_(options);
      return await executor(db.collection(model));
    } catch (err) {
      throw err;
    } finally {
      db && (await this._releaseConnection_(db, options));
    }
  }

  async _getConnection_(options) {
    return options && options.connection ? options.connection : this.connect_(options);
  }

  async _releaseConnection_(conn, options) {
    if (!options || !options.connection) {
      return this.disconnect_(conn);
    }
  }

}

module.exports = MongodbConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbW9uZ29kYi9Db25uZWN0b3IuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJ0cnlSZXF1aXJlIiwibW9uZ29kYiIsIk1vbmdvQ2xpZW50IiwiQ29ubmVjdG9yIiwiTW9uZ29kYkNvbm5lY3RvciIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvblN0cmluZyIsIm9wdGlvbnMiLCJlbmRfIiwiY2xpZW50IiwiaXNDb25uZWN0ZWQiLCJjbG9zZSIsImNvbm5lY3RfIiwidXNlTmV3VXJsUGFyc2VyIiwiY29ubmVjdCIsImxvZyIsImRiIiwiZGF0YWJhc2UiLCJleGVjdXRlXyIsImRiRXhlY3V0b3IiLCJfZ2V0Q29ubmVjdGlvbl8iLCJlcnIiLCJfcmVsZWFzZUNvbm5lY3Rpb25fIiwiZGlzY29ubmVjdF8iLCJjb25uIiwicGluZ18iLCJsaXN0Q29sbGVjdGlvbnMiLCJuYW1lT25seSIsInRvQXJyYXkiLCJzdGFjayIsImluc2VydE9uZV8iLCJtb2RlbCIsImRhdGEiLCJfZXhlY3V0ZV8iLCJjb2xsIiwiaW5zZXJ0T25lIiwiZm9yY2VTZXJ2ZXJPYmplY3RJZCIsImJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiIsImZpbmRBbmRSZXBsYWNlXyIsImNvbmRpdGlvbiIsImZpbmRBbmRSZXBsYWNlIiwidXBzZXJ0IiwicmV0dXJuT3JpZ2luYWwiLCJmaW5kT25lXyIsImZpbmRPbmUiLCJ1cGRhdGVPbmVfIiwidXBkYXRlT25lIiwiJHNldCIsInVwc2VydE9uZV8iLCJyZXBsYWNlT25lXyIsInJlcGxhY2VPbmUiLCJkZWxldGVPbmVfIiwiZGVsZXRlT25lIiwiZmluZF8iLCJxdWVyeU9wdGlvbnMiLCJjb25zb2xlIiwiJHByb2plY3Rpb24iLCJwcm9qZWN0aW9uIiwiJG9yZGVyQnkiLCJzb3J0IiwiJG9mZnNldCIsInNraXAiLCIkbGltaXQiLCJsaW1pdCIsInF1ZXJ5IiwiJHF1ZXJ5IiwicmVzdWx0IiwiY29sbGVjdGlvbiIsImZpbmQiLCIkdG90YWxDb3VudCIsInRvdGFsQ291bnQiLCJjb3VudCIsIm1lc3NhZ2UiLCJleGVjdXRvciIsImNvbm5lY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLGdDQUFELENBQTlCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0QsVUFBVSxDQUFDLFNBQUQsQ0FBMUI7QUFDQSxNQUFNRSxXQUFXLEdBQUdELE9BQU8sQ0FBQ0MsV0FBNUI7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHSixPQUFPLENBQUMsaUJBQUQsQ0FBekI7O0FBT0EsTUFBTUssZ0JBQU4sU0FBK0JELFNBQS9CLENBQXlDO0FBTXJDRSxFQUFBQSxXQUFXLENBQUNDLGdCQUFELEVBQW1CQyxPQUFuQixFQUE0QjtBQUNuQyxVQUFNLFNBQU4sRUFBaUJELGdCQUFqQixFQUFtQ0MsT0FBbkM7QUFDSDs7QUFLRCxRQUFNQyxJQUFOLEdBQWE7QUFDVCxRQUFJLEtBQUtDLE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVlDLFdBQVosRUFBbkIsRUFBOEM7QUFDMUMsV0FBS0QsTUFBTCxDQUFZRSxLQUFaO0FBQ0g7O0FBRUQsV0FBTyxLQUFLRixNQUFaO0FBQ0g7O0FBU0QsUUFBTUcsUUFBTixDQUFlTCxPQUFmLEVBQXdCO0FBQ3BCLFFBQUksQ0FBQyxLQUFLRSxNQUFOLElBQWdCLENBQUMsS0FBS0EsTUFBTCxDQUFZQyxXQUFaLEVBQXJCLEVBQWdEO0FBQzVDLFdBQUtELE1BQUwsR0FBYyxJQUFJUCxXQUFKLENBQWdCLEtBQUtJLGdCQUFyQixFQUF1QztBQUFDTyxRQUFBQSxlQUFlLEVBQUU7QUFBbEIsT0FBdkMsQ0FBZDtBQUNBLFlBQU0sS0FBS0osTUFBTCxDQUFZSyxPQUFaLEVBQU47QUFFQSxXQUFLQyxHQUFMLENBQVMsT0FB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QS9CO0FBQ0gsS0F2Q0QsU0F1Q1U7QUFDTmIsTUFBQUEsRUFBRSxLQUFJLE1BQU0sS0FBS00sbUJBQUwsQ0FBeUJOLEVBQXpCLEVBQTZCVCxPQUE3QixDQUFWLENBQUY7QUFDSDtBQUNKOztBQUVELFFBQU0wQixTQUFOLENBQWdCRixLQUFoQixFQUF1QnhCLE9BQXZCLEVBQWdDa0UsUUFBaEMsRUFBMEM7QUFDdEMsUUFBSXpELEVBQUo7O0FBRUEsUUFBSTtBQUNBQSxNQUFBQSxFQUFFLEdBQUcsTUFBTSxLQUFLSSxlQUFMLENBQXFCYixPQUFyQixDQUFYO0FBRUEsYUFBTyxNQUFNa0UsUUFBUSxDQUFDekQsRUFBRSxDQUFDbUQsVUFBSCxDQUFjcEMsS0FBZCxDQUFELENBQXJCO0FBQ0gsS0FKRCxDQUlFLE9BQU1WLEdBQU4sRUFBVztBQUNULFlBQU1BLEdBQU47QUFDSCxLQU5ELFNBTVU7QUFDTkwsTUFBQUEsRUFBRSxLQUFJLE1BQU0sS0FBS00sbUJBQUwsQ0FBeUJOLEVBQXpCLEVBQTZCVCxPQUE3QixDQUFWLENBQUY7QUFDSDtBQUNKOztBQUVELFFBQU1hLGVBQU4sQ0FBc0JiLE9BQXRCLEVBQStCO0FBQzNCLFdBQVFBLE9BQU8sSUFBSUEsT0FBTyxDQUFDbUUsVUFBcEIsR0FBa0NuRSxPQUFPLENBQUNtRSxVQUExQyxHQUF1RCxLQUFLOUQsUUFBTCxDQUFjTCxPQUFkLENBQTlEO0FBQ0g7O0FBRUQsUUFBTWUsbUJBQU4sQ0FBMEJFLElBQTFCLEVBQWdDakIsT0FBaEMsRUFBeUM7QUFDckMsUUFBSSxDQUFDQSxPQUFELElBQVksQ0FBQ0EsT0FBTyxDQUFDbUUsVUFBekIsRUFBcUM7QUFDakMsYUFBTyxLQUFLbkQsV0FBTCxDQUFpQkMsSUFBakIsQ0FBUDtBQUNIO0FBQ0o7O0FBeE5vQzs7QUEyTnpDbUQsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEUsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IG1vbmdvZGIgPSB0cnlSZXF1aXJlKCdtb25nb2RiJyk7XG5jb25zdCBNb25nb0NsaWVudCA9IG1vbmdvZGIuTW9uZ29DbGllbnQ7XG5jb25zdCBDb25uZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9Db25uZWN0b3InKTtcblxuLyoqXG4gKiBNb25nb2RiIGRhdGEgc3RvcmFnZSBjb25uZWN0b3IuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIENvbm5lY3RvclxuICovXG5jbGFzcyBNb25nb2RiQ29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ21vbmdvZGInLCBjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKTsgICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSBhbGwgY29ubmVjdGlvbiBpbml0aWF0ZWQgYnkgdGhpcyBjb25uZWN0b3IuXG4gICAgICovXG4gICAgYXN5bmMgZW5kXygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50LmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5jbGllbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBiYXNlZCBvbiB0aGUgZGVmYXVsdCBjb25uZWN0aW9uIHN0cmluZyBvZiB0aGUgY29ubmVjdG9yIGFuZCBnaXZlbiBvcHRpb25zLiAgICAgXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEV4dHJhIG9wdGlvbnMgZm9yIHRoZSBjb25uZWN0aW9uLCBvcHRpb25hbC5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm11bHRpcGxlU3RhdGVtZW50cz1mYWxzZV0gLSBBbGxvdyBydW5uaW5nIG11bHRpcGxlIHN0YXRlbWVudHMgYXQgYSB0aW1lLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuY3JlYXRlRGF0YWJhc2U9ZmFsc2VdIC0gRmxhZyB0byB1c2VkIHdoZW4gY3JlYXRpbmcgYSBkYXRhYmFzZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48TXlTUUxDb25uZWN0aW9uPn1cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0XyhvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnQgfHwgIXRoaXMuY2xpZW50LmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHRoaXMuY29ubmVjdGlvblN0cmluZywge3VzZU5ld1VybFBhcnNlcjogdHJ1ZX0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuY29ubmVjdCgpO1xuXG4gICAgICAgICAgICB0aGlzLmxvZygnZGVidWcnLCAnQ3JlYXRlIGNvbm5lY3Rpb246ICcgKyB0aGlzLmNvbm5lY3Rpb25TdHJpbmcpO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZGIodGhpcy5kYXRhYmFzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZV8oZGJFeGVjdXRvciwgb3B0aW9ucykge1xuICAgICAgICBsZXQgZGI7XG4gICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYiA9IGF3YWl0IHRoaXMuX2dldENvbm5lY3Rpb25fKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZGJFeGVjdXRvcihkYik7XG4gICAgICAgIH0gY2F0Y2goZXJyKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBkYiAmJiBhd2FpdCB0aGlzLl9yZWxlYXNlQ29ubmVjdGlvbl8oZGIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYSBkYXRhYmFzZSBjb25uZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TXlTUUxDb25uZWN0aW9ufSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0Xyhjb25uKSB7XG4gICAgfVxuICBcbiAgICBhc3luYyBwaW5nXygpIHsgIFxuICAgICAgICBsZXQgZGI7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRiID0gIGF3YWl0IHRoaXMuY29ubmVjdF8oKTtcbiAgICAgICAgICAgIGF3YWl0IGRiLmxpc3RDb2xsZWN0aW9ucyhudWxsLCB7IG5hbWVPbmx5OiB0cnVlIH0pLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCdlcnJvcicsIGVyci5zdGFjayk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBkYiAmJiBhd2FpdCB0aGlzLmRpc2Nvbm5lY3RfKGRiKTtcbiAgICAgICAgfSAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgaW5zZXJ0T25lXyhtb2RlbCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZV8obW9kZWwsIG9wdGlvbnMsIChjb2xsKSA9PiBjb2xsLmluc2VydE9uZShkYXRhLCB7IGZvcmNlU2VydmVyT2JqZWN0SWQ6IHRydWUsIGJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjogdHJ1ZSB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSAoaW5zZXJ0IG9yIHVwZGF0ZSBmb3IgZXhzaXN0aW5nKSBhbiBlbnRpdHkgYW5kIHJldHVybiBvcmlnaW5hbCByZWNvcmQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBmaW5kQW5kUmVwbGFjZV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZV8obW9kZWwsIG9wdGlvbnMsIChjb2xsKSA9PiBjb2xsLmZpbmRBbmRSZXBsYWNlKGNvbmRpdGlvbiwgZGF0YSwgeyB1cHNlcnQ6IHRydWUsIHJldHVybk9yaWdpbmFsOiB0cnVlIH0pKTtcbiAgICB9XG5cbiAgICBhc3luYyBmaW5kT25lXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwuZmluZE9uZShjb25kaXRpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlT25lXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCBvcHRpb25zKSB7IFxuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZV8obW9kZWwsIG9wdGlvbnMsIChjb2xsKSA9PiBjb2xsLnVwZGF0ZU9uZShjb25kaXRpb24sIHsgJHNldDogZGF0YSB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGFuIGV4aXN0aW5nIGVudGl0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSBjb25kaXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIHVwc2VydE9uZV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykgeyBcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGVfKG1vZGVsLCBvcHRpb25zLCAoY29sbCkgPT4gY29sbC51cGRhdGVPbmUoY29uZGl0aW9uLCB7ICRzZXQ6IGRhdGEgfSwge3Vwc2VydDogdHJ1ZX0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIGFuIGV4aXN0aW5nIGVudGl0eSBvciBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgcmVwbGFjZU9uZV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykgeyAgXG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwucmVwbGFjZU9uZShjb25kaXRpb24sIGRhdGEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlT25lXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlXyhtb2RlbCwgb3B0aW9ucywgKGNvbGwpID0+IGNvbGwuZGVsZXRlT25lKGNvbmRpdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gc2VsZWN0IG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBmaW5kXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBkYjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGIgPSBhd2FpdCB0aGlzLl9nZXRDb25uZWN0aW9uXyhvcHRpb25zKTtcblxuICAgICAgICAgICAgbGV0IHF1ZXJ5T3B0aW9ucyA9IHt9O1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb25kaXRpb24pO1xuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLiRwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlPcHRpb25zLnByb2plY3Rpb24gPSBjb25kaXRpb24uJHByb2plY3Rpb247ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLiRvcmRlckJ5KSB7XG4gICAgICAgICAgICAgICAgcXVlcnlPcHRpb25zLnNvcnQgPSBjb25kaXRpb24uJG9yZGVyQnk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLiRvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBxdWVyeU9wdGlvbnMuc2tpcCA9IGNvbmRpdGlvbi4kb2Zmc2V0OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi4kbGltaXQpIHtcbiAgICAgICAgICAgICAgICBxdWVyeU9wdGlvbnMubGltaXQgPSBjb25kaXRpb24uJGxpbWl0OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gY29uZGl0aW9uLiRxdWVyeSB8fCB7fTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3F1ZXJ5JywgcXVlcnkpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncXVlcnlPcHRpb25zJywgcXVlcnlPcHRpb25zKTtcblxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGRiLmNvbGxlY3Rpb24obW9kZWwpLmZpbmQocXVlcnksIHF1ZXJ5T3B0aW9ucykudG9BcnJheSgpO1xuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLiR0b3RhbENvdW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsQ291bnQgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKG1vZGVsKS5maW5kKHF1ZXJ5KS5jb3VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbIHJlc3VsdCwgdG90YWxDb3VudCBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2coJ2Vycm9yJywgZXJyLm1lc3NhZ2UsIHsgc3RhY2s6IGVyci5zdGFjayB9KTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRiICYmIGF3YWl0IHRoaXMuX3JlbGVhc2VDb25uZWN0aW9uXyhkYiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9ICAgXG5cbiAgICBhc3luYyBfZXhlY3V0ZV8obW9kZWwsIG9wdGlvbnMsIGV4ZWN1dG9yKSB7XG4gICAgICAgIGxldCBkYjtcbiAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRiID0gYXdhaXQgdGhpcy5fZ2V0Q29ubmVjdGlvbl8ob3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBleGVjdXRvcihkYi5jb2xsZWN0aW9uKG1vZGVsKSk7XG4gICAgICAgIH0gY2F0Y2goZXJyKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBkYiAmJiBhd2FpdCB0aGlzLl9yZWxlYXNlQ29ubmVjdGlvbl8oZGIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldENvbm5lY3Rpb25fKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIChvcHRpb25zICYmIG9wdGlvbnMuY29ubmVjdGlvbikgPyBvcHRpb25zLmNvbm5lY3Rpb24gOiB0aGlzLmNvbm5lY3RfKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIF9yZWxlYXNlQ29ubmVjdGlvbl8oY29ubiwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzY29ubmVjdF8oY29ubik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9uZ29kYkNvbm5lY3RvcjsiXX0=