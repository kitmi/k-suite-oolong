"use strict";

require("source-map-support/register");

const {
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const AmqpNode = tryRequire('amqplib');

const Connector = require('../../Connector');

class RabbitmqConnector extends Connector {
  constructor(connectionString, options) {
    super('rabbitmq', connectionString, options);
  }

  async end_() {
    if (this.ch) {
      await this.ch.close();
    }

    delete this.ch;

    if (this.conn) {
      await this.conn.close();
    }

    delete this.conn;
  }

  async connect_() {
    if (!this.conn) {
      this.conn = await AmqpNode.connect(this.connectionString);
    }

    if (!this.ch) {
      this.ch = await this.conn.createChannel();
    }

    return this.ch;
  }

  async disconnect_(conn) {}

  async sendToQueue_(queueName, obj, options) {
    if (typeof obj !== 'string') {
      obj = JSON.stringify(obj);
    }

    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.sendToQueue(queueName, Buffer.from(obj), options);
  }

  async consume_(queueName, consumerMethod, options) {
    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.consume(queueName, msg => consumerMethod(ch, msg), options);
  }

}

module.exports = RabbitmqConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvcmFiYml0bXEvQ29ubmVjdG9yLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkFtcXBOb2RlIiwiQ29ubmVjdG9yIiwiUmFiYml0bXFDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25TdHJpbmciLCJvcHRpb25zIiwiZW5kXyIsImNoIiwiY2xvc2UiLCJjb25uIiwiY29ubmVjdF8iLCJjb25uZWN0IiwiY3JlYXRlQ2hhbm5lbCIsImRpc2Nvbm5lY3RfIiwic2VuZFRvUXVldWVfIiwicXVldWVOYW1lIiwib2JqIiwiSlNPTiIsInN0cmluZ2lmeSIsImFzc2VydFF1ZXVlIiwic2VuZFRvUXVldWUiLCJCdWZmZXIiLCJmcm9tIiwiY29uc3VtZV8iLCJjb25zdW1lck1ldGhvZCIsImNvbnN1bWUiLCJtc2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQWNDLE9BQU8sQ0FBQyxVQUFELENBQTNCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLGdDQUFELENBQTlCOztBQUNBLE1BQU1FLFFBQVEsR0FBR0QsVUFBVSxDQUFDLFNBQUQsQ0FBM0I7O0FBQ0EsTUFBTUUsU0FBUyxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBekI7O0FBT0EsTUFBTUksaUJBQU4sU0FBZ0NELFNBQWhDLENBQTBDO0FBTXRDRSxFQUFBQSxXQUFXLENBQUNDLGdCQUFELEVBQW1CQyxPQUFuQixFQUE0QjtBQUNuQyxVQUFNLFVBQU4sRUFBa0JELGdCQUFsQixFQUFvQ0MsT0FBcEM7QUFDSDs7QUFLRCxRQUFNQyxJQUFOLEdBQWE7QUFDVCxRQUFJLEtBQUtDLEVBQVQsRUFBYTtBQUNULFlBQU0sS0FBS0EsRUFBTCxDQUFRQyxLQUFSLEVBQU47QUFDSDs7QUFFRCxXQUFPLEtBQUtELEVBQVo7O0FBRUEsUUFBSSxLQUFLRSxJQUFULEVBQWU7QUFDWCxZQUFNLEtBQUtBLElBQUwsQ0FBVUQsS0FBVixFQUFOO0FBQ0g7O0FBRUQsV0FBTyxLQUFLQyxJQUFaO0FBQ0g7O0FBU0QsUUFBTUMsUUFBTixHQUFpQjtBQUNiLFFBQUksQ0FBQyxLQUFLRCxJQUFWLEVBQWdCO0FBQ1osV0FBS0EsSUFBTCxHQUFZLE1BQU1ULFFBQVEsQ0FBQ1csT0FBVCxDQUFpQixLQUFLUCxnQkFBdEIsQ0FBbEI7QUFDSDs7QUFFRCxRQUFJLENBQUMsS0FBS0csRUFBVixFQUFjO0FBQ1YsV0FBS0EsRUFBTCxHQUFVLE1BQU0sS0FBS0UsSUFBTCxDQUFVRyxhQUFWLEVBQWhCO0FBQ0g7O0FBRUQsV0FBTyxLQUFLTCxFQUFaO0FBQ0g7O0FBTUQsUUFBTU0sV0FBTixDQUFrQkosSUFBbEIsRUFBd0IsQ0FFdkI7O0FBRUQsUUFBTUssWUFBTixDQUFtQkMsU0FBbkIsRUFBOEJDLEdBQTlCLEVBQW1DWCxPQUFuQyxFQUE0QztBQUN4QyxRQUFJLE9BQU9XLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUN6QkEsTUFBQUEsR0FBRyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsR0FBZixDQUFOO0FBQ0g7O0FBRUQsUUFBSVQsRUFBRSxHQUFHLE1BQU0sS0FBS0csUUFBTCxFQUFmO0FBQ0EsVUFBTUgsRUFBRSxDQUFDWSxXQUFILENBQWVKLFNBQWYsQ0FBTjtBQUNBLFdBQU9SLEVBQUUsQ0FBQ2EsV0FBSCxDQUFlTCxTQUFmLEVBQTBCTSxNQUFNLENBQUNDLElBQVAsQ0FBWU4sR0FBWixDQUExQixFQUE0Q1gsT0FBNUMsQ0FBUDtBQUNIOztBQUVELFFBQU1rQixRQUFOLENBQWVSLFNBQWYsRUFBMEJTLGNBQTFCLEVBQTBDbkIsT0FBMUMsRUFBbUQ7QUFDL0MsUUFBSUUsRUFBRSxHQUFHLE1BQU0sS0FBS0csUUFBTCxFQUFmO0FBQ0EsVUFBTUgsRUFBRSxDQUFDWSxXQUFILENBQWVKLFNBQWYsQ0FBTjtBQUVBLFdBQU9SLEVBQUUsQ0FBQ2tCLE9BQUgsQ0FBV1YsU0FBWCxFQUF1QlcsR0FBRCxJQUFTRixjQUFjLENBQUNqQixFQUFELEVBQUttQixHQUFMLENBQTdDLEVBQXdEckIsT0FBeEQsQ0FBUDtBQUNIOztBQXJFcUM7O0FBd0UxQ3NCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUHJvbWlzZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCBBbXFwTm9kZSA9IHRyeVJlcXVpcmUoJ2FtcXBsaWInKTtcbmNvbnN0IENvbm5lY3RvciA9IHJlcXVpcmUoJy4uLy4uL0Nvbm5lY3RvcicpO1xuXG4vKipcbiAqIFJhYmJpdG1xIGRhdGEgc3RvcmFnZSBjb25uZWN0b3IuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIENvbm5lY3RvclxuICovXG5jbGFzcyBSYWJiaXRtcUNvbm5lY3RvciBleHRlbmRzIENvbm5lY3RvciB7XG4gICAgLyoqICAgICAgICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlUHJlcGFyZWRTdGF0ZW1lbnRdIC0gXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvblN0cmluZywgb3B0aW9ucykgeyAgICAgICAgXG4gICAgICAgIHN1cGVyKCdyYWJiaXRtcScsIGNvbm5lY3Rpb25TdHJpbmcsIG9wdGlvbnMpOyAgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGFsbCBjb25uZWN0aW9uIGluaXRpYXRlZCBieSB0aGlzIGNvbm5lY3Rvci5cbiAgICAgKi9cbiAgICBhc3luYyBlbmRfKCkge1xuICAgICAgICBpZiAodGhpcy5jaCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaC5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuY2g7XG5cbiAgICAgICAgaWYgKHRoaXMuY29ubikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uLmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5jb25uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gYmFzZWQgb24gdGhlIGRlZmF1bHQgY29ubmVjdGlvbiBzdHJpbmcgb2YgdGhlIGNvbm5lY3RvciBhbmQgZ2l2ZW4gb3B0aW9ucy4gICAgIFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBFeHRyYSBvcHRpb25zIGZvciB0aGUgY29ubmVjdGlvbiwgb3B0aW9uYWwuXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5tdWx0aXBsZVN0YXRlbWVudHM9ZmFsc2VdIC0gQWxsb3cgcnVubmluZyBtdWx0aXBsZSBzdGF0ZW1lbnRzIGF0IGEgdGltZS5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmNyZWF0ZURhdGFiYXNlPWZhbHNlXSAtIEZsYWcgdG8gdXNlZCB3aGVuIGNyZWF0aW5nIGEgZGF0YWJhc2UuXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPERiPn1cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0XygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm4pIHtcbiAgICAgICAgICAgIHRoaXMuY29ubiA9IGF3YWl0IEFtcXBOb2RlLmNvbm5lY3QodGhpcy5jb25uZWN0aW9uU3RyaW5nKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKCF0aGlzLmNoKSB7XG4gICAgICAgICAgICB0aGlzLmNoID0gYXdhaXQgdGhpcy5jb25uLmNyZWF0ZUNoYW5uZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGEgZGF0YWJhc2UgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge0RifSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0Xyhjb25uKSB7XG5cbiAgICB9XG4gIFxuICAgIGFzeW5jIHNlbmRUb1F1ZXVlXyhxdWV1ZU5hbWUsIG9iaiwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9iaiA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2ggPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgICAgIHJldHVybiBjaC5zZW5kVG9RdWV1ZShxdWV1ZU5hbWUsIEJ1ZmZlci5mcm9tKG9iaiksIG9wdGlvbnMpO1xuICAgIH0gICBcblxuICAgIGFzeW5jIGNvbnN1bWVfKHF1ZXVlTmFtZSwgY29uc3VtZXJNZXRob2QsIG9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBsZXQgY2ggPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoLmNvbnN1bWUocXVldWVOYW1lLCAobXNnKSA9PiBjb25zdW1lck1ldGhvZChjaCwgbXNnKSwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJhYmJpdG1xQ29ubmVjdG9yOyJdfQ==