"use strict";

require("source-map-support/register");

const {
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const AmqpNode = tryRequire('amqplib');

const Connector = require('../../Connector');

class RabbitmqConnector extends Connector {
  constructor(connectionString, options) {
    super('rabbitmq', connectionString, options);
  }

  async end_() {
    if (this.ch) {
      await this.ch.close();
    }

    delete this.ch;

    if (this.conn) {
      await this.conn.close();
    }

    delete this.conn;
  }

  async connect_() {
    if (!this.conn) {
      this.conn = await AmqpNode.connect(this.connectionString);
      console.log(this.connectionString);
    }

    if (!this.ch) {
      this.ch = await this.conn.createChannel();
    }

    return this.ch;
  }

  async disconnect_(conn) {}

  async sendToQueue_(queueName, obj, options) {
    if (typeof obj !== 'string') {
      obj = JSON.stringify(obj);
    }

    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.sendToQueue(queueName, Buffer.from(obj), options);
  }

  async consume_(queueName, consumerMethod, options) {
    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.consume(queueName, msg => consumerMethod(ch, msg), options);
  }

}

module.exports = RabbitmqConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvcmFiYml0bXEvQ29ubmVjdG9yLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkFtcXBOb2RlIiwiQ29ubmVjdG9yIiwiUmFiYml0bXFDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25TdHJpbmciLCJvcHRpb25zIiwiZW5kXyIsImNoIiwiY2xvc2UiLCJjb25uIiwiY29ubmVjdF8iLCJjb25uZWN0IiwiY29uc29sZSIsImxvZyIsImNyZWF0ZUNoYW5uZWwiLCJkaXNjb25uZWN0XyIsInNlbmRUb1F1ZXVlXyIsInF1ZXVlTmFtZSIsIm9iaiIsIkpTT04iLCJzdHJpbmdpZnkiLCJhc3NlcnRRdWV1ZSIsInNlbmRUb1F1ZXVlIiwiQnVmZmVyIiwiZnJvbSIsImNvbnN1bWVfIiwiY29uc3VtZXJNZXRob2QiLCJjb25zdW1lIiwibXNnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFjQyxPQUFPLENBQUMsVUFBRCxDQUEzQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBaUJELE9BQU8sQ0FBQyxnQ0FBRCxDQUE5Qjs7QUFDQSxNQUFNRSxRQUFRLEdBQUdELFVBQVUsQ0FBQyxTQUFELENBQTNCOztBQUNBLE1BQU1FLFNBQVMsR0FBR0gsT0FBTyxDQUFDLGlCQUFELENBQXpCOztBQU9BLE1BQU1JLGlCQUFOLFNBQWdDRCxTQUFoQyxDQUEwQztBQU10Q0UsRUFBQUEsV0FBVyxDQUFDQyxnQkFBRCxFQUFtQkMsT0FBbkIsRUFBNEI7QUFDbkMsVUFBTSxVQUFOLEVBQWtCRCxnQkFBbEIsRUFBb0NDLE9BQXBDO0FBQ0g7O0FBS0QsUUFBTUMsSUFBTixHQUFhO0FBQ1QsUUFBSSxLQUFLQyxFQUFULEVBQWE7QUFDVCxZQUFNLEtBQUtBLEVBQUwsQ0FBUUMsS0FBUixFQUFOO0FBQ0g7O0FBRUQsV0FBTyxLQUFLRCxFQUFaOztBQUVBLFFBQUksS0FBS0UsSUFBVCxFQUFlO0FBQ1gsWUFBTSxLQUFLQSxJQUFMLENBQVVELEtBQVYsRUFBTjtBQUNIOztBQUVELFdBQU8sS0FBS0MsSUFBWjtBQUNIOztBQVNELFFBQU1DLFFBQU4sR0FBaUI7QUFDYixRQUFJLENBQUMsS0FBS0QsSUFBVixFQUFnQjtBQUNaLFdBQUtBLElBQUwsR0FBWSxNQUFNVCxRQUFRLENBQUNXLE9BQVQsQ0FBaUIsS0FBS1AsZ0JBQXRCLENBQWxCO0FBQ0FRLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQUtULGdCQUFqQjtBQUNIOztBQUVELFFBQUksQ0FBQyxLQUFLRyxFQUFWLEVBQWM7QUFDVixXQUFLQSxFQUFMLEdBQVUsTUFBTSxLQUFLRSxJQUFMLENBQVVLLGFBQVYsRUFBaEI7QUFDSDs7QUFFRCxXQUFPLEtBQUtQLEVBQVo7QUFDSDs7QUFNRCxRQUFNUSxXQUFOLENBQWtCTixJQUFsQixFQUF3QixDQUV2Qjs7QUFFRCxRQUFNTyxZQUFOLENBQW1CQyxTQUFuQixFQUE4QkMsR0FBOUIsRUFBbUNiLE9BQW5DLEVBQTRDO0FBQ3hDLFFBQUksT0FBT2EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ3pCQSxNQUFBQSxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixHQUFmLENBQU47QUFDSDs7QUFFRCxRQUFJWCxFQUFFLEdBQUcsTUFBTSxLQUFLRyxRQUFMLEVBQWY7QUFDQSxVQUFNSCxFQUFFLENBQUNjLFdBQUgsQ0FBZUosU0FBZixDQUFOO0FBQ0EsV0FBT1YsRUFBRSxDQUFDZSxXQUFILENBQWVMLFNBQWYsRUFBMEJNLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixHQUFaLENBQTFCLEVBQTRDYixPQUE1QyxDQUFQO0FBQ0g7O0FBRUQsUUFBTW9CLFFBQU4sQ0FBZVIsU0FBZixFQUEwQlMsY0FBMUIsRUFBMENyQixPQUExQyxFQUFtRDtBQUMvQyxRQUFJRSxFQUFFLEdBQUcsTUFBTSxLQUFLRyxRQUFMLEVBQWY7QUFDQSxVQUFNSCxFQUFFLENBQUNjLFdBQUgsQ0FBZUosU0FBZixDQUFOO0FBRUEsV0FBT1YsRUFBRSxDQUFDb0IsT0FBSCxDQUFXVixTQUFYLEVBQXVCVyxHQUFELElBQVNGLGNBQWMsQ0FBQ25CLEVBQUQsRUFBS3FCLEdBQUwsQ0FBN0MsRUFBd0R2QixPQUF4RCxDQUFQO0FBQ0g7O0FBdEVxQzs7QUF5RTFDd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUIsaUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBQcm9taXNlIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEFtcXBOb2RlID0gdHJ5UmVxdWlyZSgnYW1xcGxpYicpO1xuY29uc3QgQ29ubmVjdG9yID0gcmVxdWlyZSgnLi4vLi4vQ29ubmVjdG9yJyk7XG5cbi8qKlxuICogUmFiYml0bXEgZGF0YSBzdG9yYWdlIGNvbm5lY3Rvci5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQ29ubmVjdG9yXG4gKi9cbmNsYXNzIFJhYmJpdG1xQ29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ3JhYmJpdG1xJywgY29ubmVjdGlvblN0cmluZywgb3B0aW9ucyk7ICAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYWxsIGNvbm5lY3Rpb24gaW5pdGlhdGVkIGJ5IHRoaXMgY29ubmVjdG9yLlxuICAgICAqL1xuICAgIGFzeW5jIGVuZF8oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoLmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5jaDtcblxuICAgICAgICBpZiAodGhpcy5jb25uKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4uY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBiYXNlZCBvbiB0aGUgZGVmYXVsdCBjb25uZWN0aW9uIHN0cmluZyBvZiB0aGUgY29ubmVjdG9yIGFuZCBnaXZlbiBvcHRpb25zLiAgICAgXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEV4dHJhIG9wdGlvbnMgZm9yIHRoZSBjb25uZWN0aW9uLCBvcHRpb25hbC5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm11bHRpcGxlU3RhdGVtZW50cz1mYWxzZV0gLSBBbGxvdyBydW5uaW5nIG11bHRpcGxlIHN0YXRlbWVudHMgYXQgYSB0aW1lLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuY3JlYXRlRGF0YWJhc2U9ZmFsc2VdIC0gRmxhZyB0byB1c2VkIHdoZW4gY3JlYXRpbmcgYSBkYXRhYmFzZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RGI+fVxuICAgICAqL1xuICAgIGFzeW5jIGNvbm5lY3RfKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29ubikge1xuICAgICAgICAgICAgdGhpcy5jb25uID0gYXdhaXQgQW1xcE5vZGUuY29ubmVjdCh0aGlzLmNvbm5lY3Rpb25TdHJpbmcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jb25uZWN0aW9uU3RyaW5nKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKCF0aGlzLmNoKSB7XG4gICAgICAgICAgICB0aGlzLmNoID0gYXdhaXQgdGhpcy5jb25uLmNyZWF0ZUNoYW5uZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGEgZGF0YWJhc2UgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge0RifSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0Xyhjb25uKSB7XG5cbiAgICB9XG4gIFxuICAgIGFzeW5jIHNlbmRUb1F1ZXVlXyhxdWV1ZU5hbWUsIG9iaiwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9iaiA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2ggPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgICAgIHJldHVybiBjaC5zZW5kVG9RdWV1ZShxdWV1ZU5hbWUsIEJ1ZmZlci5mcm9tKG9iaiksIG9wdGlvbnMpO1xuICAgIH0gICBcblxuICAgIGFzeW5jIGNvbnN1bWVfKHF1ZXVlTmFtZSwgY29uc3VtZXJNZXRob2QsIG9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBsZXQgY2ggPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoLmNvbnN1bWUocXVldWVOYW1lLCAobXNnKSA9PiBjb25zdW1lck1ldGhvZChjaCwgbXNnKSwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJhYmJpdG1xQ29ubmVjdG9yOyJdfQ==