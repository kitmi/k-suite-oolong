"use strict";

require("source-map-support/register");

const {
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const AmqpNode = tryRequire('amqplib');

const Connector = require('../../Connector');

class RabbitmqConnector extends Connector {
  constructor(connectionString, options) {
    super('rabbitmq', connectionString, options);
  }

  async end_() {
    if (this.ch) {
      await this.ch.close();
    }

    delete this.ch;

    if (this.conn) {
      await this.conn.close();
    }

    delete this.conn;
  }

  async connect_() {
    if (!this.conn) {
      this.conn = await AmqpNode.connect(this.connectionString);
      this.conn.on('close', () => {
        delete this.ch;
        delete this.conn;
      });
      this.conn.on('error', () => {
        delete this.ch;
        delete this.conn;
      });
    }

    if (!this.ch) {
      this.ch = await this.conn.createChannel();
      this.ch.on('close', () => {
        delete this.ch;
      });
    }

    return this.ch;
  }

  async disconnect_(conn) {}

  async sendToQueue_(queueName, obj, options) {
    if (typeof obj !== 'string') {
      obj = JSON.stringify(obj);
    }

    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.sendToQueue(queueName, Buffer.from(obj), options);
  }

  async consume_(queueName, consumerMethod, options) {
    let ch = await this.connect_();
    await ch.assertQueue(queueName);
    return ch.consume(queueName, msg => consumerMethod(ch, msg), options);
  }

}

module.exports = RabbitmqConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvcmFiYml0bXEvQ29ubmVjdG9yLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkFtcXBOb2RlIiwiQ29ubmVjdG9yIiwiUmFiYml0bXFDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25TdHJpbmciLCJvcHRpb25zIiwiZW5kXyIsImNoIiwiY2xvc2UiLCJjb25uIiwiY29ubmVjdF8iLCJjb25uZWN0Iiwib24iLCJjcmVhdGVDaGFubmVsIiwiZGlzY29ubmVjdF8iLCJzZW5kVG9RdWV1ZV8iLCJxdWV1ZU5hbWUiLCJvYmoiLCJKU09OIiwic3RyaW5naWZ5IiwiYXNzZXJ0UXVldWUiLCJzZW5kVG9RdWV1ZSIsIkJ1ZmZlciIsImZyb20iLCJjb25zdW1lXyIsImNvbnN1bWVyTWV0aG9kIiwiY29uc3VtZSIsIm1zZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsT0FBTyxDQUFDLFVBQUQsQ0FBM0I7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCRCxPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBQ0EsTUFBTUUsUUFBUSxHQUFHRCxVQUFVLENBQUMsU0FBRCxDQUEzQjs7QUFDQSxNQUFNRSxTQUFTLEdBQUdILE9BQU8sQ0FBQyxpQkFBRCxDQUF6Qjs7QUFPQSxNQUFNSSxpQkFBTixTQUFnQ0QsU0FBaEMsQ0FBMEM7QUFNdENFLEVBQUFBLFdBQVcsQ0FBQ0MsZ0JBQUQsRUFBbUJDLE9BQW5CLEVBQTRCO0FBQ25DLFVBQU0sVUFBTixFQUFrQkQsZ0JBQWxCLEVBQW9DQyxPQUFwQztBQUNIOztBQUtELFFBQU1DLElBQU4sR0FBYTtBQUNULFFBQUksS0FBS0MsRUFBVCxFQUFhO0FBQ1QsWUFBTSxLQUFLQSxFQUFMLENBQVFDLEtBQVIsRUFBTjtBQUNIOztBQUVELFdBQU8sS0FBS0QsRUFBWjs7QUFFQSxRQUFJLEtBQUtFLElBQVQsRUFBZTtBQUNYLFlBQU0sS0FBS0EsSUFBTCxDQUFVRCxLQUFWLEVBQU47QUFDSDs7QUFFRCxXQUFPLEtBQUtDLElBQVo7QUFDSDs7QUFTRCxRQUFNQyxRQUFOLEdBQWlCO0FBQ2IsUUFBSSxDQUFDLEtBQUtELElBQVYsRUFBZ0I7QUFDWixXQUFLQSxJQUFMLEdBQVksTUFBTVQsUUFBUSxDQUFDVyxPQUFULENBQWlCLEtBQUtQLGdCQUF0QixDQUFsQjtBQUNBLFdBQUtLLElBQUwsQ0FBVUcsRUFBVixDQUFhLE9BQWIsRUFBc0IsTUFBTTtBQUN4QixlQUFPLEtBQUtMLEVBQVo7QUFDQSxlQUFPLEtBQUtFLElBQVo7QUFDSCxPQUhEO0FBS0EsV0FBS0EsSUFBTCxDQUFVRyxFQUFWLENBQWEsT0FBYixFQUFzQixNQUFNO0FBQ3hCLGVBQU8sS0FBS0wsRUFBWjtBQUNBLGVBQU8sS0FBS0UsSUFBWjtBQUNILE9BSEQ7QUFJSDs7QUFFRCxRQUFJLENBQUMsS0FBS0YsRUFBVixFQUFjO0FBQ1YsV0FBS0EsRUFBTCxHQUFVLE1BQU0sS0FBS0UsSUFBTCxDQUFVSSxhQUFWLEVBQWhCO0FBQ0EsV0FBS04sRUFBTCxDQUFRSyxFQUFSLENBQVcsT0FBWCxFQUFvQixNQUFNO0FBQ3RCLGVBQU8sS0FBS0wsRUFBWjtBQUNILE9BRkQ7QUFHSDs7QUFFRCxXQUFPLEtBQUtBLEVBQVo7QUFDSDs7QUFNRCxRQUFNTyxXQUFOLENBQWtCTCxJQUFsQixFQUF3QixDQUN2Qjs7QUFFRCxRQUFNTSxZQUFOLENBQW1CQyxTQUFuQixFQUE4QkMsR0FBOUIsRUFBbUNaLE9BQW5DLEVBQTRDO0FBQ3hDLFFBQUksT0FBT1ksR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ3pCQSxNQUFBQSxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixHQUFmLENBQU47QUFDSDs7QUFFRCxRQUFJVixFQUFFLEdBQUcsTUFBTSxLQUFLRyxRQUFMLEVBQWY7QUFDQSxVQUFNSCxFQUFFLENBQUNhLFdBQUgsQ0FBZUosU0FBZixDQUFOO0FBQ0EsV0FBT1QsRUFBRSxDQUFDYyxXQUFILENBQWVMLFNBQWYsRUFBMEJNLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixHQUFaLENBQTFCLEVBQTRDWixPQUE1QyxDQUFQO0FBQ0g7O0FBRUQsUUFBTW1CLFFBQU4sQ0FBZVIsU0FBZixFQUEwQlMsY0FBMUIsRUFBMENwQixPQUExQyxFQUFtRDtBQUMvQyxRQUFJRSxFQUFFLEdBQUcsTUFBTSxLQUFLRyxRQUFMLEVBQWY7QUFDQSxVQUFNSCxFQUFFLENBQUNhLFdBQUgsQ0FBZUosU0FBZixDQUFOO0FBRUEsV0FBT1QsRUFBRSxDQUFDbUIsT0FBSCxDQUFXVixTQUFYLEVBQXVCVyxHQUFELElBQVNGLGNBQWMsQ0FBQ2xCLEVBQUQsRUFBS29CLEdBQUwsQ0FBN0MsRUFBd0R0QixPQUF4RCxDQUFQO0FBQ0g7O0FBaEZxQzs7QUFtRjFDdUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsaUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBQcm9taXNlIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEFtcXBOb2RlID0gdHJ5UmVxdWlyZSgnYW1xcGxpYicpO1xuY29uc3QgQ29ubmVjdG9yID0gcmVxdWlyZSgnLi4vLi4vQ29ubmVjdG9yJyk7XG5cbi8qKlxuICogUmFiYml0bXEgZGF0YSBzdG9yYWdlIGNvbm5lY3Rvci5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQ29ubmVjdG9yXG4gKi9cbmNsYXNzIFJhYmJpdG1xQ29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ3JhYmJpdG1xJywgY29ubmVjdGlvblN0cmluZywgb3B0aW9ucyk7ICAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYWxsIGNvbm5lY3Rpb24gaW5pdGlhdGVkIGJ5IHRoaXMgY29ubmVjdG9yLlxuICAgICAqL1xuICAgIGFzeW5jIGVuZF8oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoLmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5jaDtcblxuICAgICAgICBpZiAodGhpcy5jb25uKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4uY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBiYXNlZCBvbiB0aGUgZGVmYXVsdCBjb25uZWN0aW9uIHN0cmluZyBvZiB0aGUgY29ubmVjdG9yIGFuZCBnaXZlbiBvcHRpb25zLiAgICAgXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEV4dHJhIG9wdGlvbnMgZm9yIHRoZSBjb25uZWN0aW9uLCBvcHRpb25hbC5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm11bHRpcGxlU3RhdGVtZW50cz1mYWxzZV0gLSBBbGxvdyBydW5uaW5nIG11bHRpcGxlIHN0YXRlbWVudHMgYXQgYSB0aW1lLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuY3JlYXRlRGF0YWJhc2U9ZmFsc2VdIC0gRmxhZyB0byB1c2VkIHdoZW4gY3JlYXRpbmcgYSBkYXRhYmFzZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RGI+fVxuICAgICAqL1xuICAgIGFzeW5jIGNvbm5lY3RfKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29ubikge1xuICAgICAgICAgICAgdGhpcy5jb25uID0gYXdhaXQgQW1xcE5vZGUuY29ubmVjdCh0aGlzLmNvbm5lY3Rpb25TdHJpbmcpO1xuICAgICAgICAgICAgdGhpcy5jb25uLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jaDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb25uO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29ubi5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2g7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29ubjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBpZiAoIXRoaXMuY2gpIHtcbiAgICAgICAgICAgIHRoaXMuY2ggPSBhd2FpdCB0aGlzLmNvbm4uY3JlYXRlQ2hhbm5lbCgpO1xuICAgICAgICAgICAgdGhpcy5jaC5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2g7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGEgZGF0YWJhc2UgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge0RifSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0Xyhjb25uKSB7XG4gICAgfVxuICBcbiAgICBhc3luYyBzZW5kVG9RdWV1ZV8ocXVldWVOYW1lLCBvYmosIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBvYmogPSBKU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNoID0gYXdhaXQgdGhpcy5jb25uZWN0XygpOyAgICAgICAgXG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgICAgIHJldHVybiBjaC5zZW5kVG9RdWV1ZShxdWV1ZU5hbWUsIEJ1ZmZlci5mcm9tKG9iaiksIG9wdGlvbnMpO1xuICAgIH0gICBcblxuICAgIGFzeW5jIGNvbnN1bWVfKHF1ZXVlTmFtZSwgY29uc3VtZXJNZXRob2QsIG9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBsZXQgY2ggPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG4gICAgICAgIGF3YWl0IGNoLmFzc2VydFF1ZXVlKHF1ZXVlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoLmNvbnN1bWUocXVldWVOYW1lLCAobXNnKSA9PiBjb25zdW1lck1ldGhvZChjaCwgbXNnKSwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJhYmJpdG1xQ29ubmVjdG9yOyJdfQ==