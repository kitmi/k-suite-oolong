"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  getValueByPath,
  setValueByPath,
  eachAsync_,
  fs
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  OolongUsageError,
  BusinessError
} = require('../../Errors');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static _translateSymbolToken(name) {
    if (name === 'now') {
      return this.db.connector.raw('NOW()');
    }

    throw new Error('not support');
  }

  static _serialize(value) {
    if (typeof value === 'boolean') return value ? 1 : 0;

    if (value instanceof DateTime) {
      return value.toISO({
        includeOffset: false
      });
    }

    return value;
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity. Detail: ' + error.message);
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message + ` while creating a new "${this.meta.name}".`);
      }

      throw error;
    }
  }

  static async update_(...args) {
    try {
      return await super.update_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $query: condition,
        $unboxing: true
      }, context.connOptions);
    }

    return true;
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $query: context.updateOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }

    return true;
  }

  static afterFindAll_(context, records) {
    if (context.findOptions.$toDictionary) return records.reduce((table, v) => {
      table[v[this.meta.keyField]] = v;
      return table;
    }, {});
    if (context.findOptions.$unboxing) return records;
    return records.map(row => this.populate(row));
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $query: context.deleteOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static _prepareAssociations(findOptions) {
    let associations = _.uniq(findOptions.$association).sort();

    let assocTable = {},
        counter = 0,
        cache = {};
    associations.forEach(assoc => {
      if (_.isPlainObject(assoc)) {
        let alias = assoc.alias;

        if (!assoc.alias) {
          alias = ':join' + ++counter;
        }

        assocTable[alias] = {
          entity: assoc.entity,
          joinType: assoc.type,
          output: assoc.output,
          alias,
          on: assoc.on,
          ...(assoc.dataset ? this.db.connector.buildQuery(assoc.entity, this._prepareQueries({ ...assoc.dataset,
            $variables: findOptions.$variables
          })) : {})
        };
      } else {
        this._loadAssocIntoTable(assocTable, cache, assoc);
      }
    });
    return assocTable;
  }

  static _loadAssocIntoTable(assocTable, cache, assoc) {
    if (cache[assoc]) return cache[assoc];
    let lastPos = assoc.lastIndexOf('.');
    let result;

    if (lastPos === -1) {
      result = cache[assoc] = assocTable[assoc] = { ...this.meta.associations[assoc]
      };
    } else {
      let base = assoc.substr(0, lastPos);
      let last = assoc.substr(lastPos + 1);
      let baseNode = cache[base];

      if (!baseNode) {
        console.log(base, last);
        baseNode = this._loadAssocIntoTable(assocTable, cache, base);
      }

      let entity = this.db.model(baseNode.entity);
      result = { ...entity.meta.associations[last]
      };

      if (!baseNode.subAssocs) {
        baseNode.subAssocs = {};
      }

      cache[assoc] = baseNode.subAssocs[last] = result;
    }

    if (result.assoc) {
      this._loadAssocIntoTable(assocTable, cache, assoc + '.' + result.assoc);
    }

    return result;
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) return;
        let objKey = ':' + anchor;
        let subObj = rowObject[objKey];
        let subIndexes = existingRow.subIndexes[objKey];
        let rowKey = subObj[key];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssocs) {
            mergeRecord(existingSubRow, subObj, subAssocs);
          }
        } else {
          if (!list) {
            throw new Error("Assertion failed: list");
          }

          if (existingRow.rowObject[objKey]) {
            existingRow.rowObject[objKey].push(subObj);
          } else {
            existingRow.rowObject[objKey] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssocs);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      let indexes = {};

      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) {
          return;
        }

        let objKey = ':' + anchor;
        let subObject = rowObject[objKey];
        let subIndex = {
          rowObject: subObject
        };

        if (list) {
          if (_.isNil(subObject[key])) {
            rowObject[objKey] = [];
            subObject = null;
          } else {
            rowObject[objKey] = [subObject];
          }
        } else if (subObject && _.isNil(subObject[key])) {
          subObject = rowObject[objKey] = null;
        }

        if (subObject) {
          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssocs);
          }

          indexes[objKey] = {
            [subObject[key]]: subIndex
          };
        }
      });

      return indexes;
    }

    let arrayOfObjs = [];
    rows.forEach((row, i) => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];

            if (nodePath) {
              let subObject = {
                [col.name]: value
              };
              tableCache[col.table] = subObject;
              setValueByPath(result, nodePath, subObject);
            }
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

  static _extractAssociations(data) {
    let raw = {},
        assocs = {};

    _.forOwn(data, (v, k) => {
      if (k.startsWith(':')) {
        assocs[k.substr(1)] = v;
      } else {
        raw[k] = v;
      }
    });

    return [raw, assocs];
  }

  static async _createAssocs_(context, assocs) {
    let meta = this.meta.associations;
    let keyValue = context.latest[this.meta.keyField];

    if (_.isNil(keyValue)) {
      throw new OolongUsageError('Missing required primary key field value. Entity: ' + this.meta.name);
    }

    return eachAsync_(assocs, async (data, anchor) => {
      let assocMeta = meta[anchor];

      if (!assocMeta) {
        throw new BusinessError(`Unknown association "${anchor}" of entity "${this.meta.name}".`);
      }

      let assocModel = this.db.model(assocMeta.entity);

      if (assocMeta.list) {
        data = _.castArray(data);
        return eachAsync_(data, item => assocModel.create_({ ...item,
          ...(assocMeta.field ? {
            [assocMeta.field]: keyValue
          } : {})
        }, context.createOptions, context.connOptions));
      }

      return assocModel.create_({ ...data,
        ...(assocMeta.field ? {
          [assocMeta.field]: keyValue
        } : {})
      }, context.createOptions, context.connOptions);
    });
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZ2V0VmFsdWVCeVBhdGgiLCJzZXRWYWx1ZUJ5UGF0aCIsImVhY2hBc3luY18iLCJmcyIsIkRhdGVUaW1lIiwiRW50aXR5TW9kZWwiLCJPb2xvbmdVc2FnZUVycm9yIiwiQnVzaW5lc3NFcnJvciIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJfdHJhbnNsYXRlU3ltYm9sVG9rZW4iLCJuYW1lIiwiZGIiLCJjb25uZWN0b3IiLCJyYXciLCJFcnJvciIsIl9zZXJpYWxpemUiLCJ2YWx1ZSIsInRvSVNPIiwiaW5jbHVkZU9mZnNldCIsImNyZWF0ZV8iLCJhcmdzIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJjb2RlIiwibWVzc2FnZSIsInVwZGF0ZV8iLCJhZnRlckNyZWF0ZV8iLCJjb250ZXh0IiwiaW5zZXJ0SWQiLCJyZXN1bHQiLCJsYXRlc3QiLCJjcmVhdGVPcHRpb25zIiwiJHJldHJpZXZlQ3JlYXRlZCIsImNvbmRpdGlvbiIsImdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tIiwiZmluZE9uZV8iLCIkcXVlcnkiLCIkdW5ib3hpbmciLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiYWZ0ZXJGaW5kQWxsXyIsInJlY29yZHMiLCJmaW5kT3B0aW9ucyIsIiR0b0RpY3Rpb25hcnkiLCJyZWR1Y2UiLCJ0YWJsZSIsInYiLCJrZXlGaWVsZCIsIm1hcCIsInJvdyIsInBvcHVsYXRlIiwiYmVmb3JlRGVsZXRlXyIsImRlbGV0ZU9wdGlvbnMiLCIkcmV0cmlldmVEZWxldGVkIiwiY29ubmVjdGlvbiIsImJlZ2luVHJhbnNhY3Rpb25fIiwiZXhpc3RpbmciLCJfcHJlcGFyZUFzc29jaWF0aW9ucyIsImFzc29jaWF0aW9ucyIsInVuaXEiLCIkYXNzb2NpYXRpb24iLCJzb3J0IiwiYXNzb2NUYWJsZSIsImNvdW50ZXIiLCJjYWNoZSIsImZvckVhY2giLCJhc3NvYyIsImlzUGxhaW5PYmplY3QiLCJhbGlhcyIsImVudGl0eSIsImpvaW5UeXBlIiwidHlwZSIsIm91dHB1dCIsIm9uIiwiZGF0YXNldCIsImJ1aWxkUXVlcnkiLCJfcHJlcGFyZVF1ZXJpZXMiLCIkdmFyaWFibGVzIiwiX2xvYWRBc3NvY0ludG9UYWJsZSIsImxhc3RQb3MiLCJsYXN0SW5kZXhPZiIsImJhc2UiLCJzdWJzdHIiLCJsYXN0IiwiYmFzZU5vZGUiLCJjb25zb2xlIiwibG9nIiwibW9kZWwiLCJzdWJBc3NvY3MiLCJfbWFwUmVjb3Jkc1RvT2JqZWN0cyIsInJvd3MiLCJjb2x1bW5zIiwiYWxpYXNNYXAiLCJoaWVyYXJjaHkiLCJtYWluSW5kZXgiLCJtZXJnZVJlY29yZCIsImV4aXN0aW5nUm93Iiwicm93T2JqZWN0IiwiZWFjaCIsInNxbCIsImtleSIsImxpc3QiLCJhbmNob3IiLCJvYmpLZXkiLCJzdWJPYmoiLCJzdWJJbmRleGVzIiwicm93S2V5IiwiaXNOaWwiLCJleGlzdGluZ1N1YlJvdyIsInB1c2giLCJzdWJJbmRleCIsImJ1aWxkU3ViSW5kZXhlcyIsImluZGV4ZXMiLCJzdWJPYmplY3QiLCJhcnJheU9mT2JqcyIsImkiLCJ0YWJsZUNhY2hlIiwiY29sIiwiYnVja2V0Iiwibm9kZVBhdGgiLCJfZXh0cmFjdEFzc29jaWF0aW9ucyIsImRhdGEiLCJhc3NvY3MiLCJmb3JPd24iLCJrIiwic3RhcnRzV2l0aCIsIl9jcmVhdGVBc3NvY3NfIiwia2V5VmFsdWUiLCJhc3NvY01ldGEiLCJhc3NvY01vZGVsIiwiY2FzdEFycmF5IiwiaXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxH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NUgsQ0FBUDtBQUNILEtBZmdCLENBQWpCO0FBZ0JIOztBQW5mc0M7O0FBc2YzQ2dHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRJLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgXywgZ2V0VmFsdWVCeVBhdGgsIHNldFZhbHVlQnlQYXRoLCBlYWNoQXN5bmNfLCBmcyB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcbmNvbnN0IHsgT29sb25nVXNhZ2VFcnJvciwgQnVzaW5lc3NFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYW1lIC0gTmFtZSBvZiB0aGUgc3ltYm9sIHRva2VuIFxuICAgICAqL1xuICAgIHN0YXRpYyBfdHJhbnNsYXRlU3ltYm9sVG9rZW4obmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRiLmNvbm5lY3Rvci5yYXcoJ05PVygpJyk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0Jyk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9zZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAxIDogMDtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZV8oLi4uYXJncykge1xuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmNyZWF0ZV8oLi4uYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcblxuICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX05PX1JFRkVSRU5DRURfUk9XXzInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoJ1RoZSBuZXcgZW50aXR5IGlzIHJlZmVyZW5jaW5nIHRvIGFuIHVuZXhpc3RpbmcgZW50aXR5LiBEZXRhaWw6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnRVJfRFVQX0VOVFJZJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGVycm9yLm1lc3NhZ2UgKyBgIHdoaWxlIGNyZWF0aW5nIGEgbmV3IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlXyguLi5hcmdzKSB7XG4gICAgICAgIHRyeSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIudXBkYXRlXyguLi5hcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxldCBlcnJvckNvZGUgPSBlcnJvci5jb2RlO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnRVJfTk9fUkVGRVJFTkNFRF9ST1dfMicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcignVGhlIG5ldyBlbnRpdHkgaXMgcmVmZXJlbmNpbmcgdG8gYW4gdW5leGlzdGluZyBlbnRpdHkuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX0RVUF9FTlRSWScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUG9zdCBjcmVhdGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmNyZWF0ZU9wdGlvbnNdIC0gQ3JlYXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NyZWF0ZU9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZF0gLSBSZXRyaWV2ZSB0aGUgbmV3bHkgY3JlYXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyQ3JlYXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0F1dG9JbmNyZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCB7IGluc2VydElkIH0gPSBjb250ZXh0LnJlc3VsdDtcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0W3RoaXMubWV0YS5mZWF0dXJlcy5hdXRvSWQuZmllbGRdID0gaW5zZXJ0SWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5jcmVhdGVPcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWQpIHtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSB0aGlzLmdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tKGNvbnRleHQubGF0ZXN0KTtcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0ID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogY29uZGl0aW9uLCAkdW5ib3hpbmc6IHRydWV9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbdXBkYXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbdXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSB1cGRhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJVcGRhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkcXVlcnk6IGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcXVlcnksICR1bmJveGluZzogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGFmdGVyRmluZEFsbF8oY29udGV4dCwgcmVjb3Jkcykge1xuICAgICAgICBpZiAoY29udGV4dC5maW5kT3B0aW9ucy4kdG9EaWN0aW9uYXJ5KSByZXR1cm4gcmVjb3Jkcy5yZWR1Y2UoKHRhYmxlLCB2KSA9PiB7XG4gICAgICAgICAgICB0YWJsZVt2W3RoaXMubWV0YS5rZXlGaWVsZF1dID0gdjtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZTtcbiAgICAgICAgfSwge30pO1xuXG4gICAgICAgIGlmIChjb250ZXh0LmZpbmRPcHRpb25zLiR1bmJveGluZykgcmV0dXJuIHJlY29yZHM7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZHMubWFwKHJvdyA9PiB0aGlzLnBvcHVsYXRlKHJvdykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJlZm9yZSBkZWxldGluZyBhbiBlbnRpdHkuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5kZWxldGVPcHRpb25zXSAtIERlbGV0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWRdIC0gUmV0cmlldmUgdGhlIHJlY2VudGx5IGRlbGV0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBiZWZvcmVEZWxldGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQuY29ubk9wdGlvbnMgfHwgIWNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMgfHwgKGNvbnRleHQuY29ubk9wdGlvbnMgPSB7fSk7XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24gPSBhd2FpdCB0aGlzLmRiLmNvbm5lY3Rvci5iZWdpblRyYW5zYWN0aW9uXygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogY29udGV4dC5kZWxldGVPcHRpb25zLiRxdWVyeSwgJHVuYm94aW5nOiB0cnVlfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGZpbmRPcHRpb25zIFxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJlcGFyZUFzc29jaWF0aW9ucyhmaW5kT3B0aW9ucykgeyBcbiAgICAgICAgbGV0IGFzc29jaWF0aW9ucyA9IF8udW5pcShmaW5kT3B0aW9ucy4kYXNzb2NpYXRpb24pLnNvcnQoKTsgICAgICAgIFxuICAgICAgICBsZXQgYXNzb2NUYWJsZSA9IHt9LCBjb3VudGVyID0gMCwgY2FjaGUgPSB7fTsgICAgICAgXG5cbiAgICAgICAgYXNzb2NpYXRpb25zLmZvckVhY2goYXNzb2MgPT4ge1xuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChhc3NvYykpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxpYXMgPSBhc3NvYy5hbGlhcztcbiAgICAgICAgICAgICAgICBpZiAoIWFzc29jLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzID0gJzpqb2luJyArICsrY291bnRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhc3NvY1RhYmxlW2FsaWFzXSA9IHsgXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgam9pblR5cGU6IGFzc29jLnR5cGUsIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IGFzc29jLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgYWxpYXMsXG4gICAgICAgICAgICAgICAgICAgIG9uOiBhc3NvYy5vbixcbiAgICAgICAgICAgICAgICAgICAgLi4uKGFzc29jLmRhdGFzZXQgPyB0aGlzLmRiLmNvbm5lY3Rvci5idWlsZFF1ZXJ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jLmVudGl0eSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZVF1ZXJpZXMoeyAuLi5hc3NvYy5kYXRhc2V0LCAkdmFyaWFibGVzOiBmaW5kT3B0aW9ucy4kdmFyaWFibGVzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApIDoge30pICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGFzc29jKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICByZXR1cm4gYXNzb2NUYWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGFzc29jVGFibGUgLSBIaWVyYXJjaHkgd2l0aCBzdWJBc3NvY3NcbiAgICAgKiBAcGFyYW0geyp9IGNhY2hlIC0gRG90dGVkIHBhdGggYXMga2V5XG4gICAgICogQHBhcmFtIHsqfSBhc3NvYyAtIERvdHRlZCBwYXRoXG4gICAgICovXG4gICAgc3RhdGljIF9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGFzc29jKSB7XG4gICAgICAgIGlmIChjYWNoZVthc3NvY10pIHJldHVybiBjYWNoZVthc3NvY107XG5cbiAgICAgICAgbGV0IGxhc3RQb3MgPSBhc3NvYy5sYXN0SW5kZXhPZignLicpOyAgICAgICAgXG4gICAgICAgIGxldCByZXN1bHQ7ICBcblxuICAgICAgICBpZiAobGFzdFBvcyA9PT0gLTEpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQgPSBjYWNoZVthc3NvY10gPSBhc3NvY1RhYmxlW2Fzc29jXSA9IHsgLi4udGhpcy5tZXRhLmFzc29jaWF0aW9uc1thc3NvY10gfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBiYXNlID0gYXNzb2Muc3Vic3RyKDAsIGxhc3RQb3MpO1xuICAgICAgICAgICAgbGV0IGxhc3QgPSBhc3NvYy5zdWJzdHIobGFzdFBvcysxKTsgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBiYXNlTm9kZSA9IGNhY2hlW2Jhc2VdO1xuICAgICAgICAgICAgaWYgKCFiYXNlTm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJhc2UsIGxhc3QpO1xuICAgICAgICAgICAgICAgIGJhc2VOb2RlID0gdGhpcy5fbG9hZEFzc29jSW50b1RhYmxlKGFzc29jVGFibGUsIGNhY2hlLCBiYXNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGVudGl0eSA9IHRoaXMuZGIubW9kZWwoYmFzZU5vZGUuZW50aXR5KTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgLi4uZW50aXR5Lm1ldGEuYXNzb2NpYXRpb25zW2xhc3RdIH07XG5cbiAgICAgICAgICAgIGlmICghYmFzZU5vZGUuc3ViQXNzb2NzKSB7XG4gICAgICAgICAgICAgICAgYmFzZU5vZGUuc3ViQXNzb2NzID0ge307XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBjYWNoZVthc3NvY10gPSBiYXNlTm9kZS5zdWJBc3NvY3NbbGFzdF0gPSByZXN1bHQ7XG4gICAgICAgIH0gICAgICBcblxuICAgICAgICBpZiAocmVzdWx0LmFzc29jKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGFzc29jICsgJy4nICsgcmVzdWx0LmFzc29jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLypcbiAgICBzdGF0aWMgX3ByZXBhcmVBc3NvY2lhdGlvbnMoZmluZE9wdGlvbnMpIHsgXG4gICAgICAgIGxldCBhc3NvY2lhdGlvbnMgPSBmaW5kT3B0aW9ucy4kYXNzb2NpYXRpb24uY29uY2F0KCkuc29ydCgpOyAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgY2FjaGUgPSB7fSwgaGllcmFyY2h5ID0gW107XG4gICAgICAgIFxuICAgICAgICBhc3NvY2lhdGlvbnMuZm9yRWFjaChhc3NvYyA9PiB7XG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGFzc29jKSkge1xuICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5wdXNoKHsgXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgam9pblR5cGU6IGFzc29jLnR5cGUsIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IGFzc29jLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGFzc29jLmFsaWFzID8geyBhbGlhczogYXNzb2MuYWxpYXMgfSA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uYXNzb2Mub24sXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZGIuY29ubmVjdG9yLmJ1aWxkUXVlcnkoYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVRdWVyaWVzKHsgLi4uYXNzb2MuZGF0YXNldCwgJHZhcmlhYmxlczogZmluZE9wdGlvbnMuJHZhcmlhYmxlcyB9KSkgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBbIHJlbW90ZUVudGl0eSwgYmFzZSwgYW5jaG9yLCBhc3NvY0luZm8gXSA9IHRoaXMuX2dldFJlbGF0ZWRFbnRpdHkoYXNzb2MsIGNhY2hlKTtcbiAgICAgICAgICAgIGFzc2VydDogYXNzb2NJbmZvOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgcmVtb3RlRW50aXR5TmFtZSA9IHJlbW90ZUVudGl0eS5tZXRhLm5hbWU7XG5cbiAgICAgICAgICAgIGxldCBkZXRhaWwgPSB7XG4gICAgICAgICAgICAgICAgZW50aXR5OiByZW1vdGVFbnRpdHlOYW1lLFxuICAgICAgICAgICAgICAgIGtleUZpZWxkOiByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZCxcbiAgICAgICAgICAgICAgICBqb2luVHlwZTogJ0xFRlQgSk9JTicsXG4gICAgICAgICAgICAgICAgYW5jaG9yXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgdG9DYWNoZSA9IHtcbiAgICAgICAgICAgICAgICBlbnRpdHk6IHJlbW90ZUVudGl0eSxcbiAgICAgICAgICAgICAgICBkZXRhaWxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChhc3NvY0luZm8uaXNMaXN0KSB7XG4gICAgICAgICAgICAgICAgZGV0YWlsLmlzTGlzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhc3NvY0luZm8ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwub3B0aW9uYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYXNzb2NJbmZvLmNvbm5lY3RlZEJ5KSB7XG4gICAgICAgICAgICAgICAgZGV0YWlsLmxvY2FsRmllbGQgPSBjYWNoZVtiYXNlXSA/IGNhY2hlW2Jhc2VdLmVudGl0eS5tZXRhLmtleUZpZWxkIDogdGhpcy5tZXRhLmtleUZpZWxkO1xuICAgICAgICAgICAgICAgIGRldGFpbC5yZW1vdGVGaWVsZCA9IGFzc29jSW5mby5yZW1vdGVGaWVsZCB8fCB0aGlzLm1ldGEubmFtZTtcblxuICAgICAgICAgICAgICAgIGRldGFpbC5lbnRpdHkgPSBhc3NvY0luZm8uY29ubmVjdGVkQnk7XG4gICAgICAgICAgICAgICAgZGV0YWlsLmtleUZpZWxkID0gdGhpcy5kYi5tb2RlbChhc3NvY0luZm8uY29ubmVjdGVkQnkpLm1ldGEua2V5RmllbGQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXNzb2NJbmZvLmNvbm5lY3RlZFdpdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsLmNvbm5lY3RlZFdpdGggPSBhc3NvY0luZm8uY29ubmVjdGVkV2l0aDtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgdG9DYWNoZS5kZXRhaWwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogcmVtb3RlRW50aXR5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAga2V5RmllbGQ6IHJlbW90ZUVudGl0eS5tZXRhLmtleUZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBqb2luVHlwZTogJ0xFRlQgSk9JTicsXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcjogYXNzb2NJbmZvLnJlZmVyc1RvRmllbGQsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6IGFzc29jSW5mby5yZWZlcnNUb0ZpZWxkLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVGaWVsZDogcmVtb3RlRW50aXR5Lm1ldGEua2V5RmllbGRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZGV0YWlsLnN1YkFzc29jaWF0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgdG9DYWNoZS5kZXRhaWxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhc3NvY0luZm8uaXNMaXN0KSB7XG4gICAgICAgICAgICAgICAgZGV0YWlsLmxvY2FsRmllbGQgPSBjYWNoZVtiYXNlXSA/IGNhY2hlW2Jhc2VdLmVudGl0eS5tZXRhLmtleUZpZWxkIDogdGhpcy5tZXRhLmtleUZpZWxkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFzc29jSW5mby5yZW1vdGVGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsLnJlbW90ZUZpZWxkcyA9IGFzc29jSW5mby5yZW1vdGVGaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5qb2luVHlwZSA9ICdSSUdIVCBKT0lOJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWwucmVtb3RlRmllbGQgPSBhc3NvY0luZm8ucmVtb3RlRmllbGQgfHwgdGhpcy5tZXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwubG9jYWxGaWVsZCA9IGFuY2hvcjtcbiAgICAgICAgICAgICAgICBpZiAoYXNzb2NJbmZvLnJlbW90ZUZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWwucmVtb3RlRmllbGRzID0gYXNzb2NJbmZvLnJlbW90ZUZpZWxkcztcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsLmpvaW5UeXBlID0gJ1JJR0hUIEpPSU4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5yZW1vdGVGaWVsZCA9IHJlbW90ZUVudGl0eS5tZXRhLmtleUZpZWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhY2hlW2Jhc2VdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlW2Jhc2VdLmRldGFpbC5zdWJBc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVbYmFzZV0uZGV0YWlsLnN1YkFzc29jaWF0aW9ucy5wdXNoKGRldGFpbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVbYmFzZV0uZGV0YWlsLnN1YkFzc29jaWF0aW9ucyA9IFsgZGV0YWlsIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHkucHVzaChkZXRhaWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZVthc3NvY10gPSB0b0NhY2hlO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaGllcmFyY2h5O1xuICAgIH0qL1xuXG4gICAgLypcbiAgICBzdGF0aWMgX2dldFJlbGF0ZWRFbnRpdHkoYXNzb2NQYXRoLCBjYWNoZSkgeyAgICAgICAgXG4gICAgICAgIGxldCBwYXJ0cyA9IGFzc29jUGF0aC5zcGxpdCgnLicpOyAgICAgICAgXG4gICAgICAgIGxldCBiYXNlID0gcGFydHMuc2xpY2UoMCwgLTEpLmpvaW4oJy4nKTsgICAgICAgIFxuXG4gICAgICAgIGxldCBjYWNoZU5vZGUgPSBjYWNoZVtiYXNlXTtcbiAgICAgICAgaWYgKGNhY2hlTm9kZSkge1xuICAgICAgICAgICAgbGV0IGxhc3QgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgICAgIGxldCBhc3NvY0luZm8gPSBjYWNoZU5vZGUuZW50aXR5Lm1ldGEuYXNzb2NpYXRpb25zW2xhc3RdO1xuICAgICAgICAgICAgaWYgKCFhc3NvY0luZm8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihgVW5rbm93biBhc3NvY2lhdGlvbiBvZiBcIiR7dGhpcy5tZXRhLm5hbWV9XCIgZW50aXR5OiAke2Fzc29jUGF0aH1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFsgdGhpcy5kYi5tb2RlbChhc3NvY0luZm8uZW50aXR5KSwgYmFzZSwgbGFzdCwgYXNzb2NJbmZvIF07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW50aXR5ID0gdGhpcywgY3VycmVudCwgY3VycmVudEFzc29jSW5mbztcblxuICAgICAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY3VycmVudCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBjdXJyZW50QXNzb2NJbmZvID0gZW50aXR5Lm1ldGEuYXNzb2NpYXRpb25zW2N1cnJlbnRdO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50QXNzb2NJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoYFVua25vd24gYXNzb2NpYXRpb24gb2YgXCIke3RoaXMubWV0YS5uYW1lfVwiIGVudGl0eTogJHthc3NvY1BhdGh9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVudGl0eSA9IHRoaXMuZGIubW9kZWwoY3VycmVudEFzc29jSW5mby5lbnRpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgZW50aXR5LCBiYXNlLCBjdXJyZW50LCBjdXJyZW50QXNzb2NJbmZvIF07XG4gICAgfSovXG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoW3Jvd3MsIGNvbHVtbnMsIGFsaWFzTWFwXSwgaGllcmFyY2h5KSB7XG4gICAgICAgIGxldCBtYWluSW5kZXggPSB7fTsgICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGFzc29jaWF0aW9ucykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKGFzc29jaWF0aW9ucywgKHsgc3FsLCBrZXksIGxpc3QsIHN1YkFzc29jcyB9LCBhbmNob3IpID0+IHsgXG4gICAgICAgICAgICAgICAgaWYgKHNxbCkgcmV0dXJuOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGxldCBvYmpLZXkgPSAnOicgKyBhbmNob3I7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBzdWJPYmogPSByb3dPYmplY3Rbb2JqS2V5XVxuICAgICAgICAgICAgICAgIGxldCBzdWJJbmRleGVzID0gZXhpc3RpbmdSb3cuc3ViSW5kZXhlc1tvYmpLZXldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGpvaW5lZCBhbiBlbXB0eSByZWNvcmRcbiAgICAgICAgICAgICAgICBsZXQgcm93S2V5ID0gc3ViT2JqW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwocm93S2V5KSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0aW5nU3ViUm93ID0gc3ViSW5kZXhlcyAmJiBzdWJJbmRleGVzW3Jvd0tleV07XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU3ViUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlUmVjb3JkKGV4aXN0aW5nU3ViUm93LCBzdWJPYmosIHN1YkFzc29jcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3cucm93T2JqZWN0W29iaktleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUm93LnJvd09iamVjdFtvYmpLZXldLnB1c2goc3ViT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUm93LnJvd09iamVjdFtvYmpLZXldID0gWyBzdWJPYmogXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ID0geyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdDogc3ViT2JqICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXguc3ViSW5kZXhlcyA9IGJ1aWxkU3ViSW5kZXhlcyhzdWJPYmosIHN1YkFzc29jcylcbiAgICAgICAgICAgICAgICAgICAgfSAgICBcblxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzW3Jvd0tleV0gPSBzdWJJbmRleDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRTdWJJbmRleGVzKHJvd09iamVjdCwgYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXhlcyA9IHt9O1xuXG4gICAgICAgICAgICBfLmVhY2goYXNzb2NpYXRpb25zLCAoeyBzcWwsIGtleSwgbGlzdCwgc3ViQXNzb2NzIH0sIGFuY2hvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzcWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBvYmpLZXkgPSAnOicgKyBhbmNob3I7XG4gICAgICAgICAgICAgICAgbGV0IHN1Yk9iamVjdCA9IHJvd09iamVjdFtvYmpLZXldOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXggPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Q6IHN1Yk9iamVjdCBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpc3QpIHsgICBcbiAgICAgICAgICAgICAgICAgICAgLy9tYW55IHRvICogICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc05pbChzdWJPYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3ViT2JqZWN0IG5vdCBleGlzdCwganVzdCBmaWxsZWQgd2l0aCBudWxsIGJ5IGpvaW5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdFtvYmpLZXldID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0W29iaktleV0gPSBbIHN1Yk9iamVjdCBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJPYmplY3QgJiYgXy5pc05pbChzdWJPYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViT2JqZWN0ID0gcm93T2JqZWN0W29iaktleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdWJPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXguc3ViSW5kZXhlcyA9IGJ1aWxkU3ViSW5kZXhlcyhzdWJPYmplY3QsIHN1YkFzc29jcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbmRleGVzW29iaktleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbc3ViT2JqZWN0W2tleV1dOiBzdWJJbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFycmF5T2ZPYmpzID0gW107XG5cbiAgICAgICAgLy9wcm9jZXNzIGVhY2ggcm93XG4gICAgICAgIHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgcm93T2JqZWN0ID0ge307IC8vIGhhc2gtc3R5bGUgZGF0YSByb3dcbiAgICAgICAgICAgIGxldCB0YWJsZUNhY2hlID0ge307IC8vIGZyb20gYWxpYXMgdG8gY2hpbGQgcHJvcCBvZiByb3dPYmplY3RcblxuICAgICAgICAgICAgcm93LnJlZHVjZSgocmVzdWx0LCB2YWx1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2wgPSBjb2x1bW5zW2ldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjb2wudGFibGUgPT09ICdBJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbY29sLm5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWNrZXQgPSB0YWJsZUNhY2hlW2NvbC50YWJsZV07ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9hbHJlYWR5IG5lc3RlZCBpbnNpZGUgXG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXRbY29sLm5hbWVdID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlUGF0aCA9IGFsaWFzTWFwW2NvbC50YWJsZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3ViT2JqZWN0ID0geyBbY29sLm5hbWVdOiB2YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ2FjaGVbY29sLnRhYmxlXSA9IHN1Yk9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZUJ5UGF0aChyZXN1bHQsIG5vZGVQYXRoLCBzdWJPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sIHJvd09iamVjdCk7ICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHJvd0tleSA9IHJvd09iamVjdFt0aGlzLm1ldGEua2V5RmllbGRdO1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nUm93ID0gbWFpbkluZGV4W3Jvd0tleV07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3cpIHtcbiAgICAgICAgICAgICAgICBtZXJnZVJlY29yZChleGlzdGluZ1Jvdywgcm93T2JqZWN0LCBoaWVyYXJjaHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheU9mT2Jqcy5wdXNoKHJvd09iamVjdCk7XG4gICAgICAgICAgICAgICAgbWFpbkluZGV4W3Jvd0tleV0gPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3QsIFxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzOiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBoaWVyYXJjaHkpXG4gICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhcnJheU9mT2JqcztcbiAgICB9XG5cbiAgICBzdGF0aWMgX2V4dHJhY3RBc3NvY2lhdGlvbnMoZGF0YSkge1xuICAgICAgICBsZXQgcmF3ID0ge30sIGFzc29jcyA9IHt9O1xuICAgICAgICBcbiAgICAgICAgXy5mb3JPd24oZGF0YSwgKHYsIGspID0+IHtcbiAgICAgICAgICAgIGlmIChrLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgICAgIGFzc29jc1trLnN1YnN0cigxKV0gPSB2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYXdba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBbIHJhdywgYXNzb2NzIF07ICAgICAgICBcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2NyZWF0ZUFzc29jc18oY29udGV4dCwgYXNzb2NzKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5tZXRhLmFzc29jaWF0aW9ucztcbiAgICAgICAgbGV0IGtleVZhbHVlID0gY29udGV4dC5sYXRlc3RbdGhpcy5tZXRhLmtleUZpZWxkXTtcblxuICAgICAgICBpZiAoXy5pc05pbChrZXlWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPb2xvbmdVc2FnZUVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHByaW1hcnkga2V5IGZpZWxkIHZhbHVlLiBFbnRpdHk6ICcgKyB0aGlzLm1ldGEubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhhc3NvY3MsIGFzeW5jIChkYXRhLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgIGxldCBhc3NvY01ldGEgPSBtZXRhW2FuY2hvcl07XG4gICAgICAgICAgICBpZiAoIWFzc29jTWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIFwiJHthbmNob3J9XCIgb2YgZW50aXR5IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGFzc29jTW9kZWwgPSB0aGlzLmRiLm1vZGVsKGFzc29jTWV0YS5lbnRpdHkpO1xuXG4gICAgICAgICAgICBpZiAoYXNzb2NNZXRhLmxpc3QpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gXy5jYXN0QXJyYXkoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhkYXRhLCBpdGVtID0+IGFzc29jTW9kZWwuY3JlYXRlXyh7IC4uLml0ZW0sIC4uLihhc3NvY01ldGEuZmllbGQgPyB7IFthc3NvY01ldGEuZmllbGRdOiBrZXlWYWx1ZSB9IDoge30pIH0sIGNvbnRleHQuY3JlYXRlT3B0aW9ucywgY29udGV4dC5jb25uT3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXNzb2NNb2RlbC5jcmVhdGVfKHsgLi4uZGF0YSwgLi4uKGFzc29jTWV0YS5maWVsZCA/IHsgW2Fzc29jTWV0YS5maWVsZF06IGtleVZhbHVlIH0gOiB7fSkgfSwgY29udGV4dC5jcmVhdGVPcHRpb25zLCBjb250ZXh0LmNvbm5PcHRpb25zKTsgIFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXlTUUxFbnRpdHlNb2RlbDsiXX0=