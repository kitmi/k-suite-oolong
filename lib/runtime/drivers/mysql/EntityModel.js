"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  setValueByPath,
  eachAsync_
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  OolongUsageError,
  BusinessError
} = require('../../Errors');

const Types = require('../../types');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static _translateSymbolToken(name) {
    if (name === 'now') {
      return this.db.connector.raw('NOW()');
    }

    throw new Error('not support');
  }

  static _serialize(value) {
    if (typeof value === 'boolean') return value ? 1 : 0;

    if (value instanceof DateTime) {
      return value.toISO({
        includeOffset: false
      });
    }

    return value;
  }

  static _serializeByType(value, info) {
    if (info.type === 'boolean') {
      return value ? 1 : 0;
    }

    if (info.type === 'datetime' && value instanceof DateTime) {
      return value.toISO({
        includeOffset: false
      });
    }

    if (info.type === 'array' && Array.isArray(value)) {
      if (info.csv) {
        return Types.ARRAY.toCsv(value);
      } else {
        return Types.ARRAY.serialize(value);
      }
    }

    return value;
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity. Detail: ' + error.message);
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message + ` while creating a new "${this.meta.name}".`);
      }

      throw error;
    }
  }

  static async updateOne_(...args) {
    try {
      return await super.updateOne_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      let retrieveOptions = _.isPlainObject(context.createOptions.$retrieveCreated) ? context.createOptions.$retrieveCreated : {};
      context.latest = await this.findOne_({ ...retrieveOptions,
        $query: condition
      }, context.connOptions);
    }

    return true;
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      let condition = {
        $query: context.updateOptions.$query
      };

      if (context.updateOptions.$byPassEnsureUnique) {
        condition.$byPassEnsureUnique = context.updateOptions.$byPassEnsureUnique;
      }

      let retrieveOptions = {};

      if (_.isPlainObject(context.updateOptions.$retrieveUpdated)) {
        retrieveOptions = context.updateOptions.$retrieveUpdated;
      } else if (context.updateOptions.$relationships) {
        retrieveOptions.$relationships = context.updateOptions.$relationships;
      }

      context.latest = await this.findOne_({ ...retrieveOptions,
        ...condition
      }, context.connOptions);
    }

    return true;
  }

  static async afterUpdateMany_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      let retrieveOptions = {};

      if (_.isPlainObject(context.updateOptions.$retrieveUpdated)) {
        retrieveOptions = context.updateOptions.$retrieveUpdated;
      } else if (context.updateOptions.$relationships) {
        retrieveOptions.$relationships = context.updateOptions.$relationships;
      }

      context.latest = await this.findAll_({ ...retrieveOptions,
        $query: context.updateOptions.$query
      }, context.connOptions);
    }

    return true;
  }

  static async afterDelete_(context) {
    return true;
  }

  static async afterDeleteMany_(context) {
    return true;
  }

  static afterFindAll_(context, records) {
    if (context.findOptions.$toDictionary) return records.reduce((table, v) => {
      table[v[this.meta.keyField]] = v;
      return table;
    }, {});
    return records;
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      let retrieveOptions = _.isPlainObject(context.deleteOptions.$retrieveDeleted) ? context.deleteOptions.$retrieveDeleted : {};
      context.existing = await this.findOne_({ ...retrieveOptions,
        $query: context.deleteOptions.$query
      }, context.connOptions);
    }
  }

  static _prepareAssociations(findOptions) {
    let associations = _.uniq(findOptions.$association).sort();

    let assocTable = {},
        counter = 0,
        cache = {};
    associations.forEach(assoc => {
      if (_.isPlainObject(assoc)) {
        assoc = this._translateSchemaNameToDb(assoc);
        let alias = assoc.alias;

        if (!assoc.alias) {
          alias = ':join' + ++counter;
        }

        assocTable[alias] = {
          entity: assoc.entity,
          joinType: assoc.type,
          output: assoc.output,
          key: assoc.key,
          alias,
          on: assoc.on,
          ...(assoc.dataset ? this.db.connector.buildQuery(assoc.entity, this._prepareQueries({ ...assoc.dataset,
            $variables: findOptions.$variables
          })) : {})
        };
      } else {
        this._loadAssocIntoTable(assocTable, cache, assoc);
      }
    });
    return assocTable;
  }

  static _loadAssocIntoTable(assocTable, cache, assoc) {
    if (cache[assoc]) return cache[assoc];
    let lastPos = assoc.lastIndexOf('.');
    let result;

    if (lastPos === -1) {
      let assocInfo = { ...this.meta.associations[assoc]
      };

      if (!assocInfo) {
        throw new BusinessError(`Entity "${this.meta.name}" does not have the association "${assoc}".`);
      }

      result = cache[assoc] = assocTable[assoc] = { ...this._translateSchemaNameToDb(assocInfo)
      };
    } else {
      let base = assoc.substr(0, lastPos);
      let last = assoc.substr(lastPos + 1);
      let baseNode = cache[base];

      if (!baseNode) {
        baseNode = this._loadAssocIntoTable(assocTable, cache, base);
      }

      let entity = this.db.model(baseNode.entity);
      let assocInfo = { ...entity.meta.associations[last]
      };

      if (!assocInfo) {
        throw new BusinessError(`Entity "${entity.meta.name}" does not have the association "${assoc}".`);
      }

      result = { ...this._translateSchemaNameToDb(assocInfo)
      };

      if (!baseNode.subAssocs) {
        baseNode.subAssocs = {};
      }

      cache[assoc] = baseNode.subAssocs[last] = result;
    }

    if (result.assoc) {
      this._loadAssocIntoTable(assocTable, cache, assoc + '.' + result.assoc);
    }

    return result;
  }

  static _translateSchemaNameToDb(assoc) {
    if (assoc.entity.indexOf('.') > 0) {
      let [schemaName, entityName] = assoc.entity.split('.', 2);
      let app = this.db.app;

      if (!app) {
        throw new OolongUsageError('Cross db association requires the db object have access to other db object.');
      }

      let refDb = app.db(schemaName);

      if (!refDb) {
        throw new OolongUsageError(`The referenced schema "${schemaName}" does not have db model in the same application.`);
      }

      assoc.entity = refDb.connector.database + '.' + entityName;

      if (!assoc.key) {
        let model = refDb.model(entityName);

        if (!model) {
          throw new OolongUsageError(`Failed load the entity model "${schemaName}.${entityName}".`);
        }

        assoc.key = model.meta.keyField;
      }
    } else if (!assoc.key) {
      assoc.key = this.db.model(assoc.entity).meta.keyField;
    }

    return assoc;
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) return;
        let objKey = ':' + anchor;
        let subObj = rowObject[objKey];
        let subIndexes = existingRow.subIndexes[objKey];
        let rowKey = subObj[key];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssocs) {
            mergeRecord(existingSubRow, subObj, subAssocs);
          }
        } else {
          if (!list) {
            throw new Error("Assertion failed: list");
          }

          if (existingRow.rowObject[objKey]) {
            existingRow.rowObject[objKey].push(subObj);
          } else {
            existingRow.rowObject[objKey] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssocs);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      let indexes = {};

      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) {
          return;
        }

        if (!key) {
          throw new Error("Assertion failed: key");
        }

        let objKey = ':' + anchor;
        let subObject = rowObject[objKey];
        let subIndex = {
          rowObject: subObject
        };

        if (list) {
          if (_.isNil(subObject[key])) {
            rowObject[objKey] = [];
            subObject = null;
          } else {
            rowObject[objKey] = [subObject];
          }
        } else if (subObject && _.isNil(subObject[key])) {
          subObject = rowObject[objKey] = null;
        }

        if (subObject) {
          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssocs);
          }

          indexes[objKey] = {
            [subObject[key]]: subIndex
          };
        }
      });

      return indexes;
    }

    let arrayOfObjs = [];
    rows.forEach((row, i) => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];

            if (nodePath) {
              let subObject = {
                [col.name]: value
              };
              tableCache[col.table] = subObject;
              setValueByPath(result, nodePath, subObject);
            }
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

  static _extractAssociations(data) {
    let raw = {},
        assocs = {};

    _.forOwn(data, (v, k) => {
      if (k.startsWith(':')) {
        assocs[k.substr(1)] = v;
      } else {
        raw[k] = v;
      }
    });

    return [raw, assocs];
  }

  static async _createAssocs_(context, assocs) {
    let meta = this.meta.associations;
    let keyValue = context.latest[this.meta.keyField];

    if (_.isNil(keyValue)) {
      throw new OolongUsageError('Missing required primary key field value. Entity: ' + this.meta.name);
    }

    return eachAsync_(assocs, async (data, anchor) => {
      let assocMeta = meta[anchor];

      if (!assocMeta) {
        throw new BusinessError(`Unknown association "${anchor}" of entity "${this.meta.name}".`);
      }

      let assocModel = this.db.model(assocMeta.entity);

      if (assocMeta.list) {
        data = _.castArray(data);
        return eachAsync_(data, item => assocModel.create_({ ...item,
          ...(assocMeta.field ? {
            [assocMeta.field]: keyValue
          } : {})
        }, context.createOptions, context.connOptions));
      }

      return assocModel.create_({ ...data,
        ...(assocMeta.field ? {
          [assocMeta.field]: keyValue
        } : {})
      }, context.createOptions, context.connOptions);
    });
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwic2V0VmFsdWVCeVBhdGgiLCJlYWNoQXN5bmNfIiwiRGF0ZVRpbWUiLCJFbnRpdHlNb2RlbCIsIk9vbG9uZ1VzYWdlRXJyb3IiLCJCdXNpbmVzc0Vycm9yIiwiVHlwZXMiLCJNeVNRTEVudGl0eU1vZGVsIiwiaGFzQXV0b0luY3JlbWVudCIsImF1dG9JZCIsIm1ldGEiLCJmZWF0dXJlcyIsImZpZWxkcyIsImZpZWxkIiwiYXV0b0luY3JlbWVudElkIiwiX3RyYW5zbGF0ZVN5bWJvbFRva2VuIiwibmFtZSIsImRiIiwiY29ubmVjdG9yIiwicmF3IiwiRXJyb3IiLCJfc2VyaWFsaXplIiwidmFsdWUiLCJ0b0lTTyIsImluY2x1ZGVPZmZzZXQiLCJfc2VyaWFsaXplQnlUeXBlIiwiaW5mbyIsInR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJjc3YiLCJBUlJBWSIsInRvQ3N2Iiwic2VyaWFsaXplIiwiY3JlYXRlXyIsImFyZ3MiLCJlcnJvciIsImVycm9yQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwidXBkYXRlT25lXyIsImFmdGVyQ3JlYXRlXyIsImNvbnRleHQiLCJpbnNlcnRJZCIsInJlc3VsdCIsImxhdGVzdCIsImNyZWF0ZU9wdGlvbnMiLCIkcmV0cmlldmVDcmVhdGVkIiwiY29uZGl0aW9uIiwiZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20iLCJyZXRyaWV2ZU9wdGlvbnMiLCJpc1BsYWluT2JqZWN0IiwiZmluZE9uZV8iLCIkcXVlcnkiLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiJGJ5UGFzc0Vuc3VyZVVuaXF1ZSIsIiRyZWxhdGlvbnNoaXBzIiwiYWZ0ZXJVcGRhdGVNYW55XyIsImZpbmRBbGxfIiwiYWZ0ZXJEZWxldGVfIiwiYWZ0ZXJEZWxldGVNYW55XyIsImFmdGVyRmluZEFsbF8iLCJyZWNvcmRzIiwiZmluZE9wdGlvbnMiLCIkdG9EaWN0aW9uYXJ5IiwicmVkdWNlIiwidGFibGUiLCJ2Iiwia2V5RmllbGQiLCJiZWZvcmVEZWxldGVfIiwiZGVsZXRlT3B0aW9ucyIsIiRyZXRyaWV2ZURlbGV0ZWQiLCJjb25uZWN0aW9uIiwiYmVnaW5UcmFuc2FjdGlvbl8iLCJleGlzdGluZyIsIl9wcmVwYXJlQXNzb2NpYXRpb25zIiwiYXNzb2NpYXRpb25zIiwidW5pcSIsIiRhc3NvY2lhdGlvbiIsInNvcnQiLCJhc3NvY1RhYmxlIiwiY291bnRlciIsImNhY2hlIiwiZm9yRWFjaCIsImFzc29jIiwiX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiIiwiYWxpYXMiLCJlbnRpdHkiLCJqb2luVHlwZSIsIm91dHB1dCIsImtleSIsIm9uIiwiZGF0YXNldCIsImJ1aWxkUXVlcnkiLCJfcHJlcGFyZVF1ZXJpZXMiLCIkdmFyaWFibGVzIiwiX2xvYWRBc3NvY0ludG9UYWJsZSIsImxhc3RQb3MiLCJsYXN0SW5kZXhPZiIsImFzc29jSW5mbyIsImJhc2UiLCJzdWJzdHIiLCJsYXN0IiwiYmFzZU5vZGUiLCJtb2RlbCIsInN1YkFzc29jcyIsImluZGV4T2YiLCJzY2hlbWFOYW1lIiwiZW50aXR5TmFtZSIsInNwbGl0IiwiYXBwIiwicmVmRGIiLCJkYXRhYmFzZSIsIl9tYXBSZWNvcmRzVG9PYmplY3RzIiwicm93cyIsImNvbHVtbnMiLCJhbGlhc01hcCIsImhpZXJhcmNoeSIsIm1haW5JbmRleCIsIm1lcmdlUmVjb3JkIiwiZXhpc3RpbmdSb3ciLCJyb3dPYmplY3QiLCJlYWNoIiwic3FsIiwibGlzdCIsImFuY2hvciIsIm9iaktleSIsInN1Yk9iaiIsInN1YkluZGV4ZXMiLCJyb3dLZXkiLCJpc05pbCIsImV4aXN0aW5nU3ViUm93IiwicHVzaCIsInN1YkluZGV4IiwiYnVpbGRTdWJJbmRleGVzIiwiaW5kZXhlcyIsInN1Yk9iamVjdCIsImFycmF5T2ZPYmpzIiwicm93IiwiaSIsInRhYmxlQ2FjaGUiLCJjb2wiLCJidWNrZXQiLCJub2RlUGF0aCIsIl9leHRyYWN0QXNzb2NpYXRpb25zIiwiZGF0YSIsImFzc29jcyIsImZvck93biIsImsiLCJzdGFydHNXaXRoIiwiX2NyZWF0ZUFzc29jc18iLCJrZXlWYWx1ZSIsImFzc29jTWV0YSIsImFzc29jTW9kZWwiLCJjYXN0QXJyYXkiLCJpdGVtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxjQUFMO0FBQXFCQyxFQUFBQTtBQUFyQixJQUFvQ0osSUFBMUM7O0FBRUEsTUFBTTtBQUFFSyxFQUFBQTtBQUFGLElBQWVKLE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU1LLFdBQVcsR0FBR0wsT0FBTyxDQUFDLG1CQUFELENBQTNCOztBQUNBLE1BQU07QUFBRU0sRUFBQUEsZ0JBQUY7QUFBb0JDLEVBQUFBO0FBQXBCLElBQXNDUCxPQUFPLENBQUMsY0FBRCxDQUFuRDs7QUFDQSxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxhQUFELENBQXJCOztBQUtBLE1BQU1TLGdCQUFOLFNBQStCSixXQUEvQixDQUEyQztBQUN2QyxhQUFXSyxnQkFBWCxHQUE4QjtBQUMxQixRQUFJQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxRQUFWLENBQW1CRixNQUFoQztBQUNBLFdBQU9BLE1BQU0sSUFBSSxLQUFLQyxJQUFMLENBQVVFLE1BQVYsQ0FBaUJILE1BQU0sQ0FBQ0ksS0FBeEIsRUFBK0JDLGVBQWhEO0FBQ0g7O0FBTUQsU0FBT0MscUJBQVAsQ0FBNkJDLElBQTdCLEVBQW1DO0FBQy9CLFFBQUlBLElBQUksS0FBSyxLQUFiLEVBQW9CO0FBQ2hCLGFBQU8sS0FBS0MsRUFBTCxDQUFRQyxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixP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ekosZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBzZXRWYWx1ZUJ5UGF0aCwgZWFjaEFzeW5jXyB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcbmNvbnN0IHsgT29sb25nVXNhZ2VFcnJvciwgQnVzaW5lc3NFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGVzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYW1lIC0gTmFtZSBvZiB0aGUgc3ltYm9sIHRva2VuIFxuICAgICAqL1xuICAgIHN0YXRpYyBfdHJhbnNsYXRlU3ltYm9sVG9rZW4obmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRiLmNvbm5lY3Rvci5yYXcoJ05PVygpJyk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0Jyk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9zZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAxIDogMDtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHN0YXRpYyBfc2VyaWFsaXplQnlUeXBlKHZhbHVlLCBpbmZvKSB7XG4gICAgICAgIGlmIChpbmZvLnR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gMSA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby50eXBlID09PSAnZGF0ZXRpbWUnICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8udHlwZSA9PT0gJ2FycmF5JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGluZm8uY3N2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFR5cGVzLkFSUkFZLnRvQ3N2KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFR5cGVzLkFSUkFZLnNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5jcmVhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKCdUaGUgbmV3IGVudGl0eSBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4gRGV0YWlsOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX0RVUF9FTlRSWScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihlcnJvci5tZXNzYWdlICsgYCB3aGlsZSBjcmVhdGluZyBhIG5ldyBcIiR7dGhpcy5tZXRhLm5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHVwZGF0ZU9uZV8oLi4uYXJncykge1xuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnVwZGF0ZU9uZV8oLi4uYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcblxuICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX05PX1JFRkVSRU5DRURfUk9XXzInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoJ1RoZSBuZXcgZW50aXR5IGlzIHJlZmVyZW5jaW5nIHRvIGFuIHVuZXhpc3RpbmcgZW50aXR5LicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvckNvZGUgPT09ICdFUl9EVVBfRU5UUlknKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFBvc3QgY3JlYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5jcmVhdGVPcHRpb25zXSAtIENyZWF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtjcmVhdGVPcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IGNyZWF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlckNyZWF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBdXRvSW5jcmVtZW50KSB7XG4gICAgICAgICAgICBsZXQgeyBpbnNlcnRJZCB9ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdFt0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkLmZpZWxkXSA9IGluc2VydElkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQuY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSB7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gdGhpcy5nZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbShjb250ZXh0LmxhdGVzdCk7XG4gICAgICAgICAgICBsZXQgcmV0cmlldmVPcHRpb25zID0gXy5pc1BsYWluT2JqZWN0KGNvbnRleHQuY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSA/IGNvbnRleHQuY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkIDoge307XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAuLi5yZXRyaWV2ZU9wdGlvbnMsICRxdWVyeTogY29uZGl0aW9uIH0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCB1cGRhdGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFt1cGRhdGVPcHRpb25zXSAtIFVwZGF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFt1cGRhdGVPcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IHVwZGF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlclVwZGF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC51cGRhdGVPcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWQpIHsgICAgXG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0geyAkcXVlcnk6IGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcXVlcnkgfTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJGJ5UGFzc0Vuc3VyZVVuaXF1ZSkge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvbi4kYnlQYXNzRW5zdXJlVW5pcXVlID0gY29udGV4dC51cGRhdGVPcHRpb25zLiRieVBhc3NFbnN1cmVVbmlxdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXRyaWV2ZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkpIHtcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU9wdGlvbnMgPSBjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC51cGRhdGVPcHRpb25zLiRyZWxhdGlvbnNoaXBzKSB7XG4gICAgICAgICAgICAgICAgcmV0cmlldmVPcHRpb25zLiRyZWxhdGlvbnNoaXBzID0gY29udGV4dC51cGRhdGVPcHRpb25zLiRyZWxhdGlvbnNoaXBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAuLi5yZXRyaWV2ZU9wdGlvbnMsIC4uLmNvbmRpdGlvbiB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbdXBkYXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbdXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSB1cGRhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJVcGRhdGVNYW55Xyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkgeyAgICBcbiAgICAgICAgICAgIGxldCByZXRyaWV2ZU9wdGlvbnMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkpIHtcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU9wdGlvbnMgPSBjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC51cGRhdGVPcHRpb25zLiRyZWxhdGlvbnNoaXBzKSB7XG4gICAgICAgICAgICAgICAgcmV0cmlldmVPcHRpb25zLiRyZWxhdGlvbnNoaXBzID0gY29udGV4dC51cGRhdGVPcHRpb25zLiRyZWxhdGlvbnNoaXBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZEFsbF8oeyAuLi5yZXRyaWV2ZU9wdGlvbnMsICRxdWVyeTogY29udGV4dC51cGRhdGVPcHRpb25zLiRxdWVyeSB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgZGVsZXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyRGVsZXRlXyhjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgZGVsZXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyRGVsZXRlTWFueV8oY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWZ0ZXJGaW5kQWxsXyhjb250ZXh0LCByZWNvcmRzKSB7XG4gICAgICAgIGlmIChjb250ZXh0LmZpbmRPcHRpb25zLiR0b0RpY3Rpb25hcnkpIHJldHVybiByZWNvcmRzLnJlZHVjZSgodGFibGUsIHYpID0+IHtcbiAgICAgICAgICAgIHRhYmxlW3ZbdGhpcy5tZXRhLmtleUZpZWxkXV0gPSB2O1xuICAgICAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVmb3JlIGRlbGV0aW5nIGFuIGVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmRlbGV0ZU9wdGlvbnNdIC0gRGVsZXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZF0gLSBSZXRyaWV2ZSB0aGUgcmVjZW50bHkgZGVsZXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGJlZm9yZURlbGV0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5kZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghY29udGV4dC5jb25uT3B0aW9ucyB8fCAhY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucyB8fCAoY29udGV4dC5jb25uT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbiA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmJlZ2luVHJhbnNhY3Rpb25fKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXRyaWV2ZU9wdGlvbnMgPSBfLmlzUGxhaW5PYmplY3QoY29udGV4dC5kZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQpID8gXG4gICAgICAgICAgICAgICAgY29udGV4dC5kZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQgOlxuICAgICAgICAgICAgICAgIHt9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kT25lXyh7IC4uLnJldHJpZXZlT3B0aW9ucywgJHF1ZXJ5OiBjb250ZXh0LmRlbGV0ZU9wdGlvbnMuJHF1ZXJ5IH0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBmaW5kT3B0aW9ucyBcbiAgICAgKi9cbiAgICBzdGF0aWMgX3ByZXBhcmVBc3NvY2lhdGlvbnMoZmluZE9wdGlvbnMpIHsgXG4gICAgICAgIGxldCBhc3NvY2lhdGlvbnMgPSBfLnVuaXEoZmluZE9wdGlvbnMuJGFzc29jaWF0aW9uKS5zb3J0KCk7ICAgICAgICBcbiAgICAgICAgbGV0IGFzc29jVGFibGUgPSB7fSwgY291bnRlciA9IDAsIGNhY2hlID0ge307ICAgICAgIFxuXG4gICAgICAgIGFzc29jaWF0aW9ucy5mb3JFYWNoKGFzc29jID0+IHtcbiAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoYXNzb2MpKSB7XG4gICAgICAgICAgICAgICAgYXNzb2MgPSB0aGlzLl90cmFuc2xhdGVTY2hlbWFOYW1lVG9EYihhc3NvYyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgYWxpYXMgPSBhc3NvYy5hbGlhcztcbiAgICAgICAgICAgICAgICBpZiAoIWFzc29jLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzID0gJzpqb2luJyArICsrY291bnRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhc3NvY1RhYmxlW2FsaWFzXSA9IHsgXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgam9pblR5cGU6IGFzc29jLnR5cGUsIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IGFzc29jLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBhc3NvYy5rZXksXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzLFxuICAgICAgICAgICAgICAgICAgICBvbjogYXNzb2Mub24sXG4gICAgICAgICAgICAgICAgICAgIC4uLihhc3NvYy5kYXRhc2V0ID8gdGhpcy5kYi5jb25uZWN0b3IuYnVpbGRRdWVyeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvYy5lbnRpdHksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVRdWVyaWVzKHsgLi4uYXNzb2MuZGF0YXNldCwgJHZhcmlhYmxlczogZmluZE9wdGlvbnMuJHZhcmlhYmxlcyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IHt9KSAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZEFzc29jSW50b1RhYmxlKGFzc29jVGFibGUsIGNhY2hlLCBhc3NvYyk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGFzc29jVGFibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBhc3NvY1RhYmxlIC0gSGllcmFyY2h5IHdpdGggc3ViQXNzb2NzXG4gICAgICogQHBhcmFtIHsqfSBjYWNoZSAtIERvdHRlZCBwYXRoIGFzIGtleVxuICAgICAqIEBwYXJhbSB7Kn0gYXNzb2MgLSBEb3R0ZWQgcGF0aFxuICAgICAqL1xuICAgIHN0YXRpYyBfbG9hZEFzc29jSW50b1RhYmxlKGFzc29jVGFibGUsIGNhY2hlLCBhc3NvYykge1xuICAgICAgICBpZiAoY2FjaGVbYXNzb2NdKSByZXR1cm4gY2FjaGVbYXNzb2NdO1xuXG4gICAgICAgIGxldCBsYXN0UG9zID0gYXNzb2MubGFzdEluZGV4T2YoJy4nKTsgICAgICAgIFxuICAgICAgICBsZXQgcmVzdWx0OyAgXG5cbiAgICAgICAgaWYgKGxhc3RQb3MgPT09IC0xKSB7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGFzc29jSW5mbyA9IHsgLi4udGhpcy5tZXRhLmFzc29jaWF0aW9uc1thc3NvY10gfTsgICBcbiAgICAgICAgICAgIGlmICghYXNzb2NJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoYEVudGl0eSBcIiR7dGhpcy5tZXRhLm5hbWV9XCIgZG9lcyBub3QgaGF2ZSB0aGUgYXNzb2NpYXRpb24gXCIke2Fzc29jfVwiLmApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhY2hlW2Fzc29jXSA9IGFzc29jVGFibGVbYXNzb2NdID0geyAuLi50aGlzLl90cmFuc2xhdGVTY2hlbWFOYW1lVG9EYihhc3NvY0luZm8pIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYmFzZSA9IGFzc29jLnN1YnN0cigwLCBsYXN0UG9zKTtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gYXNzb2Muc3Vic3RyKGxhc3RQb3MrMSk7ICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgYmFzZU5vZGUgPSBjYWNoZVtiYXNlXTtcbiAgICAgICAgICAgIGlmICghYmFzZU5vZGUpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYmFzZU5vZGUgPSB0aGlzLl9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGJhc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgZW50aXR5ID0gdGhpcy5kYi5tb2RlbChiYXNlTm9kZS5lbnRpdHkpO1xuICAgICAgICAgICAgbGV0IGFzc29jSW5mbyA9eyAuLi5lbnRpdHkubWV0YS5hc3NvY2lhdGlvbnNbbGFzdF0gfTtcbiAgICAgICAgICAgIGlmICghYXNzb2NJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoYEVudGl0eSBcIiR7ZW50aXR5Lm1ldGEubmFtZX1cIiBkb2VzIG5vdCBoYXZlIHRoZSBhc3NvY2lhdGlvbiBcIiR7YXNzb2N9XCIuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IHsgLi4udGhpcy5fdHJhbnNsYXRlU2NoZW1hTmFtZVRvRGIoYXNzb2NJbmZvKSB9O1xuXG4gICAgICAgICAgICBpZiAoIWJhc2VOb2RlLnN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgIGJhc2VOb2RlLnN1YkFzc29jcyA9IHt9O1xuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgY2FjaGVbYXNzb2NdID0gYmFzZU5vZGUuc3ViQXNzb2NzW2xhc3RdID0gcmVzdWx0O1xuICAgICAgICB9ICAgICAgXG5cbiAgICAgICAgaWYgKHJlc3VsdC5hc3NvYykge1xuICAgICAgICAgICAgdGhpcy5fbG9hZEFzc29jSW50b1RhYmxlKGFzc29jVGFibGUsIGNhY2hlLCBhc3NvYyArICcuJyArIHJlc3VsdC5hc3NvYyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHN0YXRpYyBfdHJhbnNsYXRlU2NoZW1hTmFtZVRvRGIoYXNzb2MpIHtcbiAgICAgICAgaWYgKGFzc29jLmVudGl0eS5pbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICAgICAgICBsZXQgWyBzY2hlbWFOYW1lLCBlbnRpdHlOYW1lIF0gPSBhc3NvYy5lbnRpdHkuc3BsaXQoJy4nLCAyKTtcblxuICAgICAgICAgICAgbGV0IGFwcCA9IHRoaXMuZGIuYXBwO1xuICAgICAgICAgICAgaWYgKCFhcHApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT29sb25nVXNhZ2VFcnJvcignQ3Jvc3MgZGIgYXNzb2NpYXRpb24gcmVxdWlyZXMgdGhlIGRiIG9iamVjdCBoYXZlIGFjY2VzcyB0byBvdGhlciBkYiBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZWZEYiA9IGFwcC5kYihzY2hlbWFOYW1lKTtcbiAgICAgICAgICAgIGlmICghcmVmRGIpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9vbG9uZ1VzYWdlRXJyb3IoYFRoZSByZWZlcmVuY2VkIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIiBkb2VzIG5vdCBoYXZlIGRiIG1vZGVsIGluIHRoZSBzYW1lIGFwcGxpY2F0aW9uLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NvYy5lbnRpdHkgPSByZWZEYi5jb25uZWN0b3IuZGF0YWJhc2UgKyAnLicgKyBlbnRpdHlOYW1lO1xuXG4gICAgICAgICAgICBpZiAoIWFzc29jLmtleSkge1xuICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IHJlZkRiLm1vZGVsKGVudGl0eU5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9vbG9uZ1VzYWdlRXJyb3IoYEZhaWxlZCBsb2FkIHRoZSBlbnRpdHkgbW9kZWwgXCIke3NjaGVtYU5hbWV9LiR7ZW50aXR5TmFtZX1cIi5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhc3NvYy5rZXkgPSBtb2RlbC5tZXRhLmtleUZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFhc3NvYy5rZXkpIHtcbiAgICAgICAgICAgIGFzc29jLmtleSA9IHRoaXMuZGIubW9kZWwoYXNzb2MuZW50aXR5KS5tZXRhLmtleUZpZWxkOyAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc3NvYztcbiAgICB9XG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoW3Jvd3MsIGNvbHVtbnMsIGFsaWFzTWFwXSwgaGllcmFyY2h5KSB7XG4gICAgICAgIGxldCBtYWluSW5kZXggPSB7fTsgICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGFzc29jaWF0aW9ucykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKGFzc29jaWF0aW9ucywgKHsgc3FsLCBrZXksIGxpc3QsIHN1YkFzc29jcyB9LCBhbmNob3IpID0+IHsgXG4gICAgICAgICAgICAgICAgaWYgKHNxbCkgcmV0dXJuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgbGV0IG9iaktleSA9ICc6JyArIGFuY2hvcjsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1Yk9iaiA9IHJvd09iamVjdFtvYmpLZXldXG4gICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ZXMgPSBleGlzdGluZ1Jvdy5zdWJJbmRleGVzW29iaktleV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gam9pbmVkIGFuIGVtcHR5IHJlY29yZFxuICAgICAgICAgICAgICAgIGxldCByb3dLZXkgPSBzdWJPYmpba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc05pbChyb3dLZXkpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBsZXQgZXhpc3RpbmdTdWJSb3cgPSBzdWJJbmRleGVzICYmIHN1YkluZGV4ZXNbcm93S2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTdWJSb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VSZWNvcmQoZXhpc3RpbmdTdWJSb3csIHN1Yk9iaiwgc3ViQXNzb2NzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IGxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1Jvdy5yb3dPYmplY3Rbb2JqS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdSb3cucm93T2JqZWN0W29iaktleV0ucHVzaChzdWJPYmopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdSb3cucm93T2JqZWN0W29iaktleV0gPSBbIHN1Yk9iaiBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXggPSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0OiBzdWJPYmogICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViQXNzb2NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJJbmRleC5zdWJJbmRleGVzID0gYnVpbGRTdWJJbmRleGVzKHN1Yk9iaiwgc3ViQXNzb2NzKVxuICAgICAgICAgICAgICAgICAgICB9ICAgIFxuXG4gICAgICAgICAgICAgICAgICAgIHN1YkluZGV4ZXNbcm93S2V5XSA9IHN1YkluZGV4OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBhc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCBpbmRleGVzID0ge307XG5cbiAgICAgICAgICAgIF8uZWFjaChhc3NvY2lhdGlvbnMsICh7IHNxbCwga2V5LCBsaXN0LCBzdWJBc3NvY3MgfSwgYW5jaG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNxbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXNzZXJ0OiBrZXk7XG5cbiAgICAgICAgICAgICAgICBsZXQgb2JqS2V5ID0gJzonICsgYW5jaG9yO1xuICAgICAgICAgICAgICAgIGxldCBzdWJPYmplY3QgPSByb3dPYmplY3Rbb2JqS2V5XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ID0geyBcbiAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0OiBzdWJPYmplY3QgXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7ICAgXG4gICAgICAgICAgICAgICAgICAgIC8vbWFueSB0byAqICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwoc3ViT2JqZWN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N1Yk9iamVjdCBub3QgZXhpc3QsIGp1c3QgZmlsbGVkIHdpdGggbnVsbCBieSBqb2luaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Rbb2JqS2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdFtvYmpLZXldID0gWyBzdWJPYmplY3QgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ViT2JqZWN0ICYmIF8uaXNOaWwoc3ViT2JqZWN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yk9iamVjdCA9IHJvd09iamVjdFtvYmpLZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3ViT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkluZGV4LnN1YkluZGV4ZXMgPSBidWlsZFN1YkluZGV4ZXMoc3ViT2JqZWN0LCBzdWJBc3NvY3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1tvYmpLZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3N1Yk9iamVjdFtrZXldXTogc3ViSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTsgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhcnJheU9mT2JqcyA9IFtdO1xuXG4gICAgICAgIC8vcHJvY2VzcyBlYWNoIHJvd1xuICAgICAgICByb3dzLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IHJvd09iamVjdCA9IHt9OyAvLyBoYXNoLXN0eWxlIGRhdGEgcm93XG4gICAgICAgICAgICBsZXQgdGFibGVDYWNoZSA9IHt9OyAvLyBmcm9tIGFsaWFzIHRvIGNoaWxkIHByb3Agb2Ygcm93T2JqZWN0XG5cbiAgICAgICAgICAgIHJvdy5yZWR1Y2UoKHJlc3VsdCwgdmFsdWUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY29sID0gY29sdW1uc1tpXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoY29sLnRhYmxlID09PSAnQScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2NvbC5uYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgYnVja2V0ID0gdGFibGVDYWNoZVtjb2wudGFibGVdOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxyZWFkeSBuZXN0ZWQgaW5zaWRlIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0W2NvbC5uYW1lXSA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZVBhdGggPSBhbGlhc01hcFtjb2wudGFibGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN1Yk9iamVjdCA9IHsgW2NvbC5uYW1lXTogdmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUNhY2hlW2NvbC50YWJsZV0gPSBzdWJPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWVCeVBhdGgocmVzdWx0LCBub2RlUGF0aCwgc3ViT2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LCByb3dPYmplY3QpOyAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCByb3dLZXkgPSByb3dPYmplY3RbdGhpcy5tZXRhLmtleUZpZWxkXTtcbiAgICAgICAgICAgIGxldCBleGlzdGluZ1JvdyA9IG1haW5JbmRleFtyb3dLZXldO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nUm93KSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VSZWNvcmQoZXhpc3RpbmdSb3csIHJvd09iamVjdCwgaGllcmFyY2h5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlPZk9ianMucHVzaChyb3dPYmplY3QpO1xuICAgICAgICAgICAgICAgIG1haW5JbmRleFtyb3dLZXldID0geyBcbiAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0LCBcbiAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXhlczogYnVpbGRTdWJJbmRleGVzKHJvd09iamVjdCwgaGllcmFyY2h5KVxuICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYXJyYXlPZk9ianM7XG4gICAgfVxuXG4gICAgc3RhdGljIF9leHRyYWN0QXNzb2NpYXRpb25zKGRhdGEpIHtcbiAgICAgICAgbGV0IHJhdyA9IHt9LCBhc3NvY3MgPSB7fTtcbiAgICAgICAgXG4gICAgICAgIF8uZm9yT3duKGRhdGEsICh2LCBrKSA9PiB7XG4gICAgICAgICAgICBpZiAoay5zdGFydHNXaXRoKCc6JykpIHtcbiAgICAgICAgICAgICAgICBhc3NvY3Nbay5zdWJzdHIoMSldID0gdjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmF3W2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gWyByYXcsIGFzc29jcyBdOyAgICAgICAgXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIF9jcmVhdGVBc3NvY3NfKGNvbnRleHQsIGFzc29jcykge1xuICAgICAgICBsZXQgbWV0YSA9IHRoaXMubWV0YS5hc3NvY2lhdGlvbnM7XG4gICAgICAgIGxldCBrZXlWYWx1ZSA9IGNvbnRleHQubGF0ZXN0W3RoaXMubWV0YS5rZXlGaWVsZF07XG5cbiAgICAgICAgaWYgKF8uaXNOaWwoa2V5VmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT29sb25nVXNhZ2VFcnJvcignTWlzc2luZyByZXF1aXJlZCBwcmltYXJ5IGtleSBmaWVsZCB2YWx1ZS4gRW50aXR5OiAnICsgdGhpcy5tZXRhLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oYXNzb2NzLCBhc3luYyAoZGF0YSwgYW5jaG9yKSA9PiB7XG4gICAgICAgICAgICBsZXQgYXNzb2NNZXRhID0gbWV0YVthbmNob3JdO1xuICAgICAgICAgICAgaWYgKCFhc3NvY01ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihgVW5rbm93biBhc3NvY2lhdGlvbiBcIiR7YW5jaG9yfVwiIG9mIGVudGl0eSBcIiR7dGhpcy5tZXRhLm5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGxldCBhc3NvY01vZGVsID0gdGhpcy5kYi5tb2RlbChhc3NvY01ldGEuZW50aXR5KTtcblxuICAgICAgICAgICAgaWYgKGFzc29jTWV0YS5saXN0KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IF8uY2FzdEFycmF5KGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oZGF0YSwgaXRlbSA9PiBhc3NvY01vZGVsLmNyZWF0ZV8oeyAuLi5pdGVtLCAuLi4oYXNzb2NNZXRhLmZpZWxkID8geyBbYXNzb2NNZXRhLmZpZWxkXToga2V5VmFsdWUgfSA6IHt9KSB9LCBjb250ZXh0LmNyZWF0ZU9wdGlvbnMsIGNvbnRleHQuY29ubk9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFzc29jTW9kZWwuY3JlYXRlXyh7IC4uLmRhdGEsIC4uLihhc3NvY01ldGEuZmllbGQgPyB7IFthc3NvY01ldGEuZmllbGRdOiBrZXlWYWx1ZSB9IDoge30pIH0sIGNvbnRleHQuY3JlYXRlT3B0aW9ucywgY29udGV4dC5jb25uT3B0aW9ucyk7ICBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE15U1FMRW50aXR5TW9kZWw7Il19