"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  getValueByPath,
  setValueByPath,
  eachAsync_,
  fs
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  OolongUsageError,
  BusinessError
} = require('../../Errors');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static _translateSymbolToken(name) {
    if (name === 'now') {
      return this.db.connector.raw('NOW()');
    }

    throw new Error('not support');
  }

  static _serialize(value) {
    if (typeof value === 'boolean') return value ? 1 : 0;

    if (value instanceof DateTime) {
      return value.toISO({
        includeOffset: false
      });
    }

    return value;
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity. Detail: ' + error.message);
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message + ` while creating a new "${this.meta.name}".`);
      }

      throw error;
    }
  }

  static async updateOne_(...args) {
    try {
      return await super.updateOne_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $query: condition
      }, context.connOptions);
    }

    return true;
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      let condition = {
        $query: context.updateOptions.$query
      };

      if (context.updateOptions.$byPassEnsureUnique) {
        condition.$byPassEnsureUnique = context.updateOptions.$byPassEnsureUnique;
      }

      if (context.updateOptions.$relationships) {
        condition.$relationships = context.updateOptions.$relationships;
      }

      context.latest = await this.findOne_(condition, context.connOptions);
    }

    return true;
  }

  static afterFindAll_(context, records) {
    if (context.findOptions.$toDictionary) return records.reduce((table, v) => {
      table[v[this.meta.keyField]] = v;
      return table;
    }, {});
    return records;
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $query: context.deleteOptions.$query
      }, context.connOptions);
    }
  }

  static _prepareAssociations(findOptions) {
    let associations = _.uniq(findOptions.$association).sort();

    let assocTable = {},
        counter = 0,
        cache = {};
    associations.forEach(assoc => {
      if (_.isPlainObject(assoc)) {
        let alias = assoc.alias;

        if (!assoc.alias) {
          alias = ':join' + ++counter;
        }

        assocTable[alias] = {
          entity: assoc.entity,
          joinType: assoc.type,
          output: assoc.output,
          alias,
          on: assoc.on,
          ...(assoc.dataset ? this.db.connector.buildQuery(assoc.entity, this._prepareQueries({ ...assoc.dataset,
            $variables: findOptions.$variables
          })) : {})
        };
      } else {
        this._loadAssocIntoTable(assocTable, cache, assoc);
      }
    });
    return assocTable;
  }

  static _loadAssocIntoTable(assocTable, cache, assoc) {
    if (cache[assoc]) return cache[assoc];
    let lastPos = assoc.lastIndexOf('.');
    let result;

    if (lastPos === -1) {
      result = cache[assoc] = assocTable[assoc] = { ...this.meta.associations[assoc]
      };
    } else {
      let base = assoc.substr(0, lastPos);
      let last = assoc.substr(lastPos + 1);
      let baseNode = cache[base];

      if (!baseNode) {
        console.log(base, last);
        baseNode = this._loadAssocIntoTable(assocTable, cache, base);
      }

      let entity = this.db.model(baseNode.entity);
      result = { ...entity.meta.associations[last]
      };

      if (!baseNode.subAssocs) {
        baseNode.subAssocs = {};
      }

      cache[assoc] = baseNode.subAssocs[last] = result;
    }

    if (result.assoc) {
      this._loadAssocIntoTable(assocTable, cache, assoc + '.' + result.assoc);
    }

    return result;
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) return;
        let objKey = ':' + anchor;
        let subObj = rowObject[objKey];
        let subIndexes = existingRow.subIndexes[objKey];
        let rowKey = subObj[key];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssocs) {
            mergeRecord(existingSubRow, subObj, subAssocs);
          }
        } else {
          if (!list) {
            throw new Error("Assertion failed: list");
          }

          if (existingRow.rowObject[objKey]) {
            existingRow.rowObject[objKey].push(subObj);
          } else {
            existingRow.rowObject[objKey] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssocs);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      let indexes = {};

      _.each(associations, ({
        sql,
        key,
        list,
        subAssocs
      }, anchor) => {
        if (sql) {
          return;
        }

        let objKey = ':' + anchor;
        let subObject = rowObject[objKey];
        let subIndex = {
          rowObject: subObject
        };

        if (list) {
          if (_.isNil(subObject[key])) {
            rowObject[objKey] = [];
            subObject = null;
          } else {
            rowObject[objKey] = [subObject];
          }
        } else if (subObject && _.isNil(subObject[key])) {
          subObject = rowObject[objKey] = null;
        }

        if (subObject) {
          if (subAssocs) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssocs);
          }

          indexes[objKey] = {
            [subObject[key]]: subIndex
          };
        }
      });

      return indexes;
    }

    let arrayOfObjs = [];
    rows.forEach((row, i) => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];

            if (nodePath) {
              let subObject = {
                [col.name]: value
              };
              tableCache[col.table] = subObject;
              setValueByPath(result, nodePath, subObject);
            }
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

  static _extractAssociations(data) {
    let raw = {},
        assocs = {};

    _.forOwn(data, (v, k) => {
      if (k.startsWith(':')) {
        assocs[k.substr(1)] = v;
      } else {
        raw[k] = v;
      }
    });

    return [raw, assocs];
  }

  static async _createAssocs_(context, assocs) {
    let meta = this.meta.associations;
    let keyValue = context.latest[this.meta.keyField];

    if (_.isNil(keyValue)) {
      throw new OolongUsageError('Missing required primary key field value. Entity: ' + this.meta.name);
    }

    return eachAsync_(assocs, async (data, anchor) => {
      let assocMeta = meta[anchor];

      if (!assocMeta) {
        throw new BusinessError(`Unknown association "${anchor}" of entity "${this.meta.name}".`);
      }

      let assocModel = this.db.model(assocMeta.entity);

      if (assocMeta.list) {
        data = _.castArray(data);
        return eachAsync_(data, item => assocModel.create_({ ...item,
          ...(assocMeta.field ? {
            [assocMeta.field]: keyValue
          } : {})
        }, context.createOptions, context.connOptions));
      }

      return assocModel.create_({ ...data,
        ...(assocMeta.field ? {
          [assocMeta.field]: keyValue
        } : {})
      }, context.createOptions, context.connOptions);
    });
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZ2V0VmFsdWVCeVBhdGgiLCJzZXRWYWx1ZUJ5UGF0aCIsImVhY2hBc3luY18iLCJmcyIsIkRhdGVUaW1lIiwiRW50aXR5TW9kZWwiLCJPb2xvbmdVc2FnZUVycm9yIiwiQnVzaW5lc3NFcnJvciIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJfdHJhbnNsYXRlU3ltYm9sVG9rZW4iLCJuYW1lIiwiZGIiLCJjb25uZWN0b3IiLCJyYXciLCJFcnJvciIsIl9zZXJpYWxpemUiLCJ2YWx1ZSIsInRvSVNPIiwiaW5jbHVkZU9mZnNldCIsImNyZWF0ZV8iLCJhcmdzIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJjb2RlIiwibWVzc2FnZSIsInVwZGF0ZU9uZV8iLCJhZnRlckNyZWF0ZV8iLCJjb250ZXh0IiwiaW5zZXJ0SWQiLCJyZXN1bHQiLCJsYXRlc3QiLCJjcmVhdGVPcHRpb25zIiwiJHJldHJpZXZlQ3JlYXRlZCIsImNvbmRpdGlvbiIsImdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tIiwiZmluZE9uZV8iLCIkcXVlcnkiLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiJGJ5UGFzc0Vuc3VyZVVuaXF1ZSIsIiRyZWxhdGlvbnNoaXBzIiwiYWZ0ZXJGaW5kQWxsXyIsInJlY29yZHMiLCJmaW5kT3B0aW9ucyIsIiR0b0RpY3Rpb25hcnkiLCJyZWR1Y2UiLCJ0YWJsZSIsInYiLCJrZXlGaWVsZCIsImJlZm9yZURlbGV0ZV8iLCJkZWxldGVPcHRpb25zIiwiJHJldHJpZXZlRGVsZXRlZCIsImNvbm5lY3Rpb24iLCJiZWdpblRyYW5zYWN0aW9uXyIsImV4aXN0aW5nIiwiX3ByZXBhcmVBc3NvY2lhdGlvbnMiLCJhc3NvY2lhdGlvbnMiLCJ1bmlxIiwiJGFzc29jaWF0aW9uIiwic29ydCIsImFzc29jVGFibGUiLCJjb3VudGVyIiwiY2FjaGUiLCJmb3JFYWNoIiwiYXNzb2MiLCJpc1BsYWluT2JqZWN0IiwiYWxpYXMiLCJlbnRpdHkiLCJqb2luVHlwZSIsInR5cGUiLCJvdXRwdXQiLCJvbiIsImRhdGFzZXQiLCJidWlsZFF1ZXJ5IiwiX3ByZXBhcmVRdWVyaWVzIiwiJHZhcmlhYmxlcyIsIl9sb2FkQXNzb2NJbnRvVGFibGUiLCJsYXN0UG9zIiwibGFzdEluZGV4T2YiLCJiYXNlIiwic3Vic3RyIiwibGFzdCIsImJhc2VOb2RlIiwiY29uc29sZSIsImxvZyIsIm1vZGVsIiwic3ViQXNzb2NzIiwiX21hcFJlY29yZHNUb09iamVjdHMiLCJyb3dzIiwiY29sdW1ucyIsImFsaWFzTWFwIiwiaGllcmFyY2h5IiwibWFpbkluZGV4IiwibWVyZ2VSZWNvcmQiLCJleGlzdGluZ1JvdyIsInJvd09iamVjdCIsImVhY2giLCJzcWwiLCJrZXkiLCJsaXN0IiwiYW5jaG9yIiwib2JqS2V5Iiwic3ViT2JqIiwic3ViSW5kZXhlcyIsInJvd0tleSIsImlzTmlsIiwiZXhpc3RpbmdTdWJSb3ciLCJwdXNoIiwic3ViSW5kZXgiLCJidWlsZFN1YkluZGV4ZXMiLCJpbmRleGVzIiwic3ViT2JqZWN0IiwiYXJyYXlPZk9ianMiLCJyb3ciLCJpIiwidGFibGVDYWNoZSIsImNvbCIsImJ1Y2tldCIsIm5vZGVQYXRoIiwiX2V4dHJhY3RBc3NvY2lhdGlvbnMiLCJkYXRhIiwiYXNzb2NzIiwiZm9yT3duIiwiayIsInN0YXJ0c1dpdGgiLCJfY3JlYXRlQXNzb2NzXyIsImtleVZhbHVlIiwiYXNzb2NNZXRhIiwiYXNzb2NNb2RlbCIsImNhc3RBcnJheSIsIml0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVB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R0FBb0QsRUFBeEQ7QUFBWCxPQUFuQixFQUE2RnJHLE9BQU8sQ0FBQ0ksYUFBckcsRUFBb0hKLE9BQU8sQ0FBQ1UsV0FBNUgsQ0FBUDtBQUNILEtBZmdCLENBQWpCO0FBZ0JIOztBQXJYc0M7O0FBd1gzQ2dHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJJLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgXywgZ2V0VmFsdWVCeVBhdGgsIHNldFZhbHVlQnlQYXRoLCBlYWNoQXN5bmNfLCBmcyB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcbmNvbnN0IHsgT29sb25nVXNhZ2VFcnJvciwgQnVzaW5lc3NFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYW1lIC0gTmFtZSBvZiB0aGUgc3ltYm9sIHRva2VuIFxuICAgICAqL1xuICAgIHN0YXRpYyBfdHJhbnNsYXRlU3ltYm9sVG9rZW4obmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRiLmNvbm5lY3Rvci5yYXcoJ05PVygpJyk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0Jyk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9zZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAxIDogMDtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5jcmVhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKCdUaGUgbmV3IGVudGl0eSBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4gRGV0YWlsOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX0RVUF9FTlRSWScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihlcnJvci5tZXNzYWdlICsgYCB3aGlsZSBjcmVhdGluZyBhIG5ldyBcIiR7dGhpcy5tZXRhLm5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHVwZGF0ZU9uZV8oLi4uYXJncykge1xuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnVwZGF0ZU9uZV8oLi4uYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcblxuICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX05PX1JFRkVSRU5DRURfUk9XXzInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoJ1RoZSBuZXcgZW50aXR5IGlzIHJlZmVyZW5jaW5nIHRvIGFuIHVuZXhpc3RpbmcgZW50aXR5LicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvckNvZGUgPT09ICdFUl9EVVBfRU5UUlknKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFBvc3QgY3JlYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5jcmVhdGVPcHRpb25zXSAtIENyZWF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtjcmVhdGVPcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IGNyZWF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlckNyZWF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBdXRvSW5jcmVtZW50KSB7XG4gICAgICAgICAgICBsZXQgeyBpbnNlcnRJZCB9ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdFt0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkLmZpZWxkXSA9IGluc2VydElkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQuY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSB7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gdGhpcy5nZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbShjb250ZXh0LmxhdGVzdCk7XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkcXVlcnk6IGNvbmRpdGlvbiB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbdXBkYXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbdXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSB1cGRhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJVcGRhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSB7ICAgIFxuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IHsgJHF1ZXJ5OiBjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHF1ZXJ5IH07XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJGJ5UGFzc0Vuc3VyZVVuaXF1ZSkge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvbi4kYnlQYXNzRW5zdXJlVW5pcXVlID0gY29udGV4dC51cGRhdGVPcHRpb25zLiRieVBhc3NFbnN1cmVVbmlxdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJlbGF0aW9uc2hpcHMpIHtcbiAgICAgICAgICAgICAgICBjb25kaXRpb24uJHJlbGF0aW9uc2hpcHMgPSBjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJlbGF0aW9uc2hpcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0ID0gYXdhaXQgdGhpcy5maW5kT25lXyhjb25kaXRpb24sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGFmdGVyRmluZEFsbF8oY29udGV4dCwgcmVjb3Jkcykge1xuICAgICAgICBpZiAoY29udGV4dC5maW5kT3B0aW9ucy4kdG9EaWN0aW9uYXJ5KSByZXR1cm4gcmVjb3Jkcy5yZWR1Y2UoKHRhYmxlLCB2KSA9PiB7XG4gICAgICAgICAgICB0YWJsZVt2W3RoaXMubWV0YS5rZXlGaWVsZF1dID0gdjtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZTtcbiAgICAgICAgfSwge30pO1xuXG4gICAgICAgIHJldHVybiByZWNvcmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJlZm9yZSBkZWxldGluZyBhbiBlbnRpdHkuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5kZWxldGVPcHRpb25zXSAtIERlbGV0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWRdIC0gUmV0cmlldmUgdGhlIHJlY2VudGx5IGRlbGV0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBiZWZvcmVEZWxldGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQuY29ubk9wdGlvbnMgfHwgIWNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMgfHwgKGNvbnRleHQuY29ubk9wdGlvbnMgPSB7fSk7XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24gPSBhd2FpdCB0aGlzLmRiLmNvbm5lY3Rvci5iZWdpblRyYW5zYWN0aW9uXygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogY29udGV4dC5kZWxldGVPcHRpb25zLiRxdWVyeSB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7Kn0gZmluZE9wdGlvbnMgXG4gICAgICovXG4gICAgc3RhdGljIF9wcmVwYXJlQXNzb2NpYXRpb25zKGZpbmRPcHRpb25zKSB7IFxuICAgICAgICBsZXQgYXNzb2NpYXRpb25zID0gXy51bmlxKGZpbmRPcHRpb25zLiRhc3NvY2lhdGlvbikuc29ydCgpOyAgICAgICAgXG4gICAgICAgIGxldCBhc3NvY1RhYmxlID0ge30sIGNvdW50ZXIgPSAwLCBjYWNoZSA9IHt9OyAgICAgICBcblxuICAgICAgICBhc3NvY2lhdGlvbnMuZm9yRWFjaChhc3NvYyA9PiB7XG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGFzc29jKSkge1xuICAgICAgICAgICAgICAgIGxldCBhbGlhcyA9IGFzc29jLmFsaWFzO1xuICAgICAgICAgICAgICAgIGlmICghYXNzb2MuYWxpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXMgPSAnOmpvaW4nICsgKytjb3VudGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFzc29jVGFibGVbYWxpYXNdID0geyBcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBhc3NvYy5lbnRpdHksIFxuICAgICAgICAgICAgICAgICAgICBqb2luVHlwZTogYXNzb2MudHlwZSwgXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogYXNzb2Mub3V0cHV0LFxuICAgICAgICAgICAgICAgICAgICBhbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgb246IGFzc29jLm9uLFxuICAgICAgICAgICAgICAgICAgICAuLi4oYXNzb2MuZGF0YXNldCA/IHRoaXMuZGIuY29ubmVjdG9yLmJ1aWxkUXVlcnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmVwYXJlUXVlcmllcyh7IC4uLmFzc29jLmRhdGFzZXQsICR2YXJpYWJsZXM6IGZpbmRPcHRpb25zLiR2YXJpYWJsZXMgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiB7fSkgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRBc3NvY0ludG9UYWJsZShhc3NvY1RhYmxlLCBjYWNoZSwgYXNzb2MpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgIHJldHVybiBhc3NvY1RhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7Kn0gYXNzb2NUYWJsZSAtIEhpZXJhcmNoeSB3aXRoIHN1YkFzc29jc1xuICAgICAqIEBwYXJhbSB7Kn0gY2FjaGUgLSBEb3R0ZWQgcGF0aCBhcyBrZXlcbiAgICAgKiBAcGFyYW0geyp9IGFzc29jIC0gRG90dGVkIHBhdGhcbiAgICAgKi9cbiAgICBzdGF0aWMgX2xvYWRBc3NvY0ludG9UYWJsZShhc3NvY1RhYmxlLCBjYWNoZSwgYXNzb2MpIHtcbiAgICAgICAgaWYgKGNhY2hlW2Fzc29jXSkgcmV0dXJuIGNhY2hlW2Fzc29jXTtcblxuICAgICAgICBsZXQgbGFzdFBvcyA9IGFzc29jLmxhc3RJbmRleE9mKCcuJyk7ICAgICAgICBcbiAgICAgICAgbGV0IHJlc3VsdDsgIFxuXG4gICAgICAgIGlmIChsYXN0UG9zID09PSAtMSkgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhY2hlW2Fzc29jXSA9IGFzc29jVGFibGVbYXNzb2NdID0geyAuLi50aGlzLm1ldGEuYXNzb2NpYXRpb25zW2Fzc29jXSB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBhc3NvYy5zdWJzdHIoMCwgbGFzdFBvcyk7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IGFzc29jLnN1YnN0cihsYXN0UG9zKzEpOyAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGJhc2VOb2RlID0gY2FjaGVbYmFzZV07XG4gICAgICAgICAgICBpZiAoIWJhc2VOb2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSwgbGFzdCk7XG4gICAgICAgICAgICAgICAgYmFzZU5vZGUgPSB0aGlzLl9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGJhc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgZW50aXR5ID0gdGhpcy5kYi5tb2RlbChiYXNlTm9kZS5lbnRpdHkpO1xuICAgICAgICAgICAgcmVzdWx0ID0geyAuLi5lbnRpdHkubWV0YS5hc3NvY2lhdGlvbnNbbGFzdF0gfTtcblxuICAgICAgICAgICAgaWYgKCFiYXNlTm9kZS5zdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICBiYXNlTm9kZS5zdWJBc3NvY3MgPSB7fTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGNhY2hlW2Fzc29jXSA9IGJhc2VOb2RlLnN1YkFzc29jc1tsYXN0XSA9IHJlc3VsdDtcbiAgICAgICAgfSAgICAgIFxuXG4gICAgICAgIGlmIChyZXN1bHQuYXNzb2MpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRBc3NvY0ludG9UYWJsZShhc3NvY1RhYmxlLCBjYWNoZSwgYXNzb2MgKyAnLicgKyByZXN1bHQuYXNzb2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoW3Jvd3MsIGNvbHVtbnMsIGFsaWFzTWFwXSwgaGllcmFyY2h5KSB7XG4gICAgICAgIGxldCBtYWluSW5kZXggPSB7fTsgICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGFzc29jaWF0aW9ucykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKGFzc29jaWF0aW9ucywgKHsgc3FsLCBrZXksIGxpc3QsIHN1YkFzc29jcyB9LCBhbmNob3IpID0+IHsgXG4gICAgICAgICAgICAgICAgaWYgKHNxbCkgcmV0dXJuOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGxldCBvYmpLZXkgPSAnOicgKyBhbmNob3I7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBzdWJPYmogPSByb3dPYmplY3Rbb2JqS2V5XVxuICAgICAgICAgICAgICAgIGxldCBzdWJJbmRleGVzID0gZXhpc3RpbmdSb3cuc3ViSW5kZXhlc1tvYmpLZXldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGpvaW5lZCBhbiBlbXB0eSByZWNvcmRcbiAgICAgICAgICAgICAgICBsZXQgcm93S2V5ID0gc3ViT2JqW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwocm93S2V5KSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0aW5nU3ViUm93ID0gc3ViSW5kZXhlcyAmJiBzdWJJbmRleGVzW3Jvd0tleV07XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU3ViUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlUmVjb3JkKGV4aXN0aW5nU3ViUm93LCBzdWJPYmosIHN1YkFzc29jcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3cucm93T2JqZWN0W29iaktleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUm93LnJvd09iamVjdFtvYmpLZXldLnB1c2goc3ViT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUm93LnJvd09iamVjdFtvYmpLZXldID0gWyBzdWJPYmogXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ID0geyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdDogc3ViT2JqICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXguc3ViSW5kZXhlcyA9IGJ1aWxkU3ViSW5kZXhlcyhzdWJPYmosIHN1YkFzc29jcylcbiAgICAgICAgICAgICAgICAgICAgfSAgICBcblxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzW3Jvd0tleV0gPSBzdWJJbmRleDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRTdWJJbmRleGVzKHJvd09iamVjdCwgYXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXhlcyA9IHt9O1xuXG4gICAgICAgICAgICBfLmVhY2goYXNzb2NpYXRpb25zLCAoeyBzcWwsIGtleSwgbGlzdCwgc3ViQXNzb2NzIH0sIGFuY2hvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzcWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBvYmpLZXkgPSAnOicgKyBhbmNob3I7XG4gICAgICAgICAgICAgICAgbGV0IHN1Yk9iamVjdCA9IHJvd09iamVjdFtvYmpLZXldOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXggPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Q6IHN1Yk9iamVjdCBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpc3QpIHsgICBcbiAgICAgICAgICAgICAgICAgICAgLy9tYW55IHRvICogICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc05pbChzdWJPYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3ViT2JqZWN0IG5vdCBleGlzdCwganVzdCBmaWxsZWQgd2l0aCBudWxsIGJ5IGpvaW5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdFtvYmpLZXldID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0W29iaktleV0gPSBbIHN1Yk9iamVjdCBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJPYmplY3QgJiYgXy5pc05pbChzdWJPYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViT2JqZWN0ID0gcm93T2JqZWN0W29iaktleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdWJPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXguc3ViSW5kZXhlcyA9IGJ1aWxkU3ViSW5kZXhlcyhzdWJPYmplY3QsIHN1YkFzc29jcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbmRleGVzW29iaktleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbc3ViT2JqZWN0W2tleV1dOiBzdWJJbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFycmF5T2ZPYmpzID0gW107XG5cbiAgICAgICAgLy9wcm9jZXNzIGVhY2ggcm93XG4gICAgICAgIHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgcm93T2JqZWN0ID0ge307IC8vIGhhc2gtc3R5bGUgZGF0YSByb3dcbiAgICAgICAgICAgIGxldCB0YWJsZUNhY2hlID0ge307IC8vIGZyb20gYWxpYXMgdG8gY2hpbGQgcHJvcCBvZiByb3dPYmplY3RcblxuICAgICAgICAgICAgcm93LnJlZHVjZSgocmVzdWx0LCB2YWx1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2wgPSBjb2x1bW5zW2ldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjb2wudGFibGUgPT09ICdBJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbY29sLm5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWNrZXQgPSB0YWJsZUNhY2hlW2NvbC50YWJsZV07ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9hbHJlYWR5IG5lc3RlZCBpbnNpZGUgXG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXRbY29sLm5hbWVdID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlUGF0aCA9IGFsaWFzTWFwW2NvbC50YWJsZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3ViT2JqZWN0ID0geyBbY29sLm5hbWVdOiB2YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ2FjaGVbY29sLnRhYmxlXSA9IHN1Yk9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZUJ5UGF0aChyZXN1bHQsIG5vZGVQYXRoLCBzdWJPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sIHJvd09iamVjdCk7ICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHJvd0tleSA9IHJvd09iamVjdFt0aGlzLm1ldGEua2V5RmllbGRdO1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nUm93ID0gbWFpbkluZGV4W3Jvd0tleV07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3cpIHtcbiAgICAgICAgICAgICAgICBtZXJnZVJlY29yZChleGlzdGluZ1Jvdywgcm93T2JqZWN0LCBoaWVyYXJjaHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheU9mT2Jqcy5wdXNoKHJvd09iamVjdCk7XG4gICAgICAgICAgICAgICAgbWFpbkluZGV4W3Jvd0tleV0gPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3QsIFxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzOiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBoaWVyYXJjaHkpXG4gICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhcnJheU9mT2JqcztcbiAgICB9XG5cbiAgICBzdGF0aWMgX2V4dHJhY3RBc3NvY2lhdGlvbnMoZGF0YSkge1xuICAgICAgICBsZXQgcmF3ID0ge30sIGFzc29jcyA9IHt9O1xuICAgICAgICBcbiAgICAgICAgXy5mb3JPd24oZGF0YSwgKHYsIGspID0+IHtcbiAgICAgICAgICAgIGlmIChrLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgICAgIGFzc29jc1trLnN1YnN0cigxKV0gPSB2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYXdba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBbIHJhdywgYXNzb2NzIF07ICAgICAgICBcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2NyZWF0ZUFzc29jc18oY29udGV4dCwgYXNzb2NzKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5tZXRhLmFzc29jaWF0aW9ucztcbiAgICAgICAgbGV0IGtleVZhbHVlID0gY29udGV4dC5sYXRlc3RbdGhpcy5tZXRhLmtleUZpZWxkXTtcblxuICAgICAgICBpZiAoXy5pc05pbChrZXlWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPb2xvbmdVc2FnZUVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHByaW1hcnkga2V5IGZpZWxkIHZhbHVlLiBFbnRpdHk6ICcgKyB0aGlzLm1ldGEubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhhc3NvY3MsIGFzeW5jIChkYXRhLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgIGxldCBhc3NvY01ldGEgPSBtZXRhW2FuY2hvcl07XG4gICAgICAgICAgICBpZiAoIWFzc29jTWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIFwiJHthbmNob3J9XCIgb2YgZW50aXR5IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGFzc29jTW9kZWwgPSB0aGlzLmRiLm1vZGVsKGFzc29jTWV0YS5lbnRpdHkpO1xuXG4gICAgICAgICAgICBpZiAoYXNzb2NNZXRhLmxpc3QpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gXy5jYXN0QXJyYXkoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhkYXRhLCBpdGVtID0+IGFzc29jTW9kZWwuY3JlYXRlXyh7IC4uLml0ZW0sIC4uLihhc3NvY01ldGEuZmllbGQgPyB7IFthc3NvY01ldGEuZmllbGRdOiBrZXlWYWx1ZSB9IDoge30pIH0sIGNvbnRleHQuY3JlYXRlT3B0aW9ucywgY29udGV4dC5jb25uT3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXNzb2NNb2RlbC5jcmVhdGVfKHsgLi4uZGF0YSwgLi4uKGFzc29jTWV0YS5maWVsZCA/IHsgW2Fzc29jTWV0YS5maWVsZF06IGtleVZhbHVlIH0gOiB7fSkgfSwgY29udGV4dC5jcmVhdGVPcHRpb25zLCBjb250ZXh0LmNvbm5PcHRpb25zKTsgIFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXlTUUxFbnRpdHlNb2RlbDsiXX0=