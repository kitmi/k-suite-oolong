"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static serialize(dataRecord) {
    _.forOwn(dataRecord, (value, fieldName) => {
      let fieldMeta = this.meta.fields[fieldName];

      if (fieldMeta.type === 'datetime') {
        if (typeof value === 'object' && value.oolType === 'SymbolToken') {
          if (value.name === 'now') {
            dataRecord[fieldName] = this.db.connector.raw('NOW()');
          }
        }

        if (value instanceof DateTime) {
          dataRecord[fieldName] = value.toISO({
            includeOffset: false
          });
        }
      }
    });
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $where: condition,
        $fetchArray: true
      }, context.connOptions);
    }
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $where: context.updateOptions.$where,
        $fetchArray: true
      }, context.connOptions);
    }
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $where: context.deleteOptions.$where,
        $fetchArray: true
      }, context.connOptions);
    }
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiRGF0ZVRpbWUiLCJFbnRpdHlNb2RlbCIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJzZXJpYWxpemUiLCJkYXRhUmVjb3JkIiwiZm9yT3duIiwidmFsdWUiLCJmaWVsZE5hbWUiLCJmaWVsZE1ldGEiLCJ0eXBlIiwib29sVHlwZSIsIm5hbWUiLCJkYiIsImNvbm5lY3RvciIsInJhdyIsInRvSVNPIiwiaW5jbHVkZU9mZnNldCIsImFmdGVyQ3JlYXRlXyIsImNvbnRleHQiLCJpbnNlcnRJZCIsInJlc3VsdCIsImxhdGVzdCIsImNyZWF0ZU9wdGlvbnMiLCIkcmV0cmlldmVDcmVhdGVkIiwiY29uZGl0aW9uIiwiZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20iLCJmaW5kT25lXyIsIiR3aGVyZSIsIiRmZXRjaEFycmF5IiwiY29ubk9wdGlvbnMiLCJhZnRlclVwZGF0ZV8iLCJ1cGRhdGVPcHRpb25zIiwiJHJldHJpZXZlVXBkYXRlZCIsImJlZm9yZURlbGV0ZV8iLCJkZWxldGVPcHRpb25zIiwiJHJldHJpZXZlRGVsZXRlZCIsImNvbm5lY3Rpb24iLCJiZWdpblRyYW5zYWN0aW9uXyIsImV4aXN0aW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFRRixJQUFkOztBQUVBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFlRixPQUFPLENBQUMsT0FBRCxDQUE1Qjs7QUFDQSxNQUFNRyxXQUFXLEdBQUdILE9BQU8s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QixFQUE5QztBQUVBWCxRQUFBQSxPQUFPLENBQUNXLFdBQVIsQ0FBb0JPLFVBQXBCLEdBQWlDLE1BQU0sS0FBS3hCLEVBQUwsQ0FBUUMsU0FBUixDQUFrQndCLGlCQUFsQixFQUF2QztBQUNIOztBQUVEbkIsTUFBQUEsT0FBTyxDQUFDb0IsUUFBUixHQUFtQixNQUFNLEtBQUtaLFFBQUwsQ0FBYztBQUFFQyxRQUFBQSxNQUFNLEVBQUVULE9BQU8sQ0FBQ2dCLGFBQVIsQ0FBc0JQLE1BQWhDO0FBQXdDQyxRQUFBQSxXQUFXLEVBQUU7QUFBckQsT0FBZCxFQUEwRVYsT0FBTyxDQUFDVyxXQUFsRixDQUF6QjtBQUNIO0FBQ0o7O0FBMUVzQzs7QUE2RTNDVSxNQUFNLENBQUNDLE9BQVAsR0FBaUI3QyxnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IF8gfSA9IFV0aWw7XG5cbmNvbnN0IHsgRGF0ZVRpbWUgfSA9IHJlcXVpcmUoJ2x1eG9uJyk7XG5jb25zdCBFbnRpdHlNb2RlbCA9IHJlcXVpcmUoJy4uLy4uL0VudGl0eU1vZGVsJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhUmVjb3JkIFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXJpYWxpemUoZGF0YVJlY29yZCkge1xuICAgICAgICBfLmZvck93bihkYXRhUmVjb3JkLCAodmFsdWUsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpZWxkTWV0YSA9IHRoaXMubWV0YS5maWVsZHNbZmllbGROYW1lXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpZWxkTWV0YS50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUub29sVHlwZSA9PT0gJ1N5bWJvbFRva2VuJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHRoaXMuZGIuY29ubmVjdG9yLnJhdygnTk9XKCknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IGNyZWF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2NvbnRleHQuY3JlYXRlT3B0aW9uc10gLSBDcmVhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSBjcmVhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJDcmVhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXV0b0luY3JlbWVudCkge1xuICAgICAgICAgICAgbGV0IHsgaW5zZXJ0SWQgfSA9IGNvbnRleHQucmVzdWx0O1xuICAgICAgICAgICAgY29udGV4dC5sYXRlc3RbdGhpcy5tZXRhLmZlYXR1cmVzLmF1dG9JZC5maWVsZF0gPSBpbnNlcnRJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0LmNyZWF0ZU9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZCkge1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IHRoaXMuZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oY29udGV4dC5sYXRlc3QpO1xuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSBhd2FpdCB0aGlzLmZpbmRPbmVfKHsgJHdoZXJlOiBjb25kaXRpb24sICRmZXRjaEFycmF5OiB0cnVlfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IHVwZGF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3VwZGF0ZU9wdGlvbnNdIC0gVXBkYXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW3VwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZF0gLSBSZXRyaWV2ZSB0aGUgbmV3bHkgdXBkYXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyVXBkYXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSBhd2FpdCB0aGlzLmZpbmRPbmVfKHsgJHdoZXJlOiBjb250ZXh0LnVwZGF0ZU9wdGlvbnMuJHdoZXJlLCAkZmV0Y2hBcnJheTogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVmb3JlIGRlbGV0aW5nIGFuIGVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmRlbGV0ZU9wdGlvbnNdIC0gRGVsZXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZF0gLSBSZXRyaWV2ZSB0aGUgcmVjZW50bHkgZGVsZXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGJlZm9yZURlbGV0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5kZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghY29udGV4dC5jb25uT3B0aW9ucyB8fCAhY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucyB8fCAoY29udGV4dC5jb25uT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbiA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmJlZ2luVHJhbnNhY3Rpb25fKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQuZXhpc3RpbmcgPSBhd2FpdCB0aGlzLmZpbmRPbmVfKHsgJHdoZXJlOiBjb250ZXh0LmRlbGV0ZU9wdGlvbnMuJHdoZXJlLCAkZmV0Y2hBcnJheTogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE15U1FMRW50aXR5TW9kZWw7Il19