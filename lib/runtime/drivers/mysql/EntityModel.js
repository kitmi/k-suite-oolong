"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  setValueByPath
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  BusinessError
} = require('../../Errors');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static serialize(dataRecord) {
    _.forOwn(dataRecord, (value, fieldName) => {
      let fieldMeta = this.meta.fields[fieldName];

      if (fieldMeta.type === 'datetime') {
        if (typeof value === 'object' && value.oolType === 'SymbolToken') {
          if (value.name === 'now') {
            dataRecord[fieldName] = this.db.connector.raw('NOW()');
          }
        }

        if (value instanceof DateTime) {
          dataRecord[fieldName] = value.toISO({
            includeOffset: false
          });
        }
      } else if (fieldMeta.type === 'boolean') {
        dataRecord[fieldName] = dataRecord[fieldName] ? 1 : 0;
      }
    });
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message + ` while creating a new "${this.meta.name}".`);
      }

      throw error;
    }
  }

  static async update_(...args) {
    try {
      return await super.update_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $query: condition,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $query: context.updateOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $query: context.deleteOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static _prepareAssociations(associations) {
    associations = associations.concat().sort();
    let cache = {},
        hierarchy = [];
    associations.forEach(assoc => {
      let [remoteEntity, base, anchor, assocInfo] = this._getRelatedEntity(assoc, cache);

      if (!assocInfo) {
        throw new Error("Assertion failed: assocInfo");
      }

      let remoteEntityName = remoteEntity.meta.name;
      let detail = {
        entity: remoteEntityName,
        keyField: remoteEntity.meta.keyField,
        joinType: 'LEFT JOIN',
        anchor
      };

      if (assocInfo.isList) {
        detail.isList = true;
      }

      if (assocInfo.optional) {
        detail.optional = true;
      }

      if (assocInfo.connectedBy) {
        detail.localField = cache[base] ? cache[base].entity.meta.keyField : this.meta.keyField;
        detail.remoteField = assocInfo.remoteField || this.meta.name;
        detail.entity = assocInfo.connectedBy;
        detail.keyField = this.db.model(assocInfo.connectedBy).meta.keyField;

        if (assocInfo.connectedWith) {
          detail.connectedWith = assocInfo.connectedWith;
        }

        detail.subAssociations = [{
          entity: remoteEntityName,
          keyField: remoteEntity.meta.keyField,
          joinType: 'LEFT JOIN',
          anchor: assocInfo.refersToField,
          localField: assocInfo.refersToField,
          remoteField: remoteEntity.meta.keyField,
          isList: false
        }];
      } else if (assocInfo.isList) {
        detail.localField = cache[base] ? cache[base].entity.meta.keyField : this.meta.keyField;
        detail.remoteField = assocInfo.remoteField || this.meta.name;
      } else {
        detail.localField = anchor;
        detail.remoteField = remoteEntity.meta.keyField;
      }

      if (cache[base]) {
        if (cache[base].detail.subAssociations) {
          cache[base].detail.subAssociations.push(detail);
        } else {
          cache[base].detail.subAssociations = [detail];
        }
      } else {
        hierarchy.push(detail);
      }

      cache[assoc] = {
        entity: remoteEntity,
        detail
      };
    });
    return hierarchy;
  }

  static _getRelatedEntity(assocPath, cache) {
    let parts = assocPath.split('.');
    let base = parts.slice(0, -1).join('.');
    let cacheNode = cache[base];

    if (cacheNode) {
      let last = parts.pop();
      let assocInfo = cacheNode.entity.meta.associations[last];

      if (!assocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      return [this.db.model(assocInfo.entity), base, last, assocInfo];
    }

    let entity = this,
        current,
        currentAssocInfo;

    while (parts.length > 0) {
      current = parts.shift();
      currentAssocInfo = entity.meta.associations[current];

      if (!currentAssocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      entity = this.db.model(currentAssocInfo.entity);
    }

    return [entity, base, current, currentAssocInfo];
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObj = rowObject[key];
        let subIndexes = existingRow.subIndexes[key];
        let rowKey = subObj[keyField];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssociations) {
            mergeRecord(existingSubRow, subObj, subAssociations);
          }
        } else {
          if (!isList) {
            throw new Error("Assertion failed: isList");
          }

          if (existingRow.rowObject[key]) {
            existingRow.rowObject[key].push(subObj);
          } else {
            existingRow.rowObject[key] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssociations);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      return associations.reduce((indexes, {
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObject = rowObject[key];
        let subIndex = {
          rowObject: subObject
        };

        if (isList) {
          if (_.isNil(subObject[keyField])) {
            rowObject[key] = [];
            subObject = null;
          } else {
            rowObject[key] = [subObject];
          }
        } else if (_.isNil(subObject[keyField])) {
          subObject = rowObject[key] = null;
        }

        if (subObject) {
          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssociations);
          }

          indexes[key] = {
            [subObject[keyField]]: subIndex
          };
        }

        return indexes;
      }, {});
    }

    let arrayOfObjs = [];
    rows.forEach(row => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];
            let subObject = {
              [col.name]: value
            };
            tableCache[col.table] = subObject;
            setValueByPath(result, nodePath, subObject);
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwic2V0VmFsdWVCeVBhdGgiLCJEYXRlVGltZSIsIkVudGl0eU1vZGVsIiwiQnVzaW5lc3NFcnJvciIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJzZXJpYWxpemUiLCJkYXRhUmVjb3JkIiwiZm9yT3duIiwidmFsdWUiLCJmaWVsZE5hbWUiLCJmaWVsZE1ldGEiLCJ0eXBlIiwib29sVHlwZSIsIm5hbWUiLCJkYiIsImNvbm5lY3RvciIsInJhdyIsInRvSVNPIiwiaW5jbHVkZU9mZnNldCIsImNyZWF0ZV8iLCJhcmdzIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJjb2RlIiwibWVzc2FnZSIsInVwZGF0ZV8iLCJhZnRlckNyZWF0ZV8iLCJjb250ZXh0IiwiaW5zZXJ0SWQiLCJyZXN1bHQiLCJsYXRlc3QiLCJjcmVhdGVPcHRpb25zIiwiJHJldHJpZXZlQ3JlYXRlZCIsImNvbmRpdGlvbiIsImdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tIiwiZmluZE9uZV8iLCIkcXVlcnkiLCIkdW5ib3hpbmciLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiYmVmb3JlRGVsZXRlXyIsImRlbGV0ZU9wdGlvbnMiLCIkcmV0cmlldmVEZWxldGVkIiwiY29ubmVjdGlvbiIsImJlZ2luVHJhbnNhY3Rpb25fIiwiZXhpc3RpbmciLCJfcHJlcGFyZUFzc29jaWF0aW9ucyIsImFzc29jaWF0aW9ucyIsImNvbmNhdCIsInNvcnQiLCJjYWNoZSIsImhpZXJhcmNoeSIsImZvckVhY2giLCJhc3NvYyIsInJlbW90ZUVudGl0eSIsImJhc2UiLCJhbmNob3IiLCJhc3NvY0luZm8iLCJfZ2V0UmVsYXRlZEVudGl0eSIsInJlbW90ZUVudGl0eU5hbWUiLCJkZXRhaWwiLCJlbnRpdHkiLCJrZXlGaWVsZCIsImpvaW5UeXBlIiwiaXNMaXN0Iiwib3B0aW9uYWwiLCJjb25uZWN0ZWRCeSIsImxvY2FsRmllbGQiLCJyZW1vdGVGaWVsZCIsIm1vZGVsIiwiY29ubmVjdGVkV2l0aCIsInN1YkFzc29jaWF0aW9ucyIsInJlZmVyc1RvRmllbGQiLCJwdXNoIiwiYXNzb2NQYXRoIiwicGFydHMiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsImNhY2hlTm9kZSIsImxhc3QiLCJwb3AiLCJjdXJyZW50IiwiY3VycmVudEFzc29jSW5mbyIsImxlbmd0aCIsInNoaWZ0IiwiX21hcFJlY29yZHNUb09iamVjdHMiLCJyb3dzIiwiY29sdW1ucyIsImFsaWFzTWFwIiwibWFpbkluZGV4IiwibWVyZ2VSZWNvcmQiLCJleGlzdGluZ1JvdyIsInJvd09iamVjdCIsImVhY2giLCJrZXkiLCJzdWJPYmoiLCJzdWJJbmRleGVzIiwicm93S2V5IiwiaXNOaWwiLCJleGlzdGluZ1N1YlJvdyIsInN1YkluZGV4IiwiYnVpbGRTdWJJbmRleGVzIiwicmVkdWNlIiwiaW5kZXhlcyIsInN1Yk9iamVjdCIsImFycmF5T2ZPYmpzIiwicm93IiwidGFibGVDYWNoZSIsImkiLCJjb2wiLCJ0YWJsZSIsImJ1Y2tldCIsIm5vZGVQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQXdCSCxJQUE5Qjs7QUFFQSxNQUFNO0FBQUVJLEVBQUFBO0FBQUYsSUFBZUgsT0FBTyxDQUFDLE9BQUQsQ0FBNUI7O0FBQ0EsTUFBTUksV0FBVyxHQUFHSixPQUFPLENBQUMsbUJBQUQsQ0FBM0I7O0FBQ0EsTUFBTTtB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LFVBQUFBLFNBRGdCO0FBRWhCSSxVQUFBQSxVQUFVLEVBQUVLLGVBQWUsQ0FBQ1QsU0FBRCxFQUFZMUMsU0FBWjtBQUZYLFNBQXBCO0FBSUg7QUFDSixLQWxDRDtBQW9DQSxXQUFPdUQsV0FBUDtBQUNIOztBQTNVc0M7O0FBOFUzQ1EsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEgsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBzZXRWYWx1ZUJ5UGF0aCB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcbmNvbnN0IHsgQnVzaW5lc3NFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhUmVjb3JkIFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXJpYWxpemUoZGF0YVJlY29yZCkge1xuICAgICAgICBfLmZvck93bihkYXRhUmVjb3JkLCAodmFsdWUsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpZWxkTWV0YSA9IHRoaXMubWV0YS5maWVsZHNbZmllbGROYW1lXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpZWxkTWV0YS50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUub29sVHlwZSA9PT0gJ1N5bWJvbFRva2VuJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHRoaXMuZGIuY29ubmVjdG9yLnJhdygnTk9XKCknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWVsZE1ldGEudHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgZGF0YVJlY29yZFtmaWVsZE5hbWVdID0gZGF0YVJlY29yZFtmaWVsZE5hbWVdID8gMSA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5jcmVhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKCdUaGUgbmV3IGVudGl0eSBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnRVJfRFVQX0VOVFJZJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGVycm9yLm1lc3NhZ2UgKyBgIHdoaWxlIGNyZWF0aW5nIGEgbmV3IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlXyguLi5hcmdzKSB7XG4gICAgICAgIHRyeSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIudXBkYXRlXyguLi5hcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxldCBlcnJvckNvZGUgPSBlcnJvci5jb2RlO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnRVJfTk9fUkVGRVJFTkNFRF9ST1dfMicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcignVGhlIG5ldyBlbnRpdHkgaXMgcmVmZXJlbmNpbmcgdG8gYW4gdW5leGlzdGluZyBlbnRpdHkuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX0RVUF9FTlRSWScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUG9zdCBjcmVhdGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmNyZWF0ZU9wdGlvbnNdIC0gQ3JlYXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NyZWF0ZU9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZF0gLSBSZXRyaWV2ZSB0aGUgbmV3bHkgY3JlYXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyQ3JlYXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0F1dG9JbmNyZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCB7IGluc2VydElkIH0gPSBjb250ZXh0LnJlc3VsdDtcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0W3RoaXMubWV0YS5mZWF0dXJlcy5hdXRvSWQuZmllbGRdID0gaW5zZXJ0SWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5jcmVhdGVPcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWQpIHtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSB0aGlzLmdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tKGNvbnRleHQubGF0ZXN0KTtcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0ID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogY29uZGl0aW9uLCAkdW5ib3hpbmc6IHRydWV9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbdXBkYXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbdXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSB1cGRhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJVcGRhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkcXVlcnk6IGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcXVlcnksICR1bmJveGluZzogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVmb3JlIGRlbGV0aW5nIGFuIGVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmRlbGV0ZU9wdGlvbnNdIC0gRGVsZXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZF0gLSBSZXRyaWV2ZSB0aGUgcmVjZW50bHkgZGVsZXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGJlZm9yZURlbGV0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5kZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghY29udGV4dC5jb25uT3B0aW9ucyB8fCAhY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucyB8fCAoY29udGV4dC5jb25uT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbiA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmJlZ2luVHJhbnNhY3Rpb25fKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQuZXhpc3RpbmcgPSBhd2FpdCB0aGlzLmZpbmRPbmVfKHsgJHF1ZXJ5OiBjb250ZXh0LmRlbGV0ZU9wdGlvbnMuJHF1ZXJ5LCAkdW5ib3hpbmc6IHRydWV9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qICAgICAgZW50aXR5OiA8cmVtb3RlIGVudGl0eT5cbiAgICAgKiAgICAgIGpvaW5UeXBlOiAnTEVGVCBKT0lOfElOTkVSIEpPSU58RlVMTCBPVVRFUiBKT0lOJ1xuICAgICAqICAgICAgYW5jaG9yOiAnbG9jYWwgcHJvcGVydHkgdG8gcGxhY2UgdGhlIHJlbW90ZSBlbnRpdHknXG4gICAgICogICAgICBsb2NhbEZpZWxkOiA8bG9jYWwgZmllbGQgdG8gam9pbj5cbiAgICAgKiAgICAgIHJlbW90ZUZpZWxkOiA8cmVtb3RlIGZpZWxkIHRvIGpvaW4+XG4gICAgICogICAgICBzdWJBc3NvY2lhdGlvbnM6IHsgLi4uIH0gICovXG4gICAgc3RhdGljIF9wcmVwYXJlQXNzb2NpYXRpb25zKGFzc29jaWF0aW9ucykgeyAgIFxuICAgICAgICBhc3NvY2lhdGlvbnMgPSBhc3NvY2lhdGlvbnMuY29uY2F0KCkuc29ydCgpO1xuICAgICAgICBsZXQgY2FjaGUgPSB7fSwgaGllcmFyY2h5ID0gW107XG4gICAgICAgIFxuICAgICAgICBhc3NvY2lhdGlvbnMuZm9yRWFjaChhc3NvYyA9PiB7XG4gICAgICAgICAgICBsZXQgWyByZW1vdGVFbnRpdHksIGJhc2UsIGFuY2hvciwgYXNzb2NJbmZvIF0gPSB0aGlzLl9nZXRSZWxhdGVkRW50aXR5KGFzc29jLCBjYWNoZSk7XG4gICAgICAgICAgICBhc3NlcnQ6IGFzc29jSW5mbztcblxuICAgICAgICAgICAgbGV0IHJlbW90ZUVudGl0eU5hbWUgPSByZW1vdGVFbnRpdHkubWV0YS5uYW1lO1xuXG4gICAgICAgICAgICBsZXQgZGV0YWlsID0ge1xuICAgICAgICAgICAgICAgIGVudGl0eTogcmVtb3RlRW50aXR5TmFtZSxcbiAgICAgICAgICAgICAgICBrZXlGaWVsZDogcmVtb3RlRW50aXR5Lm1ldGEua2V5RmllbGQsXG4gICAgICAgICAgICAgICAgam9pblR5cGU6ICdMRUZUIEpPSU4nLFxuICAgICAgICAgICAgICAgIGFuY2hvclxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGFzc29jSW5mby5pc0xpc3QpIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwuaXNMaXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFzc29jSW5mby5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgIGRldGFpbC5vcHRpb25hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChhc3NvY0luZm8uY29ubmVjdGVkQnkpIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwubG9jYWxGaWVsZCA9IGNhY2hlW2Jhc2VdID8gY2FjaGVbYmFzZV0uZW50aXR5Lm1ldGEua2V5RmllbGQgOiB0aGlzLm1ldGEua2V5RmllbGQ7XG4gICAgICAgICAgICAgICAgZGV0YWlsLnJlbW90ZUZpZWxkID0gYXNzb2NJbmZvLnJlbW90ZUZpZWxkIHx8IHRoaXMubWV0YS5uYW1lO1xuXG4gICAgICAgICAgICAgICAgZGV0YWlsLmVudGl0eSA9IGFzc29jSW5mby5jb25uZWN0ZWRCeTtcbiAgICAgICAgICAgICAgICBkZXRhaWwua2V5RmllbGQgPSB0aGlzLmRiLm1vZGVsKGFzc29jSW5mby5jb25uZWN0ZWRCeSkubWV0YS5rZXlGaWVsZDtcblxuICAgICAgICAgICAgICAgIGlmIChhc3NvY0luZm8uY29ubmVjdGVkV2l0aCkge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWwuY29ubmVjdGVkV2l0aCA9IGFzc29jSW5mby5jb25uZWN0ZWRXaXRoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRldGFpbC5zdWJBc3NvY2lhdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogcmVtb3RlRW50aXR5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleUZpZWxkOiByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpvaW5UeXBlOiAnTEVGVCBKT0lOJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcjogYXNzb2NJbmZvLnJlZmVyc1RvRmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiBhc3NvY0luZm8ucmVmZXJzVG9GaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZUZpZWxkOiByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGlzdDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFzc29jSW5mby5pc0xpc3QpIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwubG9jYWxGaWVsZCA9IGNhY2hlW2Jhc2VdID8gY2FjaGVbYmFzZV0uZW50aXR5Lm1ldGEua2V5RmllbGQgOiB0aGlzLm1ldGEua2V5RmllbGQ7XG4gICAgICAgICAgICAgICAgZGV0YWlsLnJlbW90ZUZpZWxkID0gYXNzb2NJbmZvLnJlbW90ZUZpZWxkIHx8IHRoaXMubWV0YS5uYW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXRhaWwubG9jYWxGaWVsZCA9IGFuY2hvcjtcbiAgICAgICAgICAgICAgICBkZXRhaWwucmVtb3RlRmllbGQgPSByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhY2hlW2Jhc2VdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlW2Jhc2VdLmRldGFpbC5zdWJBc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVbYmFzZV0uZGV0YWlsLnN1YkFzc29jaWF0aW9ucy5wdXNoKGRldGFpbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVbYmFzZV0uZGV0YWlsLnN1YkFzc29jaWF0aW9ucyA9IFsgZGV0YWlsIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHkucHVzaChkZXRhaWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZVthc3NvY10gPSB7XG4gICAgICAgICAgICAgICAgZW50aXR5OiByZW1vdGVFbnRpdHksXG4gICAgICAgICAgICAgICAgZGV0YWlsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaGllcmFyY2h5O1xuICAgIH1cblxuICAgIHN0YXRpYyBfZ2V0UmVsYXRlZEVudGl0eShhc3NvY1BhdGgsIGNhY2hlKSB7ICAgICAgICBcbiAgICAgICAgbGV0IHBhcnRzID0gYXNzb2NQYXRoLnNwbGl0KCcuJyk7ICAgICAgICBcbiAgICAgICAgbGV0IGJhc2UgPSBwYXJ0cy5zbGljZSgwLCAtMSkuam9pbignLicpOyAgICAgICAgXG5cbiAgICAgICAgbGV0IGNhY2hlTm9kZSA9IGNhY2hlW2Jhc2VdO1xuICAgICAgICBpZiAoY2FjaGVOb2RlKSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IHBhcnRzLnBvcCgpO1xuICAgICAgICAgICAgbGV0IGFzc29jSW5mbyA9IGNhY2hlTm9kZS5lbnRpdHkubWV0YS5hc3NvY2lhdGlvbnNbbGFzdF07XG4gICAgICAgICAgICBpZiAoIWFzc29jSW5mbykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIG9mIFwiJHt0aGlzLm1ldGEubmFtZX1cIiBlbnRpdHk6ICR7YXNzb2NQYXRofWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gWyB0aGlzLmRiLm1vZGVsKGFzc29jSW5mby5lbnRpdHkpLCBiYXNlLCBsYXN0LCBhc3NvY0luZm8gXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRpdHkgPSB0aGlzLCBjdXJyZW50LCBjdXJyZW50QXNzb2NJbmZvO1xuXG4gICAgICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGN1cnJlbnRBc3NvY0luZm8gPSBlbnRpdHkubWV0YS5hc3NvY2lhdGlvbnNbY3VycmVudF07XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRBc3NvY0luZm8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVzaW5lc3NFcnJvcihgVW5rbm93biBhc3NvY2lhdGlvbiBvZiBcIiR7dGhpcy5tZXRhLm5hbWV9XCIgZW50aXR5OiAke2Fzc29jUGF0aH1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW50aXR5ID0gdGhpcy5kYi5tb2RlbChjdXJyZW50QXNzb2NJbmZvLmVudGl0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gWyBlbnRpdHksIGJhc2UsIGN1cnJlbnQsIGN1cnJlbnRBc3NvY0luZm8gXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoW3Jvd3MsIGNvbHVtbnMsIGFsaWFzTWFwXSwgaGllcmFyY2h5KSB7XG4gICAgICAgIGxldCBtYWluSW5kZXggPSB7fTtcblxuICAgICAgICBmdW5jdGlvbiBtZXJnZVJlY29yZChleGlzdGluZ1Jvdywgcm93T2JqZWN0LCBhc3NvY2lhdGlvbnMpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIF8uZWFjaChhc3NvY2lhdGlvbnMsICh7IGtleUZpZWxkLCBhbmNob3IsIGlzTGlzdCwgc3ViQXNzb2NpYXRpb25zIH0pID0+IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGtleSA9ICc6JyArIGFuY2hvcjsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1Yk9iaiA9IHJvd09iamVjdFtrZXldXG4gICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ZXMgPSBleGlzdGluZ1Jvdy5zdWJJbmRleGVzW2tleV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHJvd0tleSA9IHN1Yk9ialtrZXlGaWVsZF07XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwocm93S2V5KSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0aW5nU3ViUm93ID0gc3ViSW5kZXhlcyAmJiBzdWJJbmRleGVzW3Jvd0tleV07XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU3ViUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlUmVjb3JkKGV4aXN0aW5nU3ViUm93LCBzdWJPYmosIHN1YkFzc29jaWF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBpc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1Jvdy5yb3dPYmplY3Rba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdSb3cucm93T2JqZWN0W2tleV0ucHVzaChzdWJPYmopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdSb3cucm93T2JqZWN0W2tleV0gPSBbIHN1Yk9iaiBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXggPSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0OiBzdWJPYmogICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViQXNzb2NpYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJJbmRleC5zdWJJbmRleGVzID0gYnVpbGRTdWJJbmRleGVzKHN1Yk9iaiwgc3ViQXNzb2NpYXRpb25zKVxuICAgICAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgICAgIHN1YkluZGV4ZXNbcm93S2V5XSA9IHN1YkluZGV4OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBhc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBhc3NvY2lhdGlvbnMucmVkdWNlKChpbmRleGVzLCB7IGtleUZpZWxkLCBhbmNob3IsIGlzTGlzdCwgc3ViQXNzb2NpYXRpb25zIH0pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gJzonK2FuY2hvcjtcbiAgICAgICAgICAgICAgICBsZXQgc3ViT2JqZWN0ID0gcm93T2JqZWN0W2tleV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBzdWJJbmRleCA9IHsgXG4gICAgICAgICAgICAgICAgICAgIHJvd09iamVjdDogc3ViT2JqZWN0IFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNMaXN0KSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwoc3ViT2JqZWN0W2tleUZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd09iamVjdFtrZXldID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0W2tleV0gPSBbIHN1Yk9iamVjdCBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmlzTmlsKHN1Yk9iamVjdFtrZXlGaWVsZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yk9iamVjdCA9IHJvd09iamVjdFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3ViT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkluZGV4LnN1YkluZGV4ZXMgPSBidWlsZFN1YkluZGV4ZXMoc3ViT2JqZWN0LCBzdWJBc3NvY2lhdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3N1Yk9iamVjdFtrZXlGaWVsZF1dOiBzdWJJbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICAgICAgfSwge30pOyAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhcnJheU9mT2JqcyA9IFtdO1xuXG4gICAgICAgIHJvd3MuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgbGV0IHJvd09iamVjdCA9IHt9OyAvLyBoYXNoLXN0eWxlIGRhdGEgcm93XG4gICAgICAgICAgICBsZXQgdGFibGVDYWNoZSA9IHt9OyAvLyBmcm9tIGFsaWFzIHRvIGNoaWxkIHByb3Agb2Ygcm93T2JqZWN0XG5cbiAgICAgICAgICAgIHJvdy5yZWR1Y2UoKHJlc3VsdCwgdmFsdWUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY29sID0gY29sdW1uc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoY29sLnRhYmxlID09PSAnQScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2NvbC5uYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgYnVja2V0ID0gdGFibGVDYWNoZVtjb2wudGFibGVdOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldFtjb2wubmFtZV0gPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVQYXRoID0gYWxpYXNNYXBbY29sLnRhYmxlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJPYmplY3QgPSB7IFtjb2wubmFtZV06IHZhbHVlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUNhY2hlW2NvbC50YWJsZV0gPSBzdWJPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZUJ5UGF0aChyZXN1bHQsIG5vZGVQYXRoLCBzdWJPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sIHJvd09iamVjdCk7ICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHJvd0tleSA9IHJvd09iamVjdFt0aGlzLm1ldGEua2V5RmllbGRdO1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nUm93ID0gbWFpbkluZGV4W3Jvd0tleV07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3cpIHtcbiAgICAgICAgICAgICAgICBtZXJnZVJlY29yZChleGlzdGluZ1Jvdywgcm93T2JqZWN0LCBoaWVyYXJjaHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheU9mT2Jqcy5wdXNoKHJvd09iamVjdCk7XG4gICAgICAgICAgICAgICAgbWFpbkluZGV4W3Jvd0tleV0gPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3QsIFxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzOiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBoaWVyYXJjaHkpXG4gICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhcnJheU9mT2JqcztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXlTUUxFbnRpdHlNb2RlbDsiXX0=