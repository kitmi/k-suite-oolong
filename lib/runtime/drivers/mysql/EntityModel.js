"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  setValueByPath
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  BusinessError
} = require('../../Errors');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static serialize(dataRecord) {
    _.forOwn(dataRecord, (value, fieldName) => {
      let fieldMeta = this.meta.fields[fieldName];

      if (fieldMeta.type === 'datetime') {
        if (typeof value === 'object' && value.oolType === 'SymbolToken') {
          if (value.name === 'now') {
            dataRecord[fieldName] = this.db.connector.raw('NOW()');
          }
        }

        if (value instanceof DateTime) {
          dataRecord[fieldName] = value.toISO({
            includeOffset: false
          });
        }
      } else if (fieldMeta.type === 'boolean') {
        dataRecord[fieldName] = dataRecord[fieldName] ? 1 : 0;
      }
    });
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async update_(...args) {
    try {
      return await super.update_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $query: condition,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $query: context.updateOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $query: context.deleteOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static _prepareAssociations(associations) {
    associations = associations.concat().sort();
    let cache = {},
        hierarchy = [];
    associations.forEach(assoc => {
      let [remoteEntity, base, anchor, assocInfo] = this._getRelatedEntity(assoc, cache);

      if (!assocInfo) {
        throw new Error("Assertion failed: assocInfo");
      }

      let remoteEntityName = remoteEntity.meta.name;
      let detail = {
        entity: remoteEntityName,
        keyField: remoteEntity.meta.keyField,
        joinType: 'LEFT JOIN',
        anchor,
        isList: assocInfo.isList,
        optional: assocInfo.optional
      };

      if (assocInfo.isList) {
        detail.localField = cache[base] ? cache[base].entity.meta.keyField : this.meta.keyField;
        detail.remoteField = assocInfo.remoteField || this.meta.name;

        if (assocInfo.connectedBy) {
          detail.entity = assocInfo.connectedBy;
          detail.keyField = this.db.model(assocInfo.connectedBy).meta.keyField;
          detail.subAssociations = [{
            entity: remoteEntityName,
            keyField: remoteEntity.meta.keyField,
            joinType: 'LEFT JOIN',
            anchor: remoteEntityName,
            localField: remoteEntityName,
            remoteField: remoteEntity.meta.keyField,
            isList: false
          }];
        }
      } else {
        detail.localField = anchor;
        detail.remoteField = remoteEntity.meta.keyField;
      }

      if (cache[base]) {
        if (cache[base].detail.subAssociations) {
          cache[base].detail.subAssociations.push(detail);
        } else {
          cache[base].detail.subAssociations = [detail];
        }
      } else {
        hierarchy.push(detail);
      }

      cache[assoc] = {
        entity: remoteEntity,
        detail
      };
    });
    return hierarchy;
  }

  static _getRelatedEntity(assocPath, cache) {
    let parts = assocPath.split('.');
    let base = parts.slice(0, -1).join('.');
    let cacheNode = cache[base];

    if (cacheNode) {
      let last = parts.pop();
      let assocInfo = cacheNode.entity.meta.associations[last];

      if (!assocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      return [this.db.model(assocInfo.entity), base, last, assocInfo];
    }

    let entity = this,
        current,
        currentAssocInfo;

    while (parts.length > 0) {
      current = parts.shift();
      currentAssocInfo = entity.meta.associations[current];

      if (!currentAssocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      entity = this.db.model(currentAssocInfo.entity);
    }

    return [entity, base, current, currentAssocInfo];
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObj = rowObject[key];
        let subIndexes = existingRow.subIndexes[key];
        let rowKey = subObj[keyField];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssociations) {
            mergeRecord(existingSubRow, subObj, subAssociations);
          }
        } else {
          if (!isList) {
            console.log(associations);
            console.log(anchor);
            console.log('rowKey', rowKey);
            console.log('subIndexes', subIndexes);
            throw new Error('');
          }

          if (existingRow.rowObject[key]) {
            existingRow.rowObject[key].push(subObj);
          } else {
            existingRow.rowObject[key] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssociations);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      return associations.reduce((indexes, {
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObject = rowObject[key];
        let subIndex = {
          rowObject: subObject
        };

        if (isList) {
          if (_.isNil(subObject[keyField])) {
            rowObject[key] = [];
            subObject = null;
          } else {
            rowObject[key] = [subObject];
          }
        } else if (_.isNil(subObject[keyField])) {
          subObject = rowObject[key] = null;
        }

        if (subObject) {
          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssociations);
          }

          indexes[key] = {
            [subObject[keyField]]: subIndex
          };
        }

        return indexes;
      }, {});
    }

    let arrayOfObjs = [];
    rows.forEach(row => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];
            let subObject = {
              [col.name]: value
            };
            tableCache[col.table] = subObject;
            setValueByPath(result, nodePath, subObject);
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwic2V0VmFsdWVCeVBhdGgiLCJEYXRlVGltZSIsIkVudGl0eU1vZGVsIiwiQnVzaW5lc3NFcnJvciIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJzZXJpYWxpemUiLCJkYXRhUmVjb3JkIiwiZm9yT3duIiwidmFsdWUiLCJmaWVsZE5hbWUiLCJmaWVsZE1ldGEiLCJ0eXBlIiwib29sVHlwZSIsIm5hbWUiLCJkYiIsImNvbm5lY3RvciIsInJhdyIsInRvSVNPIiwiaW5jbHVkZU9mZnNldCIsImNyZWF0ZV8iLCJhcmdzIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJjb2RlIiwibWVzc2FnZSIsInVwZGF0ZV8iLCJhZnRlckNyZWF0ZV8iLCJjb250ZXh0IiwiaW5zZXJ0SWQiLCJyZXN1bHQiLCJsYXRlc3QiLCJjcmVhdGVPcHRpb25zIiwiJHJldHJpZXZlQ3JlYXRlZCIsImNvbmRpdGlvbiIsImdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tIiwiZmluZE9uZV8iLCIkcXVlcnkiLCIkdW5ib3hpbmciLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiYmVmb3JlRGVsZXRlXyIsImRlbGV0ZU9wdGlvbnMiLCIkcmV0cmlldmVEZWxldGVkIiwiY29ubmVjdGlvbiIsImJlZ2luVHJhbnNhY3Rpb25fIiwiZXhpc3RpbmciLCJfcHJlcGFyZUFzc29jaWF0aW9ucyIsImFzc29jaWF0aW9ucyIsImNvbmNhdCIsInNvcnQiLCJjYWNoZSIsImhpZXJhcmNoeSIsImZvckVhY2giLCJhc3NvYyIsInJlbW90ZUVudGl0eSIsImJhc2UiLCJhbmNob3IiLCJhc3NvY0luZm8iLCJfZ2V0UmVsYXRlZEVudGl0eSIsInJlbW90ZUVudGl0eU5hbWUiLCJkZXRhaWwiLCJlbnRpdHkiLCJrZXlGaWVsZCIsImpvaW5UeXBlIiwiaXNMaXN0Iiwib3B0aW9uYWwiLCJsb2NhbEZpZWxkIiwicmVtb3RlRmllbGQiLCJjb25uZWN0ZWRCeSIsIm1vZGVsIiwic3ViQXNzb2NpYXRpb25zIiwicHVzaCIsImFzc29jUGF0aCIsInBhcnRzIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJjYWNoZU5vZGUiLCJsYXN0IiwicG9wIiwiY3VycmVudCIsImN1cnJlbnRBc3NvY0luZm8iLCJsZW5ndGgiLCJzaGlmdCIsIl9tYXBSZWNvcmRzVG9PYmplY3RzIiwicm93cyIsImNvbHVtbnMiLCJhbGlhc01hcCIsIm1haW5JbmRleCIsIm1lcmdlUmVjb3JkIiwiZXhpc3RpbmdSb3ciLCJyb3dPYmplY3QiLCJlYWNoIiwia2V5Iiwic3ViT2JqIiwic3ViSW5kZXhlcyIsInJvd0tleSIsImlzTmlsIiwiZXhpc3RpbmdTdWJSb3ciLCJjb25zb2xlIiwibG9nIiwiRXJyb3IiLCJzdWJJbmRleCIsImJ1aWxkU3ViSW5kZXhlcyIsInJlZHVjZSIsImluZGV4ZXMiLCJzdWJPYmplY3QiLCJhcnJheU9mT2JqcyIsInJvdyIsInRhYmxlQ2FjaGUiLCJpIiwiY29sIiwidGFibGUiLCJidWNrZXQiLCJub2RlUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUF3QkgsSUFBOUI7O0FBRUEsTUFBTTtBQUFFSSxFQUFBQTtBQUFGLElBQWVILE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU1JLFdBQVcsR0FBR0osT0FBTyxDQUFDLG1CQUFELENBQTNCOztBQUNBLE1BQU07QUFBRUssRUFB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RixHQUFHLENBQUNwRyxJQUFMLENBQU4sR0FBbUJMLEtBQW5CO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsZ0JBQUk0RyxRQUFRLEdBQUczQixRQUFRLENBQUN3QixHQUFHLENBQUNDLEtBQUwsQ0FBdkI7QUFDQSxnQkFBSU4sU0FBUyxHQUFHO0FBQUUsZUFBQ0ssR0FBRyxDQUFDcEcsSUFBTCxHQUFZTDtBQUFkLGFBQWhCO0FBQ0F1RyxZQUFBQSxVQUFVLENBQUNFLEdBQUcsQ0FBQ0MsS0FBTCxDQUFWLEdBQXdCTixTQUF4QjtBQUNBbkgsWUFBQUEsY0FBYyxDQUFDb0MsTUFBRCxFQUFTdUYsUUFBVCxFQUFtQlIsU0FBbkIsQ0FBZDtBQUNIO0FBQ0o7O0FBRUQsZUFBTy9FLE1BQVA7QUFDSCxPQWpCRCxFQWlCR2dFLFNBakJIO0FBbUJBLFVBQUlLLE1BQU0sR0FBR0wsU0FBUyxDQUFDLEtBQUs3RixJQUFMLENBQVVnRSxRQUFYLENBQXRCO0FBQ0EsVUFBSTRCLFdBQVcsR0FBR0YsU0FBUyxDQUFDUSxNQUFELENBQTNCOztBQUNBLFVBQUlOLFdBQUosRUFBaUI7QUFDYkQsUUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWNDLFNBQWQsRUFBeUJ4QyxTQUF6QixDQUFYO0FBQ0gsT0FGRCxNQUVPO0FBQ0h3RCxRQUFBQSxXQUFXLENBQUNwQyxJQUFaLENBQWlCb0IsU0FBakI7QUFDQUgsUUFBQUEsU0FBUyxDQUFDUSxNQUFELENBQVQsR0FBb0I7QUFDaEJMLFVBQUFBLFNBRGdCO0FBRWhCSSxVQUFBQSxVQUFVLEVBQUVRLGVBQWUsQ0FBQ1osU0FBRCxFQUFZeEMsU0FBWjtBQUZYLFNBQXBCO0FBSUg7QUFDSixLQWxDRDtBQW9DQSxXQUFPd0QsV0FBUDtBQUNIOztBQXZVc0M7O0FBMFUzQ1EsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekgsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBzZXRWYWx1ZUJ5UGF0aCB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcbmNvbnN0IHsgQnVzaW5lc3NFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgICBcbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhUmVjb3JkIFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXJpYWxpemUoZGF0YVJlY29yZCkge1xuICAgICAgICBfLmZvck93bihkYXRhUmVjb3JkLCAodmFsdWUsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpZWxkTWV0YSA9IHRoaXMubWV0YS5maWVsZHNbZmllbGROYW1lXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpZWxkTWV0YS50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUub29sVHlwZSA9PT0gJ1N5bWJvbFRva2VuJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHRoaXMuZGIuY29ubmVjdG9yLnJhdygnTk9XKCknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWVsZE1ldGEudHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgZGF0YVJlY29yZFtmaWVsZE5hbWVdID0gZGF0YVJlY29yZFtmaWVsZE5hbWVdID8gMSA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5jcmVhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKCdUaGUgbmV3IGVudGl0eSBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnRVJfRFVQX0VOVFJZJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyB1cGRhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci51cGRhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKCdUaGUgbmV3IGVudGl0eSBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnRVJfRFVQX0VOVFJZJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBQb3N0IGNyZWF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2NvbnRleHQuY3JlYXRlT3B0aW9uc10gLSBDcmVhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSBjcmVhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJDcmVhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXV0b0luY3JlbWVudCkge1xuICAgICAgICAgICAgbGV0IHsgaW5zZXJ0SWQgfSA9IGNvbnRleHQucmVzdWx0O1xuICAgICAgICAgICAgY29udGV4dC5sYXRlc3RbdGhpcy5tZXRhLmZlYXR1cmVzLmF1dG9JZC5maWVsZF0gPSBpbnNlcnRJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0LmNyZWF0ZU9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZCkge1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IHRoaXMuZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oY29udGV4dC5sYXRlc3QpO1xuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSBhd2FpdCB0aGlzLmZpbmRPbmVfKHsgJHF1ZXJ5OiBjb25kaXRpb24sICR1bmJveGluZzogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCB1cGRhdGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFt1cGRhdGVPcHRpb25zXSAtIFVwZGF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFt1cGRhdGVPcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IHVwZGF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlclVwZGF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC51cGRhdGVPcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0ID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogY29udGV4dC51cGRhdGVPcHRpb25zLiRxdWVyeSwgJHVuYm94aW5nOiB0cnVlfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCZWZvcmUgZGVsZXRpbmcgYW4gZW50aXR5LlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2NvbnRleHQuZGVsZXRlT3B0aW9uc10gLSBEZWxldGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkXSAtIFJldHJpZXZlIHRoZSByZWNlbnRseSBkZWxldGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYmVmb3JlRGVsZXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmRlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmNvbm5PcHRpb25zIHx8ICFjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zIHx8IChjb250ZXh0LmNvbm5PcHRpb25zID0ge30pO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuYmVnaW5UcmFuc2FjdGlvbl8oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5leGlzdGluZyA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkcXVlcnk6IGNvbnRleHQuZGVsZXRlT3B0aW9ucy4kcXVlcnksICR1bmJveGluZzogdHJ1ZX0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyogICAgICBlbnRpdHk6IDxyZW1vdGUgZW50aXR5PlxuICAgICAqICAgICAgam9pblR5cGU6ICdMRUZUIEpPSU58SU5ORVIgSk9JTnxGVUxMIE9VVEVSIEpPSU4nXG4gICAgICogICAgICBhbmNob3I6ICdsb2NhbCBwcm9wZXJ0eSB0byBwbGFjZSB0aGUgcmVtb3RlIGVudGl0eSdcbiAgICAgKiAgICAgIGxvY2FsRmllbGQ6IDxsb2NhbCBmaWVsZCB0byBqb2luPlxuICAgICAqICAgICAgcmVtb3RlRmllbGQ6IDxyZW1vdGUgZmllbGQgdG8gam9pbj5cbiAgICAgKiAgICAgIHN1YkFzc29jaWF0aW9uczogeyAuLi4gfSAgKi9cbiAgICBzdGF0aWMgX3ByZXBhcmVBc3NvY2lhdGlvbnMoYXNzb2NpYXRpb25zKSB7ICAgXG4gICAgICAgIGFzc29jaWF0aW9ucyA9IGFzc29jaWF0aW9ucy5jb25jYXQoKS5zb3J0KCk7XG4gICAgICAgIGxldCBjYWNoZSA9IHt9LCBoaWVyYXJjaHkgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGFzc29jaWF0aW9ucy5mb3JFYWNoKGFzc29jID0+IHtcbiAgICAgICAgICAgIGxldCBbIHJlbW90ZUVudGl0eSwgYmFzZSwgYW5jaG9yLCBhc3NvY0luZm8gXSA9IHRoaXMuX2dldFJlbGF0ZWRFbnRpdHkoYXNzb2MsIGNhY2hlKTtcbiAgICAgICAgICAgIGFzc2VydDogYXNzb2NJbmZvO1xuXG4gICAgICAgICAgICBsZXQgcmVtb3RlRW50aXR5TmFtZSA9IHJlbW90ZUVudGl0eS5tZXRhLm5hbWU7XG5cbiAgICAgICAgICAgIGxldCBkZXRhaWwgPSB7XG4gICAgICAgICAgICAgICAgZW50aXR5OiByZW1vdGVFbnRpdHlOYW1lLFxuICAgICAgICAgICAgICAgIGtleUZpZWxkOiByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZCxcbiAgICAgICAgICAgICAgICBqb2luVHlwZTogJ0xFRlQgSk9JTicsXG4gICAgICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgICAgIGlzTGlzdDogYXNzb2NJbmZvLmlzTGlzdCxcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogYXNzb2NJbmZvLm9wdGlvbmFsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYXNzb2NJbmZvLmlzTGlzdCkge1xuICAgICAgICAgICAgICAgIGRldGFpbC5sb2NhbEZpZWxkID0gY2FjaGVbYmFzZV0gPyBjYWNoZVtiYXNlXS5lbnRpdHkubWV0YS5rZXlGaWVsZCA6IHRoaXMubWV0YS5rZXlGaWVsZDtcbiAgICAgICAgICAgICAgICBkZXRhaWwucmVtb3RlRmllbGQgPSBhc3NvY0luZm8ucmVtb3RlRmllbGQgfHwgdGhpcy5tZXRhLm5hbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXNzb2NJbmZvLmNvbm5lY3RlZEJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5lbnRpdHkgPSBhc3NvY0luZm8uY29ubmVjdGVkQnk7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5rZXlGaWVsZCA9IHRoaXMuZGIubW9kZWwoYXNzb2NJbmZvLmNvbm5lY3RlZEJ5KS5tZXRhLmtleUZpZWxkO1xuXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5zdWJBc3NvY2lhdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiByZW1vdGVFbnRpdHlOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleUZpZWxkOiByZW1vdGVFbnRpdHkubWV0YS5rZXlGaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2luVHlwZTogJ0xFRlQgSk9JTicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yOiByZW1vdGVFbnRpdHlOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6IHJlbW90ZUVudGl0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlRmllbGQ6IHJlbW90ZUVudGl0eS5tZXRhLmtleUZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTGlzdDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRldGFpbC5sb2NhbEZpZWxkID0gYW5jaG9yO1xuICAgICAgICAgICAgICAgIGRldGFpbC5yZW1vdGVGaWVsZCA9IHJlbW90ZUVudGl0eS5tZXRhLmtleUZpZWxkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FjaGVbYmFzZV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVbYmFzZV0uZGV0YWlsLnN1YkFzc29jaWF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVtiYXNlXS5kZXRhaWwuc3ViQXNzb2NpYXRpb25zLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVtiYXNlXS5kZXRhaWwuc3ViQXNzb2NpYXRpb25zID0gWyBkZXRhaWwgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5wdXNoKGRldGFpbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlW2Fzc29jXSA9IHtcbiAgICAgICAgICAgICAgICBlbnRpdHk6IHJlbW90ZUVudGl0eSxcbiAgICAgICAgICAgICAgICBkZXRhaWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBoaWVyYXJjaHk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9nZXRSZWxhdGVkRW50aXR5KGFzc29jUGF0aCwgY2FjaGUpIHsgICAgICAgIFxuICAgICAgICBsZXQgcGFydHMgPSBhc3NvY1BhdGguc3BsaXQoJy4nKTsgICAgICAgIFxuICAgICAgICBsZXQgYmFzZSA9IHBhcnRzLnNsaWNlKDAsIC0xKS5qb2luKCcuJyk7ICAgICAgICBcblxuICAgICAgICBsZXQgY2FjaGVOb2RlID0gY2FjaGVbYmFzZV07XG4gICAgICAgIGlmIChjYWNoZU5vZGUpIHtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gcGFydHMucG9wKCk7XG4gICAgICAgICAgICBsZXQgYXNzb2NJbmZvID0gY2FjaGVOb2RlLmVudGl0eS5tZXRhLmFzc29jaWF0aW9uc1tsYXN0XTtcbiAgICAgICAgICAgIGlmICghYXNzb2NJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJ1c2luZXNzRXJyb3IoYFVua25vd24gYXNzb2NpYXRpb24gb2YgXCIke3RoaXMubWV0YS5uYW1lfVwiIGVudGl0eTogJHthc3NvY1BhdGh9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbIHRoaXMuZGIubW9kZWwoYXNzb2NJbmZvLmVudGl0eSksIGJhc2UsIGxhc3QsIGFzc29jSW5mbyBdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudGl0eSA9IHRoaXMsIGN1cnJlbnQsIGN1cnJlbnRBc3NvY0luZm87XG5cbiAgICAgICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICAgICAgY3VycmVudEFzc29jSW5mbyA9IGVudGl0eS5tZXRhLmFzc29jaWF0aW9uc1tjdXJyZW50XTtcbiAgICAgICAgICAgIGlmICghY3VycmVudEFzc29jSW5mbykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXNpbmVzc0Vycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIG9mIFwiJHt0aGlzLm1ldGEubmFtZX1cIiBlbnRpdHk6ICR7YXNzb2NQYXRofWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbnRpdHkgPSB0aGlzLmRiLm1vZGVsKGN1cnJlbnRBc3NvY0luZm8uZW50aXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIGVudGl0eSwgYmFzZSwgY3VycmVudCwgY3VycmVudEFzc29jSW5mbyBdO1xuICAgIH1cblxuICAgIHN0YXRpYyBfbWFwUmVjb3Jkc1RvT2JqZWN0cyhbcm93cywgY29sdW1ucywgYWxpYXNNYXBdLCBoaWVyYXJjaHkpIHtcbiAgICAgICAgbGV0IG1haW5JbmRleCA9IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGFzc29jaWF0aW9ucykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKGFzc29jaWF0aW9ucywgKHsga2V5RmllbGQsIGFuY2hvciwgaXNMaXN0LCBzdWJBc3NvY2lhdGlvbnMgfSkgPT4geyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gJzonICsgYW5jaG9yOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgc3ViT2JqID0gcm93T2JqZWN0W2tleV1cbiAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXhlcyA9IGV4aXN0aW5nUm93LnN1YkluZGV4ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcm93S2V5ID0gc3ViT2JqW2tleUZpZWxkXTtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc05pbChyb3dLZXkpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBsZXQgZXhpc3RpbmdTdWJSb3cgPSBzdWJJbmRleGVzICYmIHN1YkluZGV4ZXNbcm93S2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTdWJSb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jaWF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VSZWNvcmQoZXhpc3RpbmdTdWJSb3csIHN1Yk9iaiwgc3ViQXNzb2NpYXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXNzb2NpYXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncm93S2V5Jywgcm93S2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWJJbmRleGVzJywgc3ViSW5kZXhlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUm93LnJvd09iamVjdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Jvdy5yb3dPYmplY3Rba2V5XS5wdXNoKHN1Yk9iaik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Jvdy5yb3dPYmplY3Rba2V5XSA9IFsgc3ViT2JqIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJJbmRleCA9IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Q6IHN1Yk9iaiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkluZGV4LnN1YkluZGV4ZXMgPSBidWlsZFN1YkluZGV4ZXMoc3ViT2JqLCBzdWJBc3NvY2lhdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXhlc1tyb3dLZXldID0gc3ViSW5kZXg7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkU3ViSW5kZXhlcyhyb3dPYmplY3QsIGFzc29jaWF0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGFzc29jaWF0aW9ucy5yZWR1Y2UoKGluZGV4ZXMsIHsga2V5RmllbGQsIGFuY2hvciwgaXNMaXN0LCBzdWJBc3NvY2lhdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSAnOicrYW5jaG9yO1xuICAgICAgICAgICAgICAgIGxldCBzdWJPYmplY3QgPSByb3dPYmplY3Rba2V5XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ID0geyBcbiAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0OiBzdWJPYmplY3QgXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0xpc3QpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc05pbChzdWJPYmplY3Rba2V5RmllbGRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0W2tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk9iamVjdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Rba2V5XSA9IFsgc3ViT2JqZWN0IF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaXNOaWwoc3ViT2JqZWN0W2tleUZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViT2JqZWN0ID0gcm93T2JqZWN0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdWJPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkFzc29jaWF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViSW5kZXguc3ViSW5kZXhlcyA9IGJ1aWxkU3ViSW5kZXhlcyhzdWJPYmplY3QsIHN1YkFzc29jaWF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbc3ViT2JqZWN0W2tleUZpZWxkXV06IHN1YkluZGV4XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgICAgICAgICB9LCB7fSk7ICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFycmF5T2ZPYmpzID0gW107XG5cbiAgICAgICAgcm93cy5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICBsZXQgcm93T2JqZWN0ID0ge307IC8vIGhhc2gtc3R5bGUgZGF0YSByb3dcbiAgICAgICAgICAgIGxldCB0YWJsZUNhY2hlID0ge307IC8vIGZyb20gYWxpYXMgdG8gY2hpbGQgcHJvcCBvZiByb3dPYmplY3RcblxuICAgICAgICAgICAgcm93LnJlZHVjZSgocmVzdWx0LCB2YWx1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2wgPSBjb2x1bW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjb2wudGFibGUgPT09ICdBJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbY29sLm5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWNrZXQgPSB0YWJsZUNhY2hlW2NvbC50YWJsZV07ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0W2NvbC5uYW1lXSA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZVBhdGggPSBhbGlhc01hcFtjb2wudGFibGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN1Yk9iamVjdCA9IHsgW2NvbC5uYW1lXTogdmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ2FjaGVbY29sLnRhYmxlXSA9IHN1Yk9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlQnlQYXRoKHJlc3VsdCwgbm9kZVBhdGgsIHN1Yk9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSwgcm93T2JqZWN0KTsgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcm93S2V5ID0gcm93T2JqZWN0W3RoaXMubWV0YS5rZXlGaWVsZF07XG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdSb3cgPSBtYWluSW5kZXhbcm93S2V5XTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1Jvdykge1xuICAgICAgICAgICAgICAgIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGhpZXJhcmNoeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5T2ZPYmpzLnB1c2gocm93T2JqZWN0KTtcbiAgICAgICAgICAgICAgICBtYWluSW5kZXhbcm93S2V5XSA9IHsgXG4gICAgICAgICAgICAgICAgICAgIHJvd09iamVjdCwgXG4gICAgICAgICAgICAgICAgICAgIHN1YkluZGV4ZXM6IGJ1aWxkU3ViSW5kZXhlcyhyb3dPYmplY3QsIGhpZXJhcmNoeSlcbiAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFycmF5T2ZPYmpzO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNeVNRTEVudGl0eU1vZGVsOyJdfQ==