"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  setValueByPath
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

const {
  BusinessError
} = require('../../Errors');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static serialize(dataRecord) {
    _.forOwn(dataRecord, (value, fieldName) => {
      let fieldMeta = this.meta.fields[fieldName];

      if (fieldMeta.type === 'datetime') {
        if (typeof value === 'object' && value.oolType === 'SymbolToken') {
          if (value.name === 'now') {
            dataRecord[fieldName] = this.db.connector.raw('NOW()');
          }
        }

        if (value instanceof DateTime) {
          dataRecord[fieldName] = value.toISO({
            includeOffset: false
          });
        }
      } else if (fieldMeta.type === 'boolean') {
        dataRecord[fieldName] = dataRecord[fieldName] ? 1 : 0;
      }
    });
  }

  static async create_(...args) {
    try {
      return await super.create_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message + ` while creating a new "${this.meta.name}".`);
      }

      throw error;
    }
  }

  static async update_(...args) {
    try {
      return await super.update_(...args);
    } catch (error) {
      let errorCode = error.code;

      if (errorCode === 'ER_NO_REFERENCED_ROW_2') {
        throw new BusinessError('The new entity is referencing to an unexisting entity.');
      } else if (errorCode === 'ER_DUP_ENTRY') {
        throw new BusinessError(error.message);
      }

      throw error;
    }
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $query: condition,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $query: context.updateOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $query: context.deleteOptions.$query,
        $unboxing: true
      }, context.connOptions);
    }
  }

  static _prepareAssociations(associations) {
    associations = associations.concat().sort();
    let cache = {},
        hierarchy = [];
    associations.forEach(assoc => {
      let [remoteEntity, base, anchor, assocInfo] = this._getRelatedEntity(assoc, cache);

      if (!assocInfo) {
        throw new Error("Assertion failed: assocInfo");
      }

      let remoteEntityName = remoteEntity.meta.name;
      let detail = {
        entity: remoteEntityName,
        keyField: remoteEntity.meta.keyField,
        joinType: 'LEFT JOIN',
        anchor,
        isList: assocInfo.isList,
        optional: assocInfo.optional
      };

      if (assocInfo.connectedBy) {
        detail.localField = cache[base] ? cache[base].entity.meta.keyField : this.meta.keyField;
        detail.remoteField = assocInfo.remoteField || this.meta.name;
        detail.entity = assocInfo.connectedBy;
        detail.keyField = this.db.model(assocInfo.connectedBy).meta.keyField;

        if (assocInfo.connectedWith) {
          detail.connectedWith = assocInfo.connectedWith;
        }

        detail.subAssociations = [{
          entity: remoteEntityName,
          keyField: remoteEntity.meta.keyField,
          joinType: 'LEFT JOIN',
          anchor: assocInfo.refersToField,
          localField: assocInfo.refersToField,
          remoteField: remoteEntity.meta.keyField,
          isList: false
        }];
      } else if (assoc.isList) {
        detail.localField = cache[base] ? cache[base].entity.meta.keyField : this.meta.keyField;
        detail.remoteField = assocInfo.remoteField || this.meta.name;
      } else {
        detail.localField = anchor;
        detail.remoteField = remoteEntity.meta.keyField;
      }

      if (cache[base]) {
        if (cache[base].detail.subAssociations) {
          cache[base].detail.subAssociations.push(detail);
        } else {
          cache[base].detail.subAssociations = [detail];
        }
      } else {
        hierarchy.push(detail);
      }

      cache[assoc] = {
        entity: remoteEntity,
        detail
      };
    });
    return hierarchy;
  }

  static _getRelatedEntity(assocPath, cache) {
    let parts = assocPath.split('.');
    let base = parts.slice(0, -1).join('.');
    let cacheNode = cache[base];

    if (cacheNode) {
      let last = parts.pop();
      let assocInfo = cacheNode.entity.meta.associations[last];

      if (!assocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      return [this.db.model(assocInfo.entity), base, last, assocInfo];
    }

    let entity = this,
        current,
        currentAssocInfo;

    while (parts.length > 0) {
      current = parts.shift();
      currentAssocInfo = entity.meta.associations[current];

      if (!currentAssocInfo) {
        throw new BusinessError(`Unknown association of "${this.meta.name}" entity: ${assocPath}`);
      }

      entity = this.db.model(currentAssocInfo.entity);
    }

    return [entity, base, current, currentAssocInfo];
  }

  static _mapRecordsToObjects([rows, columns, aliasMap], hierarchy) {
    let mainIndex = {};

    function mergeRecord(existingRow, rowObject, associations) {
      _.each(associations, ({
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObj = rowObject[key];
        let subIndexes = existingRow.subIndexes[key];
        let rowKey = subObj[keyField];
        if (_.isNil(rowKey)) return;
        let existingSubRow = subIndexes && subIndexes[rowKey];

        if (existingSubRow) {
          if (subAssociations) {
            mergeRecord(existingSubRow, subObj, subAssociations);
          }
        } else {
          if (!isList) {
            throw new Error('');
          }

          if (existingRow.rowObject[key]) {
            existingRow.rowObject[key].push(subObj);
          } else {
            existingRow.rowObject[key] = [subObj];
          }

          let subIndex = {
            rowObject: subObj
          };

          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObj, subAssociations);
          }

          subIndexes[rowKey] = subIndex;
        }
      });
    }

    function buildSubIndexes(rowObject, associations) {
      return associations.reduce((indexes, {
        keyField,
        anchor,
        isList,
        subAssociations
      }) => {
        let key = ':' + anchor;
        let subObject = rowObject[key];
        let subIndex = {
          rowObject: subObject
        };

        if (isList) {
          if (_.isNil(subObject[keyField])) {
            rowObject[key] = [];
            subObject = null;
          } else {
            rowObject[key] = [subObject];
          }
        } else if (_.isNil(subObject[keyField])) {
          subObject = rowObject[key] = null;
        }

        if (subObject) {
          if (subAssociations) {
            subIndex.subIndexes = buildSubIndexes(subObject, subAssociations);
          }

          indexes[key] = {
            [subObject[keyField]]: subIndex
          };
        }

        return indexes;
      }, {});
    }

    let arrayOfObjs = [];
    rows.forEach(row => {
      let rowObject = {};
      let tableCache = {};
      row.reduce((result, value, i) => {
        let col = columns[i];

        if (col.table === 'A') {
          result[col.name] = value;
        } else {
          let bucket = tableCache[col.table];

          if (bucket) {
            bucket[col.name] = value;
          } else {
            let nodePath = aliasMap[col.table];
            let subObject = {
              [col.name]: value
            };
            tableCache[col.table] = subObject;
            setValueByPath(result, nodePath, subObject);
          }
        }

        return result;
      }, rowObject);
      let rowKey = rowObject[this.meta.keyField];
      let existingRow = mainIndex[rowKey];

      if (existingRow) {
        mergeRecord(existingRow, rowObject, hierarchy);
      } else {
        arrayOfObjs.push(rowObject);
        mainIndex[rowKey] = {
          rowObject,
          subIndexes: buildSubIndexes(rowObject, hierarchy)
        };
      }
    });
    return arrayOfObjs;
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,