"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  DateTime
} = require('luxon');

const EntityModel = require('../../EntityModel');

class MySQLEntityModel extends EntityModel {
  static get hasAutoIncrement() {
    let autoId = this.meta.features.autoId;
    return autoId && this.meta.fields[autoId.field].autoIncrementId;
  }

  static serialize(dataRecord) {
    _.forOwn(dataRecord, (value, fieldName) => {
      let fieldMeta = this.meta.fields[fieldName];

      if (fieldMeta.type === 'datetime' && value instanceof DateTime) {
        dataRecord[fieldName] = value.toISO({
          includeOffset: false
        });
      }
    });
  }

  static async afterCreate_(context) {
    if (this.hasAutoIncrement) {
      let {
        insertId
      } = context.result;
      context.latest[this.meta.features.autoId.field] = insertId;
    }

    if (context.createOptions.$retrieveCreated) {
      let condition = this.getUniqueKeyValuePairsFrom(context.latest);
      context.latest = await this.findOne_({
        $where: condition,
        $fetchArray: true
      }, context.connOptions);
    }
  }

  static async afterUpdate_(context) {
    if (context.updateOptions.$retrieveUpdated) {
      context.latest = await this.findOne_({
        $where: context.updateOptions.$where,
        $fetchArray: true
      }, context.connOptions);
    }
  }

  static async beforeDelete_(context) {
    if (context.deleteOptions.$retrieveDeleted) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      context.existing = await this.findOne_({
        $where: context.deleteOptions.$where,
        $fetchArray: true
      }, context.connOptions);
    }
  }

}

module.exports = MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ydW50aW1lL2RyaXZlcnMvbXlzcWwvRW50aXR5TW9kZWwuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiRGF0ZVRpbWUiLCJFbnRpdHlNb2RlbCIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJzZXJpYWxpemUiLCJkYXRhUmVjb3JkIiwiZm9yT3duIiwidmFsdWUiLCJmaWVsZE5hbWUiLCJmaWVsZE1ldGEiLCJ0eXBlIiwidG9JU08iLCJpbmNsdWRlT2Zmc2V0IiwiYWZ0ZXJDcmVhdGVfIiwiY29udGV4dCIsImluc2VydElkIiwicmVzdWx0IiwibGF0ZXN0IiwiY3JlYXRlT3B0aW9ucyIsIiRyZXRyaWV2ZUNyZWF0ZWQiLCJjb25kaXRpb24iLCJnZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbSIsImZpbmRPbmVfIiwiJHdoZXJlIiwiJGZldGNoQXJyYXkiLCJjb25uT3B0aW9ucyIsImFmdGVyVXBkYXRlXyIsInVwZGF0ZU9wdGlvbnMiLCIkcmV0cmlldmVVcGRhdGVkIiwiYmVmb3JlRGVsZXRlXyIsImRlbGV0ZU9wdGlvbnMiLCIkcmV0cmlldmVEZWxldGVkIiwiY29ubmVjdGlvbiIsImRiIiwiY29ubmVjdG9yIiwiYmVnaW5UcmFuc2FjdGlvbl8iLCJleGlzdGluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUYsSUFBZDs7QUFFQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBZUYsT0FBTyxDQUFDLE9BQUQsQ0FBNUI7O0FBQ0EsTUFBTUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsbUJBQUQsQ0FBM0I7O0FBS0Es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LENBQUNXLFdBQWxGLENBQXpCO0FBQ0g7QUFDSjs7QUFsRXNDOztBQXFFM0NZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFDLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgXyB9ID0gVXRpbDtcblxuY29uc3QgeyBEYXRlVGltZSB9ID0gcmVxdWlyZSgnbHV4b24nKTtcbmNvbnN0IEVudGl0eU1vZGVsID0gcmVxdWlyZSgnLi4vLi4vRW50aXR5TW9kZWwnKTtcblxuLyoqXG4gKiBNeVNRTCBlbnRpdHkgbW9kZWwgY2xhc3MuXG4gKi9cbmNsYXNzIE15U1FMRW50aXR5TW9kZWwgZXh0ZW5kcyBFbnRpdHlNb2RlbCB7ICAgIFxuICAgIHN0YXRpYyBnZXQgaGFzQXV0b0luY3JlbWVudCgpIHtcbiAgICAgICAgbGV0IGF1dG9JZCA9IHRoaXMubWV0YS5mZWF0dXJlcy5hdXRvSWQ7XG4gICAgICAgIHJldHVybiBhdXRvSWQgJiYgdGhpcy5tZXRhLmZpZWxkc1thdXRvSWQuZmllbGRdLmF1dG9JbmNyZW1lbnRJZDsgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIHZhbHVlIGludG8gZGF0YWJhc2UgYWNjZXB0YWJsZSBmb3JtYXQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFSZWNvcmQgXG4gICAgICovXG4gICAgc3RhdGljIHNlcmlhbGl6ZShkYXRhUmVjb3JkKSB7XG4gICAgICAgIF8uZm9yT3duKGRhdGFSZWNvcmQsICh2YWx1ZSwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmllbGRNZXRhID0gdGhpcy5tZXRhLmZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZmllbGRNZXRhLnR5cGUgPT09ICdkYXRldGltZScgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgICAgIGRhdGFSZWNvcmRbZmllbGROYW1lXSA9IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgY3JlYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5jcmVhdGVPcHRpb25zXSAtIENyZWF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtjcmVhdGVPcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IGNyZWF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlckNyZWF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBdXRvSW5jcmVtZW50KSB7XG4gICAgICAgICAgICBsZXQgeyBpbnNlcnRJZCB9ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdFt0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkLmZpZWxkXSA9IGluc2VydElkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQuY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSB7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gdGhpcy5nZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbShjb250ZXh0LmxhdGVzdCk7XG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkd2hlcmU6IGNvbmRpdGlvbiwgJGZldGNoQXJyYXk6IHRydWV9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbdXBkYXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbdXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkXSAtIFJldHJpZXZlIHRoZSBuZXdseSB1cGRhdGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJVcGRhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQudXBkYXRlT3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkd2hlcmU6IGNvbnRleHQudXBkYXRlT3B0aW9ucy4kd2hlcmUsICRmZXRjaEFycmF5OiB0cnVlfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCZWZvcmUgZGVsZXRpbmcgYW4gZW50aXR5LlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2NvbnRleHQuZGVsZXRlT3B0aW9uc10gLSBEZWxldGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkXSAtIFJldHJpZXZlIHRoZSByZWNlbnRseSBkZWxldGVkIHJlY29yZCBmcm9tIGRiLiBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYmVmb3JlRGVsZXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmRlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmNvbm5PcHRpb25zIHx8ICFjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zIHx8IChjb250ZXh0LmNvbm5PcHRpb25zID0ge30pO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuYmVnaW5UcmFuc2FjdGlvbl8oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5leGlzdGluZyA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkd2hlcmU6IGNvbnRleHQuZGVsZXRlT3B0aW9ucy4kd2hlcmUsICRmZXRjaEFycmF5OiB0cnVlfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXlTUUxFbnRpdHlNb2RlbDsiXX0=