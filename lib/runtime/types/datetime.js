"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  DateTime
} = require('luxon');

const any = require('./any');

module.exports = {
  name: 'datetime',
  typeObject: DateTime,
  alias: ['date', 'time', 'timestamp'],
  sanitize: (value, info, i18n) => {
    if (value instanceof Date) {
      return i18n ? i18n.datetime.fromJSDate(sanitized) : DateTime.fromJSDate(sanitized);
    }

    if (typeof value === 'string') {
      return i18n ? i18n.datetime.fromISO(value) : DateTime.fromISO(value, {
        setZone: true
      });
    }

    if (typeof value === 'number') {
      return i18n ? i18n.datetime.fromMillis(value) : DateTime.fromMillis(value);
    }

    if (_.isPlainObject(value)) {
      return i18n ? i18n.datetime.fromObject(value) : DateTime.fromObject(value);
    }

    throw new TypeError(`Invalid datetime: ${value}`);
  },
  defaultValue: 0,
  generate: (info, i18n) => i18n ? i18n.now() : DateTime.local(),
  serialize: value => value.toISO({
    includeOffset: false
  }),
  qualifiers: any.qualifiers.concat(['timezone'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3R5cGVzL2RhdGV0aW1lLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiRGF0ZVRpbWUiLCJhbnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInR5cGVPYmplY3QiLCJhbGlhcyIsInNhbml0aXplIiwidmFsdWUiLCJpbmZvIiwiaTE4biIsIkRhdGUiLCJkYXRldGltZSIsImZyb21KU0RhdGUiLCJzYW5pdGl6ZWQiLCJmcm9tSVNPIiwic2V0Wm9uZSIsImZyb21NaWxsaXMiLCJpc1BsYWluT2JqZWN0IiwiZnJvbU9iamVjdCIsIlR5cGVFcnJvciIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwibm93IiwibG9jYWwiLCJzZXJpYWxpemUiLCJ0b0lTTyIsImluY2x1ZGVPZmZzZXQiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWVELE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsVUFETztBQUdiQyxFQUFBQSxVQUFVLEVBQUVMLFFBSEM7QUFLYk0sRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixFQUFVLE1BQVYsRUFBa0IsV0FBbEIsQ0FMTTtBQU9iQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUYsS0FBSyxZQUFZRyxJQUFyQixFQUEyQjtBQUN2QixhQUFPRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsUUFBTCxDQUFjQyxVQUFkLENBQXlCQyxTQUF6QixDQUFILEdBQXlDZCxRQUFRLENBQUNhLFVBQVQsQ0FBb0JDLFNBQXBCLENBQXBEO0FBQ0g7O0FBRUQsUUFBSSxPQUFPTixLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9FLElBQUksR0FBR0EsSUFBSSxDQUFDRSxRQUFMLENBQWNHLE9BQWQsQ0FBc0JQLEtBQXRCLENBQUgsR0FBa0NSLFFBQVEsQ0FBQ2UsT0FBVCxDQUFpQlAsS0FBakIsRUFBd0I7QUFBQ1EsUUFBQUEsT0FBTyxFQUFFO0FBQVYsT0FBeEIsQ0FBN0M7QUFDSDs7QUFFRCxRQUFJLE9BQU9SLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsYUFBT0UsSUFBSSxHQUFHQSxJQUFJLENBQUNFLFFBQUwsQ0FBY0ssVUFBZCxDQUF5QlQsS0FBekIsQ0FBSCxHQUFxQ1IsUUFBUSxDQUFDaUIsVUFBVCxDQUFvQlQsS0FBcEIsQ0FBaEQ7QUFDSDs7QUFFRCxRQUFJVixDQUFDLENBQUNvQixhQUFGLENBQWdCVixLQUFoQixDQUFKLEVBQTRCO0FBQ3hCLGFBQU9FLElBQUksR0FBR0EsSUFBSSxDQUFDRSxRQUFMLENBQWNPLFVBQWQsQ0FBeUJYLEtBQXpCLENBQUgsR0FBcUNSLFFBQVEsQ0FBQ21CLFVBQVQsQ0FBb0JYLEtBQXBCLENBQWhEO0FBQ0g7O0FBRUQsVUFBTSxJQUFJWSxTQUFKLENBQWUscUJBQW9CWixLQUFNLEVBQXpDLENBQU47QUFDSCxHQXpCWTtBQTJCYmEsRUFBQUEsWUFBWSxFQUFFLENBM0JEO0FBNkJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ2IsSUFBRCxFQUFPQyxJQUFQLEtBQWdCQSxJQUFJLEdBQUdBLElBQUksQ0FBQ2EsR0FBTCxFQUFILEdBQWdCdkIsUUFBUSxDQUFDd0IsS0FBVCxFQTdCakM7QUErQmJDLEVBQUFBLFNBQVMsRUFBRWpCLEtBQUssSUFBSUEsS0FBSyxDQUFDa0IsS0FBTixDQUFZO0FBQUVDLElBQUFBLGFBQWEsRUFBRTtBQUFqQixHQUFaLENBL0JQO0FBaUNiQyxFQUFBQSxVQUFVLEVBQUUzQixHQUFHLENBQUMyQixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsVUFEOEIsQ0FBdEI7QUFqQ0MsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgXyA9IHJlcXVpcmUoJ3JrLXV0aWxzJykuXztcbmNvbnN0IHsgRGF0ZVRpbWUgfSA9IHJlcXVpcmUoJ2x1eG9uJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnZGF0ZXRpbWUnLFxuXG4gICAgdHlwZU9iamVjdDogRGF0ZVRpbWUsXG5cbiAgICBhbGlhczogWyAnZGF0ZScsICd0aW1lJywgJ3RpbWVzdGFtcCcgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4gPyBpMThuLmRhdGV0aW1lLmZyb21KU0RhdGUoc2FuaXRpemVkKSA6IERhdGVUaW1lLmZyb21KU0RhdGUoc2FuaXRpemVkKTtcbiAgICAgICAgfSBcbiAgICAgICAgXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaTE4biA/IGkxOG4uZGF0ZXRpbWUuZnJvbUlTTyh2YWx1ZSkgOiBEYXRlVGltZS5mcm9tSVNPKHZhbHVlLCB7c2V0Wm9uZTogdHJ1ZX0pO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tTWlsbGlzKHZhbHVlKSA6IERhdGVUaW1lLmZyb21NaWxsaXModmFsdWUpO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tT2JqZWN0KHZhbHVlKSA6IERhdGVUaW1lLmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkYXRldGltZTogJHt2YWx1ZX1gKTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiAwLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiBpMThuID8gaTE4bi5ub3coKSA6IERhdGVUaW1lLmxvY2FsKCksXG5cbiAgICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSksXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAndGltZXpvbmUnXG4gICAgXSlcbn07Il19