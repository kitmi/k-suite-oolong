"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  isNothing
} = require('../../utils/lang');

const any = require('./any');

module.exports = {
  name: 'object',
  alias: ['json'],
  sanitize: (value, info, i18n) => {
    if (_.isPlainObject(value)) return value;
    if (_.isObjectLike(value)) return _.toPlainObject(value);

    if (typeof value === 'string') {
      let trimmed = value.trim();

      if (trimmed.startsWith('{') && trimmed.endsWith('}')) {
        return JSON.parse(trimmed);
      }
    }

    throw new TypeError(`Invalid object: ${value}`);
  },
  defaultValue: {},
  generate: (info, i18n) => null,
  serialize: value => isNothing(value) ? null : JOSN.stringify(value),
  qualifiers: any.qualifiers.concat([])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3R5cGVzL29iamVjdC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImlzTm90aGluZyIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJpc1BsYWluT2JqZWN0IiwiaXNPYmplY3RMaWtlIiwidG9QbGFpbk9iamVjdCIsInRyaW1tZWQiLCJ0cmltIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwiSlNPTiIsInBhcnNlIiwiVHlwZUVycm9yIiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJzZXJpYWxpemUiLCJKT1NOIiwic3RyaW5naWZ5IiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVAsQ0FBb0JELENBQTlCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLGtCQUFELENBQTdCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsUUFETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxNQUFGLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlYLENBQUMsQ0FBQ1ksYUFBRixDQUFnQkgsS0FBaEIsQ0FBSixFQUE0QixPQUFPQSxLQUFQO0FBRTVCLFFBQUlULENBQUMsQ0FBQ2EsWUFBRixDQUFlSixLQUFmLENBQUosRUFBMkIsT0FBT1QsQ0FBQyxDQUFDYyxhQUFGLENBQWdCTCxLQUFoQixDQUFQOztBQUUzQixRQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsVUFBSU0sT0FBTyxHQUFHTixLQUFLLENBQUNPLElBQU4sRUFBZDs7QUFDQSxVQUFJRCxPQUFPLENBQUNFLFVBQVIsQ0FBbUIsR0FBbkIsS0FBMkJGLE9BQU8sQ0FBQ0csUUFBUixDQUFpQixHQUFqQixDQUEvQixFQUFzRDtBQUNsRCxlQUFPQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsT0FBWCxDQUFQO0FBQ0g7QUFDSjs7QUFFRCxVQUFNLElBQUlNLFNBQUosQ0FBZSxtQkFBa0JaLEtBQU0sRUFBdkMsQ0FBTjtBQUNILEdBbEJZO0FBb0JiYSxFQUFBQSxZQUFZLEVBQUUsRUFwQkQ7QUFzQmJDLEVBQUFBLFFBQVEsRUFBRSxDQUFDYixJQUFELEVBQU9DLElBQVAsS0FBZ0IsSUF0QmI7QUF3QmJhLEVBQUFBLFNBQVMsRUFBR2YsS0FBRCxJQUFXUCxTQUFTLENBQUNPLEtBQUQsQ0FBVCxHQUFtQixJQUFuQixHQUEwQmdCLElBQUksQ0FBQ0MsU0FBTCxDQUFlakIsS0FBZixDQXhCbkM7QUEwQmJrQixFQUFBQSxVQUFVLEVBQUV4QixHQUFHLENBQUN3QixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsRUFBdEI7QUExQkMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgXyA9IHJlcXVpcmUoJ3JrLXV0aWxzJykuXztcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9sYW5nJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnb2JqZWN0JyxcblxuICAgIGFsaWFzOiBbICdqc29uJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4bikgPT4ge1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIGlmIChfLmlzT2JqZWN0TGlrZSh2YWx1ZSkpIHJldHVybiBfLnRvUGxhaW5PYmplY3QodmFsdWUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsZXQgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ3snKSAmJiB0cmltbWVkLmVuZHNXaXRoKCd9JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0cmltbWVkKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG9iamVjdDogJHt2YWx1ZX1gKTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiB7fSxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gbnVsbCxcblxuICAgIHNlcmlhbGl6ZTogKHZhbHVlKSA9PiBpc05vdGhpbmcodmFsdWUpID8gbnVsbCA6IEpPU04uc3RyaW5naWZ5KHZhbHVlKSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgXSlcbn07Il19