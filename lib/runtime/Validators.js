"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const validator = require('validator');

module.exports = _.pick(validator, ['equals', 'contains', 'matches', 'isEmail', 'isURL', 'isMACAddress', 'isIP', 'isFQDN', 'isBoolean', 'isAlpha', 'isAlphanumeric', 'isNumeric', 'isPort', 'isLowercase', 'isUppercase', 'isAscii', 'isFullWidth', 'isHalfWidth', 'isVariableWidth', 'isMultibyte', 'isSurrogatePair', 'isInt', 'isFloat', 'isDecimal', 'isHexadecimal', 'isDivisibleBy', 'isHexColor', 'isISRC', 'isMD5', 'isHash', 'isJSON', 'isEmpty', 'isLength', 'isByteLength', 'isUUID', 'isMongoId', 'isAfter', 'isBefore', 'isIn', 'isCreditCard', 'isISIN', 'isISBN', 'isISSN', 'isMobilePhone', 'isPostalCode', 'isCurrency', 'isISO8601', 'isISO31661Alpha2', 'isBase64', 'isDataURI', 'isMimeType', 'isLatLong']);

module.exports.min = function (value, minValue) {
  return value >= minValue;
};

module.exports.max = function (value, maxValue) {
  return value <= maxValue;
};

module.exports.gt = function (value, minValue) {
  return value > minValue;
};

module.exports.lt = function (value, maxValue) {
  return value < maxValue;
};

module.exports.maxLength = function (value, maxLength) {
  return value.length <= maxLength;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL1ZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwidmFsaWRhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInBpY2siLCJtaW4iLCJ2YWx1ZSIsIm1pblZhbHVlIiwibWF4IiwibWF4VmFsdWUiLCJndCIsImx0IiwibWF4TGVuZ3RoIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFGLElBQWQ7O0FBRUEsTUFBTUcsU0FBUyxHQUFHRixPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxDQUFDLENBQUNJLElBQUYsQ0FBT0gsU0FBUCxFQUFrQixDQUMvQixRQUQrQixFQUUvQixVQUYrQixFQUcvQixTQUgrQixFQUkvQixTQUorQixFQUsvQixPQUwrQixFQU0vQixjQU4rQixFQU8vQixNQVArQixFQVEvQixRQVIrQixFQVMvQixXQVQrQixFQVUvQixTQVYrQixFQVcvQixnQkFYK0IsRUFZL0IsV0FaK0IsRUFhL0IsUUFiK0IsRUFjL0IsYUFkK0IsRUFlL0IsYUFmK0IsRUFnQi9CLFNBaEIrQixFQWlCL0IsYUFqQitCLEVBa0IvQixhQWxCK0IsRUFtQi9CLGlCQW5CK0IsRUFvQi9CLGFBcEIrQixFQXFCL0IsaUJBckIrQixFQXNCL0IsT0F0QitCLEVBdUIvQixTQXZCK0IsRUF3Qi9CLFdBeEIrQixFQXlCL0IsZUF6QitCLEVBMEIvQixlQTFCK0IsRUEyQi9CLFlBM0IrQixFQTRCL0IsUUE1QitCLEVBNkIvQixPQTdCK0IsRUE4Qi9CLFFBOUIrQixFQStCL0IsUUEvQitCLEVBZ0MvQixTQWhDK0IsRUFpQy9CLFVBakMrQixFQWtDL0IsY0FsQytCLEVBbUMvQixRQW5DK0IsRUFvQy9CLFdBcEMrQixFQXFDL0IsU0FyQytCLEVBc0MvQixVQXRDK0IsRUF1Qy9CLE1BdkMrQixFQXdDL0IsY0F4QytCLEVBeUMvQixRQXpDK0IsRUEwQy9CLFFBMUMrQixFQTJDL0IsUUEzQytCLEVBNEMvQixlQTVDK0IsRUE2Qy9CLGNBN0MrQixFQThDL0IsWUE5QytCLEVBK0MvQixXQS9DK0IsRUFnRC9CLGtCQWhEK0IsRUFpRC9CLFVBakQrQixFQWtEL0IsV0FsRCtCLEVBbUQvQixZQW5EK0IsRUFvRC9CLFdBcEQrQixDQUFsQixDQUFqQjs7QUF1REFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRSxHQUFmLEdBQXFCLFVBQVVDLEtBQVYsRUFBaUJDLFFBQWpCLEVBQTJCO0FBQzVDLFNBQU9ELEtBQUssSUFBSUMsUUFBaEI7QUFDSCxDQUZEOztBQUlBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZUssR0FBZixHQUFxQixVQUFVRixLQUFWLEVBQWlCRyxRQUFqQixFQUEyQjtBQUM1QyxTQUFPSCxLQUFLLElBQUlHLFFBQWhCO0FBQ0gsQ0FGRDs7QUFJQVAsTUFBTSxDQUFDQyxPQUFQLENBQWVPLEVBQWYsR0FBb0IsVUFBVUosS0FBVixFQUFpQkMsUUFBakIsRUFBMkI7QUFDM0MsU0FBT0QsS0FBSyxHQUFHQyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQUwsTUFBTSxDQUFDQyxPQUFQLENBQWVRLEVBQWYsR0FBb0IsVUFBVUwsS0FBVixFQUFpQkcsUUFBakIsRUFBMkI7QUFDM0MsU0FBT0gsS0FBSyxHQUFHRyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQVAsTUFBTSxDQUFDQyxPQUFQLENBQWVTLFNBQWYsR0FBMkIsVUFBVU4sS0FBVixFQUFpQk0sU0FBakIsRUFBNEI7QUFDbkQsU0FBT04sS0FBSyxDQUFDTyxNQUFOLElBQWdCRCxTQUF2QjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IF8gfSA9IFV0aWw7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJ3ZhbGlkYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF8ucGljayh2YWxpZGF0b3IsIFsgXG4gICAgJ2VxdWFscycsXG4gICAgJ2NvbnRhaW5zJyxcbiAgICAnbWF0Y2hlcycsXG4gICAgJ2lzRW1haWwnLFxuICAgICdpc1VSTCcsXG4gICAgJ2lzTUFDQWRkcmVzcycsXG4gICAgJ2lzSVAnLFxuICAgICdpc0ZRRE4nLFxuICAgICdpc0Jvb2xlYW4nLFxuICAgICdpc0FscGhhJyxcbiAgICAnaXNBbHBoYW51bWVyaWMnLFxuICAgICdpc051bWVyaWMnLFxuICAgICdpc1BvcnQnLFxuICAgICdpc0xvd2VyY2FzZScsXG4gICAgJ2lzVXBwZXJjYXNlJyxcbiAgICAnaXNBc2NpaScsXG4gICAgJ2lzRnVsbFdpZHRoJyxcbiAgICAnaXNIYWxmV2lkdGgnLFxuICAgICdpc1ZhcmlhYmxlV2lkdGgnLFxuICAgICdpc011bHRpYnl0ZScsXG4gICAgJ2lzU3Vycm9nYXRlUGFpcicsXG4gICAgJ2lzSW50JyxcbiAgICAnaXNGbG9hdCcsXG4gICAgJ2lzRGVjaW1hbCcsXG4gICAgJ2lzSGV4YWRlY2ltYWwnLFxuICAgICdpc0RpdmlzaWJsZUJ5JyxcbiAgICAnaXNIZXhDb2xvcicsXG4gICAgJ2lzSVNSQycsXG4gICAgJ2lzTUQ1JyxcbiAgICAnaXNIYXNoJyxcbiAgICAnaXNKU09OJyxcbiAgICAnaXNFbXB0eScsXG4gICAgJ2lzTGVuZ3RoJyxcbiAgICAnaXNCeXRlTGVuZ3RoJyxcbiAgICAnaXNVVUlEJyxcbiAgICAnaXNNb25nb0lkJyxcbiAgICAnaXNBZnRlcicsXG4gICAgJ2lzQmVmb3JlJyxcbiAgICAnaXNJbicsXG4gICAgJ2lzQ3JlZGl0Q2FyZCcsXG4gICAgJ2lzSVNJTicsXG4gICAgJ2lzSVNCTicsXG4gICAgJ2lzSVNTTicsXG4gICAgJ2lzTW9iaWxlUGhvbmUnLFxuICAgICdpc1Bvc3RhbENvZGUnLFxuICAgICdpc0N1cnJlbmN5JyxcbiAgICAnaXNJU084NjAxJyxcbiAgICAnaXNJU08zMTY2MUFscGhhMicsXG4gICAgJ2lzQmFzZTY0JyxcbiAgICAnaXNEYXRhVVJJJyxcbiAgICAnaXNNaW1lVHlwZScsXG4gICAgJ2lzTGF0TG9uZydcbl0pO1xuXG5tb2R1bGUuZXhwb3J0cy5taW4gPSBmdW5jdGlvbiAodmFsdWUsIG1pblZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID49IG1pblZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMubWF4ID0gZnVuY3Rpb24gKHZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA8PSBtYXhWYWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmd0ID0gZnVuY3Rpb24gKHZhbHVlLCBtaW5WYWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA+IG1pblZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMubHQgPSBmdW5jdGlvbiAodmFsdWUsIG1heFZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgbWF4VmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5tYXhMZW5ndGggPSBmdW5jdGlvbiAodmFsdWUsIG1heExlbmd0aCkge1xuICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPD0gbWF4TGVuZ3RoO1xufTsiXX0=