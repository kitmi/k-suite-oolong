"use strict";

require("source-map-support/register");

const Rules = require('../../enum/Rules');

const {
  mergeCondition
} = require('../../utils/lang');

module.exports = {
  [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {
    let findOptions = context.findOptions;

    if (!findOptions.$includeDeleted) {
      findOptions.$query = mergeCondition(findOptions.$query, {
        [feature.field]: {
          $ne: feature.value
        }
      });
    }

    return true;
  },
  [Rules.RULE_BEFORE_DELETE]: (feature, entityModel, context) => {
    let deleteOptions = context.deleteOptions;

    if (!deleteOptions.$physicalDeletion) {
      let {
        field,
        value,
        timestampField
      } = feature;
      let updateTo = {
        [field]: value
      };

      if (timestampField) {
        updateTo[timestampField] = Generators.default(entityModel.meta.fields[timestampField], context.i18n);
      }

      context.latest = (void 0)._update_(updateTo, {
        $query: deleteOptions.$query,
        $retrieveUpdated: deleteOptions.$retrieveDeleted,
        $unboxing: deleteOptions.$unboxing,
        $byPassReadOnly: new Set([field])
      });
      return false;
    }

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL2VudGl0eUZlYXR1cmVzL2xvZ2ljYWxEZWxldGlvbi5qcyJdLCJuYW1lcyI6WyJSdWxlcyIsInJlcXVpcmUiLCJtZXJnZUNvbmRpdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJSVUxFX0JFRk9SRV9GSU5EIiwiZmVhdHVyZSIsImVudGl0eU1vZGVsIiwiY29udGV4dCIsImZpbmRPcHRpb25zIiwiJGluY2x1ZGVEZWxldGVkIiwiJHF1ZXJ5IiwiZmllbGQiLCIkbmUiLCJ2YWx1ZSIsIlJVTEVfQkVGT1JFX0RFTEVURSIsImRlbGV0ZU9wdGlvbnMiLCIkcGh5c2ljYWxEZWxldGlvbiIsInRpbWVzdGFtcEZpZWxkIiwidXBkYXRlVG8iLCJHZW5lcmF0b3JzIiwiZGVmYXVsdCIsIm1ldGEiLCJmaWVsZHMiLCJpMThuIiwibGF0ZXN0IiwiX3VwZGF0ZV8iLCIkcmV0cmlldmVVcGRhdGVkIiwiJHJldHJpZXZlRGVsZXRlZCIsIiR1bmJveGluZyIsIiRieVBhc3NSZWFkT25seSIsIlNldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxrQkFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBcUJELE9BQU8sQ0FBQyxrQkFBRCxDQUFsQzs7QUFPQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsR0FBQ0osS0FBSyxDQUFDSyxnQkFBUCxHQUEwQixDQUFDQyxPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQ3pELFFBQUlDLFdBQVcsR0FBR0QsT0FBTyxDQUFDQyxXQUExQjs7QUFDQSxRQUFJLENBQUNBLFdBQVcsQ0FBQ0MsZUFBakIsRUFBa0M7QUFDOUJELE1BQUFBLFdBQVcsQ0FBQ0UsTUFBWixHQUFxQlQsY0FBYyxDQUFDTyxXQUFXLENBQUNFLE1BQWIsRUFBcUI7QUFBRSxTQUFDTCxPQUFPLENBQUNNLEtBQVQsR0FBaUI7QUFBRUMsVUFBQUEsR0FBRyxFQUFFUCxPQUFPLENBQUNRO0FBQWY7QUFBbkIsT0FBckIsQ0FBbkM7QUFDSDs7QUFFRCxXQUFPLElBQVA7QUFDSCxHQVJZO0FBU2IsR0FBQ2QsS0FBSyxDQUFDZSxrQkFBUCxHQUE0QixDQUFDVCxPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQzNELFFBQUlRLGFBQWEsR0FBR1IsT0FBTyxDQUFDUSxhQUE1Qjs7QUFDQSxRQUFJLENBQUNBLGFBQWEsQ0FBQ0MsaUJBQW5CLEVBQXNDO0FBQ2xDLFVBQUk7QUFBRUwsUUFBQUEsS0FBRjtBQUFTRSxRQUFBQSxLQUFUO0FBQWdCSSxRQUFBQTtBQUFoQixVQUFtQ1osT0FBdkM7QUFDQSxVQUFJYSxRQUFRLEdBQUc7QUFDWCxTQUFDUCxLQUFELEdBQVNFO0FBREUsT0FBZjs7QUFJQSxVQUFJSSxjQUFKLEVBQW9CO0FBQ2hCQyxRQUFBQSxRQUFRLENBQUNELGNBQUQsQ0FBUixHQUEyQkUsVUFBVSxDQUFDQyxPQUFYLENBQW1CZCxXQUFXLENBQUNlLElBQVosQ0FBaUJDLE1BQWpCLENBQXdCTCxjQUF4QixDQUFuQixFQUE0RFYsT0FBTyxDQUFDZ0IsSUFBcEUsQ0FBM0I7QUFDSDs7QUFFRGhCLE1BQUFBLE9BQU8sQ0FBQ2lCLE1BQVIsR0FBaUIsU0FBS0MsUUFBTCxDQUFjUCxRQUFkLEVBQXdCO0FBQ3JDUixRQUFBQSxNQUFNLEVBQUVLLGFBQWEsQ0FBQ0wsTUFEZTtBQUVyQ2dCLFFBQUFBLGdCQUFnQixFQUFFWCxhQUFhLENBQUNZLGdCQUZLO0FBR3JDQyxRQUFBQSxTQUFTLEVBQUViLGFBQWEsQ0FBQ2EsU0FIWTtBQUlyQ0MsUUFBQUEsZUFBZSxFQUFFLElBQUlDLEdBQUosQ0FBUSxDQUFDbkIsS0FBRCxDQUFSO0FBSm9CLE9BQXhCLENBQWpCO0FBT0EsYUFBTyxLQUFQO0FBQ0g7O0FBRUQsV0FBTyxJQUFQO0FBQ0g7QUFoQ1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUnVsZXMgPSByZXF1aXJlKCcuLi8uLi9lbnVtL1J1bGVzJyk7XG5jb25zdCB7IG1lcmdlQ29uZGl0aW9uIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9sYW5nJyk7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgZW50aXR5IHdpbGwgbm90IGJlIGRlbGV0ZWQgcGh5c2ljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfTG9naWNhbERlbGV0aW9uXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX0ZJTkRdOiAoZmVhdHVyZSwgZW50aXR5TW9kZWwsIGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IGZpbmRPcHRpb25zID0gY29udGV4dC5maW5kT3B0aW9ucztcbiAgICAgICAgaWYgKCFmaW5kT3B0aW9ucy4kaW5jbHVkZURlbGV0ZWQpIHtcbiAgICAgICAgICAgIGZpbmRPcHRpb25zLiRxdWVyeSA9IG1lcmdlQ29uZGl0aW9uKGZpbmRPcHRpb25zLiRxdWVyeSwgeyBbZmVhdHVyZS5maWVsZF06IHsgJG5lOiBmZWF0dXJlLnZhbHVlIH0gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIFtSdWxlcy5SVUxFX0JFRk9SRV9ERUxFVEVdOiAoZmVhdHVyZSwgZW50aXR5TW9kZWwsIGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IGRlbGV0ZU9wdGlvbnMgPSBjb250ZXh0LmRlbGV0ZU9wdGlvbnM7XG4gICAgICAgIGlmICghZGVsZXRlT3B0aW9ucy4kcGh5c2ljYWxEZWxldGlvbikge1xuICAgICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlLCB0aW1lc3RhbXBGaWVsZCB9ID0gZmVhdHVyZTtcbiAgICAgICAgICAgIGxldCB1cGRhdGVUbyA9IHtcbiAgICAgICAgICAgICAgICBbZmllbGRdOiB2YWx1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcEZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlVG9bdGltZXN0YW1wRmllbGRdID0gR2VuZXJhdG9ycy5kZWZhdWx0KGVudGl0eU1vZGVsLm1ldGEuZmllbGRzW3RpbWVzdGFtcEZpZWxkXSwgY29udGV4dC5pMThuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSB0aGlzLl91cGRhdGVfKHVwZGF0ZVRvLCB7IFxuICAgICAgICAgICAgICAgICRxdWVyeTogZGVsZXRlT3B0aW9ucy4kcXVlcnksIFxuICAgICAgICAgICAgICAgICRyZXRyaWV2ZVVwZGF0ZWQ6IGRlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCxcbiAgICAgICAgICAgICAgICAkdW5ib3hpbmc6IGRlbGV0ZU9wdGlvbnMuJHVuYm94aW5nLFxuICAgICAgICAgICAgICAgICRieVBhc3NSZWFkT25seTogbmV3IFNldChbZmllbGRdKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07Il19