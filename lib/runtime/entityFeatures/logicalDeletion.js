"use strict";

require("source-map-support/register");

const Rules = require('../../enum/Rules');

const {
  mergeCondition
} = require('../../utils/lang');

const Generators = require('../Generators');

module.exports = {
  [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {
    let findOptions = context.findOptions;

    if (!findOptions.$includeDeleted) {
      findOptions.$query = mergeCondition(findOptions.$query, {
        [feature.field]: {
          $ne: feature.value
        }
      });
    }

    return true;
  },
  [Rules.RULE_BEFORE_DELETE]: (feature, entityModel, context) => {
    let options = context.options;

    if (!options.$physicalDeletion) {
      let {
        field,
        value,
        timestampField
      } = feature;
      let updateTo = {
        [field]: value
      };

      if (timestampField) {
        updateTo[timestampField] = Generators.default(entityModel.meta.fields[timestampField], context.i18n);
      }

      context.latest = entityModel._update_(updateTo, {
        $query: options.$query,
        $retrieveUpdated: options.$retrieveDeleted,
        $byPassReadOnly: new Set([field, timestampField])
      });
      return false;
    }

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL2VudGl0eUZlYXR1cmVzL2xvZ2ljYWxEZWxldGlvbi5qcyJdLCJuYW1lcyI6WyJSdWxlcyIsInJlcXVpcmUiLCJtZXJnZUNvbmRpdGlvbiIsIkdlbmVyYXRvcnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiUlVMRV9CRUZPUkVfRklORCIsImZlYXR1cmUiLCJlbnRpdHlNb2RlbCIsImNvbnRleHQiLCJmaW5kT3B0aW9ucyIsIiRpbmNsdWRlRGVsZXRlZCIsIiRxdWVyeSIsImZpZWxkIiwiJG5lIiwidmFsdWUiLCJSVUxFX0JFRk9SRV9ERUxFVEUiLCJvcHRpb25zIiwiJHBoeXNpY2FsRGVsZXRpb24iLCJ0aW1lc3RhbXBGaWVsZCIsInVwZGF0ZVRvIiwiZGVmYXVsdCIsIm1ldGEiLCJmaWVsZHMiLCJpMThuIiwibGF0ZXN0IiwiX3VwZGF0ZV8iLCIkcmV0cmlldmVVcGRhdGVkIiwiJHJldHJpZXZlRGVsZXRlZCIsIiRieVBhc3NSZWFkT25seSIsIlNldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxrQkFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBcUJELE9BQU8sQ0FBQyxrQkFBRCxDQUFsQzs7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQU9BRyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYixHQUFDTCxLQUFLLENBQUNNLGdCQUFQLEdBQTBCLENBQUNDLE9BQUQsRUFBVUMsV0FBVixFQUF1QkMsT0FBdkIsS0FBbUM7QUFDekQsUUFBSUMsV0FBVyxHQUFHRCxPQUFPLENBQUNDLFdBQTFCOztBQUNBLFFBQUksQ0FBQ0EsV0FBVyxDQUFDQyxlQUFqQixFQUFrQztBQUM5QkQsTUFBQUEsV0FBVyxDQUFDRSxNQUFaLEdBQXFCVixjQUFjLENBQUNRLFdBQVcsQ0FBQ0UsTUFBYixFQUFxQjtBQUFFLFNBQUNMLE9BQU8sQ0FBQ00sS0FBVCxHQUFpQjtBQUFFQyxVQUFBQSxHQUFHLEVBQUVQLE9BQU8sQ0FBQ1E7QUFBZjtBQUFuQixPQUFyQixDQUFuQztBQUNIOztBQUVELFdBQU8sSUFBUDtBQUNILEdBUlk7QUFTYixHQUFDZixLQUFLLENBQUNnQixrQkFBUCxHQUE0QixDQUFDVCxPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQzNELFFBQUlRLE9BQU8sR0FBR1IsT0FBTyxDQUFDUSxPQUF0Qjs7QUFDQSxRQUFJLENBQUNBLE9BQU8sQ0FBQ0MsaUJBQWIsRUFBZ0M7QUFDNUIsVUFBSTtBQUFFTCxRQUFBQSxLQUFGO0FBQVNFLFFBQUFBLEtBQVQ7QUFBZ0JJLFFBQUFBO0FBQWhCLFVBQW1DWixPQUF2QztBQUNBLFVBQUlhLFFBQVEsR0FBRztBQUNYLFNBQUNQLEtBQUQsR0FBU0U7QUFERSxPQUFmOztBQUlBLFVBQUlJLGNBQUosRUFBb0I7QUFDaEJDLFFBQUFBLFFBQVEsQ0FBQ0QsY0FBRCxDQUFSLEdBQTJCaEIsVUFBVSxDQUFDa0IsT0FBWCxDQUFtQmIsV0FBVyxDQUFDYyxJQUFaLENBQWlCQyxNQUFqQixDQUF3QkosY0FBeEIsQ0FBbkIsRUFBNERWLE9BQU8sQ0FBQ2UsSUFBcEUsQ0FBM0I7QUFDSDs7QUFFRGYsTUFBQUEsT0FBTyxDQUFDZ0IsTUFBUixHQUFpQmpCLFdBQVcsQ0FBQ2tCLFFBQVosQ0FBcUJOLFFBQXJCLEVBQStCO0FBQzVDUixRQUFBQSxNQUFNLEVBQUVLLE9BQU8sQ0FBQ0wsTUFENEI7QUFFNUNlLFFBQUFBLGdCQUFnQixFQUFFVixPQUFPLENBQUNXLGdCQUZrQjtBQUc1Q0MsUUFBQUEsZUFBZSxFQUFFLElBQUlDLEdBQUosQ0FBUSxDQUFDakIsS0FBRCxFQUFRTSxjQUFSLENBQVI7QUFIMkIsT0FBL0IsQ0FBakI7QUFNQSxhQUFPLEtBQVA7QUFDSDs7QUFFRCxXQUFPLElBQVA7QUFDSDtBQS9CWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSdWxlcyA9IHJlcXVpcmUoJy4uLy4uL2VudW0vUnVsZXMnKTtcbmNvbnN0IHsgbWVyZ2VDb25kaXRpb24gfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2xhbmcnKTtcbmNvbnN0IEdlbmVyYXRvcnMgPSByZXF1aXJlKCcuLi9HZW5lcmF0b3JzJyk7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgZW50aXR5IHdpbGwgbm90IGJlIGRlbGV0ZWQgcGh5c2ljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfTG9naWNhbERlbGV0aW9uXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX0ZJTkRdOiAoZmVhdHVyZSwgZW50aXR5TW9kZWwsIGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IGZpbmRPcHRpb25zID0gY29udGV4dC5maW5kT3B0aW9ucztcbiAgICAgICAgaWYgKCFmaW5kT3B0aW9ucy4kaW5jbHVkZURlbGV0ZWQpIHtcbiAgICAgICAgICAgIGZpbmRPcHRpb25zLiRxdWVyeSA9IG1lcmdlQ29uZGl0aW9uKGZpbmRPcHRpb25zLiRxdWVyeSwgeyBbZmVhdHVyZS5maWVsZF06IHsgJG5lOiBmZWF0dXJlLnZhbHVlIH0gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIFtSdWxlcy5SVUxFX0JFRk9SRV9ERUxFVEVdOiAoZmVhdHVyZSwgZW50aXR5TW9kZWwsIGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy4kcGh5c2ljYWxEZWxldGlvbikge1xuICAgICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlLCB0aW1lc3RhbXBGaWVsZCB9ID0gZmVhdHVyZTtcbiAgICAgICAgICAgIGxldCB1cGRhdGVUbyA9IHtcbiAgICAgICAgICAgICAgICBbZmllbGRdOiB2YWx1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcEZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlVG9bdGltZXN0YW1wRmllbGRdID0gR2VuZXJhdG9ycy5kZWZhdWx0KGVudGl0eU1vZGVsLm1ldGEuZmllbGRzW3RpbWVzdGFtcEZpZWxkXSwgY29udGV4dC5pMThuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSBlbnRpdHlNb2RlbC5fdXBkYXRlXyh1cGRhdGVUbywgeyBcbiAgICAgICAgICAgICAgICAkcXVlcnk6IG9wdGlvbnMuJHF1ZXJ5LCBcbiAgICAgICAgICAgICAgICAkcmV0cmlldmVVcGRhdGVkOiBvcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQsXG4gICAgICAgICAgICAgICAgJGJ5UGFzc1JlYWRPbmx5OiBuZXcgU2V0KFtmaWVsZCwgdGltZXN0YW1wRmllbGRdKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07Il19