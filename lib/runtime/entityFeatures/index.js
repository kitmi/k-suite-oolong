"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs
} = require('rk-utils');

const basePath = path.resolve(__dirname);
const features = fs.readdirSync(basePath);
const featureRules = {};
features.forEach(file => {
  let f = path.join(basePath, file);

  if (fs.statSync(f).isFile() && _.endsWith(file, '.js')) {
    let featureName = path.basename(file, '.js');
    if (featureName === 'index') return;

    let feature = require(f);

    _.forOwn(feature, (action, ruleName) => {
      let key = featureName + '.' + ruleName;

      if (!!(key in featureRules)) {
        throw new Error(key);
      }

      featureRules[key] = action;
    });
  }
});
module.exports = {
  applyRules_: async (ruleName, entityModel, context) => {
    for (let featureName in entityModel.meta.features) {
      let key = featureName + '.' + ruleName;
      let action = featureRules[key];

      if (action) {
        let featureInfo = entityModel.meta.features[featureName];
        let asExpected = await action(featureInfo, entityModel, context);
        if (!asExpected) return false;
      }
    }

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL2VudGl0eUZlYXR1cmVzL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiXyIsImZzIiwiYmFzZVBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZmVhdHVyZXMiLCJyZWFkZGlyU3luYyIsImZlYXR1cmVSdWxlcyIsImZvckVhY2giLCJmaWxlIiwiZiIsImpvaW4iLCJzdGF0U3luYyIsImlzRmlsZSIsImVuZHNXaXRoIiwiZmVhdHVyZU5hbWUiLCJiYXNlbmFtZSIsImZlYXR1cmUiLCJmb3JPd24iLCJhY3Rpb24iLCJydWxlTmFtZSIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHBseVJ1bGVzXyIsImVudGl0eU1vZGVsIiwiY29udGV4dCIsIm1ldGEiLCJmZWF0dXJlSW5mbyIsImFzRXhwZWN0ZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFZRixPQUFPLENBQUMsVUFBRCxDQUF6Qjs7QUFFQSxNQUFNRyxRQUFRLEdBQUdKLElBQUksQ0FBQ0ssT0FBTCxDQUFhQyxTQUFiLENBQWpCO0FBQ0EsTUFBTUMsUUFBUSxHQUFHSixFQUFFLENBQUNLLFdBQUgsQ0FBZUosUUFBZixDQUFqQjtBQUVBLE1BQU1LLFlBQVksR0FBRyxFQUFyQjtBQUVBRixRQUFRLENBQUNHLE9BQVQsQ0FBaUJDLElBQUksSUFBSTtBQUNyQixNQUFJQyxDQUFDLEdBQUdaLElBQUksQ0FBQ2EsSUFBTCxDQUFVVCxRQUFWLEVBQW9CTyxJQUFwQixDQUFSOztBQUNBLE1BQUlSLEVBQUUsQ0FBQ1csUUFBSCxDQUFZRixDQUFaLEVBQWVHLE1BQWYsTUFBMkJiLENBQUMsQ0FBQ2MsUUFBRixDQUFXTCxJQUFYLEVBQWlCLEtBQWpCLENBQS9CLEVBQXdEO0FBQ3BELFFBQUlNLFdBQVcsR0FBR2pCLElBQUksQ0FBQ2tCLFFBQUwsQ0FBY1AsSUFBZCxFQUFvQixLQUFwQixDQUFsQjtBQUNBLFFBQUlNLFdBQVcsS0FBSyxPQUFwQixFQUE2Qjs7QUFFN0IsUUFBSUUsT0FBTyxHQUFHbEIsT0FBTyxDQUFDVyxDQUFELENBQXJCOztBQUVBVixJQUFBQSxDQUFDLENBQUNrQixNQUFGLENBQVNELE9BQVQsRUFBa0IsQ0FBQ0UsTUFBRCxFQUFTQyxRQUFULEtBQXNCO0FBQ3BDLFVBQUlDLEdBQUcsR0FBR04sV0FBVyxHQUFHLEdBQWQsR0FBb0JLLFFBQTlCOztBQURvQyxXQUc1QixFQUFFQyxHQUFHLElBQUlkLFlBQVQsQ0FINEI7QUFBQSx3QkFHSmMsR0FISTtBQUFBOztBQUlwQ2QsTUFBQUEsWUFBWSxDQUFDYyxHQUFELENBQVosR0FBb0JGLE1BQXBCO0FBQ0gsS0FMRDtBQU1IO0FBQ0osQ0FmRDtBQWlCQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLFdBQVcsRUFBRSxPQUFPSixRQUFQLEVBQWlCSyxXQUFqQixFQUE4QkMsT0FBOUIsS0FBMEM7QUFDbkQsU0FBSyxJQUFJWCxXQUFULElBQXdCVSxXQUFXLENBQUNFLElBQVosQ0FBaUJ0QixRQUF6QyxFQUFtRDtBQUMvQyxVQUFJZ0IsR0FBRyxHQUFHTixXQUFXLEdBQUcsR0FBZCxHQUFvQkssUUFBOUI7QUFDQSxVQUFJRCxNQUFNLEdBQUdaLFlBQVksQ0FBQ2MsR0FBRCxDQUF6Qjs7QUFFQSxVQUFJRixNQUFKLEVBQVk7QUFDUixZQUFJUyxXQUFXLEdBQUdILFdBQVcsQ0FBQ0UsSUFBWixDQUFpQnRCLFFBQWpCLENBQTBCVSxXQUExQixDQUFsQjtBQUNBLFlBQUljLFVBQVUsR0FBRyxNQUFNVixNQUFNLENBQUNTLFdBQUQsRUFBY0gsV0FBZCxFQUEyQkMsT0FBM0IsQ0FBN0I7QUFDQSxZQUFJLENBQUNHLFVBQUwsRUFBaUIsT0FBTyxLQUFQO0FBQ3BCO0FBQ0o7O0FBRUQsV0FBTyxJQUFQO0FBQ0g7QUFkWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBmcyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgYmFzZVBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lKTtcbmNvbnN0IGZlYXR1cmVzID0gZnMucmVhZGRpclN5bmMoYmFzZVBhdGgpO1xuXG5jb25zdCBmZWF0dXJlUnVsZXMgPSB7fTtcblxuZmVhdHVyZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICBsZXQgZiA9IHBhdGguam9pbihiYXNlUGF0aCwgZmlsZSk7XG4gICAgaWYgKGZzLnN0YXRTeW5jKGYpLmlzRmlsZSgpICYmIF8uZW5kc1dpdGgoZmlsZSwgJy5qcycpKSB7XG4gICAgICAgIGxldCBmZWF0dXJlTmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZSwgJy5qcycpO1xuICAgICAgICBpZiAoZmVhdHVyZU5hbWUgPT09ICdpbmRleCcpIHJldHVybjtcblxuICAgICAgICBsZXQgZmVhdHVyZSA9IHJlcXVpcmUoZik7ICAgICAgIFxuXG4gICAgICAgIF8uZm9yT3duKGZlYXR1cmUsIChhY3Rpb24sIHJ1bGVOYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQga2V5ID0gZmVhdHVyZU5hbWUgKyAnLicgKyBydWxlTmFtZTtcblxuICAgICAgICAgICAgYXNzZXJ0OiAhKGtleSBpbiBmZWF0dXJlUnVsZXMpLCBrZXk7XG4gICAgICAgICAgICBmZWF0dXJlUnVsZXNba2V5XSA9IGFjdGlvbjtcbiAgICAgICAgfSk7ICAgICAgXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFwcGx5UnVsZXNfOiBhc3luYyAocnVsZU5hbWUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGZlYXR1cmVOYW1lIGluIGVudGl0eU1vZGVsLm1ldGEuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBmZWF0dXJlTmFtZSArICcuJyArIHJ1bGVOYW1lO1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGZlYXR1cmVSdWxlc1trZXldO1xuXG4gICAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVJbmZvID0gZW50aXR5TW9kZWwubWV0YS5mZWF0dXJlc1tmZWF0dXJlTmFtZV07XG4gICAgICAgICAgICAgICAgbGV0IGFzRXhwZWN0ZWQgPSBhd2FpdCBhY3Rpb24oZmVhdHVyZUluZm8sIGVudGl0eU1vZGVsLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoIWFzRXhwZWN0ZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gICAgICAgIFxufTsiXX0=