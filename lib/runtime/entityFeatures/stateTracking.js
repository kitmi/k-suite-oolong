"use strict";

require("source-map-support/register");

const Rules = require('../../enum/Rules');

const Generators = require('../Generators');

module.exports = {
  [Rules.RULE_AFTER_VALIDATION]: (feature, entityModel, context) => {
    feature.forEach(featureItem => {
      if (featureItem.field in context.latest) {
        let targetState = context.latest[featureItem.field];
        let timestampFieldName = featureItem.stateMapping[targetState];
        console.log('targetState', targetState, 'timestampFieldName:', timestampFieldName);
        context.latest[timestampFieldName] = Generators.default(entityModel.meta.fields[timestampFieldName], context.i18n);
      }
    });
    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL2VudGl0eUZlYXR1cmVzL3N0YXRlVHJhY2tpbmcuanMiXSwibmFtZXMiOlsiUnVsZXMiLCJyZXF1aXJlIiwiR2VuZXJhdG9ycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJSVUxFX0FGVEVSX1ZBTElEQVRJT04iLCJmZWF0dXJlIiwiZW50aXR5TW9kZWwiLCJjb250ZXh0IiwiZm9yRWFjaCIsImZlYXR1cmVJdGVtIiwiZmllbGQiLCJsYXRlc3QiLCJ0YXJnZXRTdGF0ZSIsInRpbWVzdGFtcEZpZWxkTmFtZSIsInN0YXRlTWFwcGluZyIsImNvbnNvbGUiLCJsb2ciLCJkZWZhdWx0IiwibWV0YSIsImZpZWxkcyIsImkxOG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsa0JBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFPQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsR0FBQ0osS0FBSyxDQUFDSyxxQkFBUCxHQUErQixDQUFDQyxPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQzlERixJQUFBQSxPQUFPLENBQUNHLE9BQVIsQ0FBZ0JDLFdBQVcsSUFBSTtBQUMzQixVQUFJQSxXQUFXLENBQUNDLEtBQVosSUFBcUJILE9BQU8sQ0FBQ0ksTUFBakMsRUFBeUM7QUFDckMsWUFBSUMsV0FBVyxHQUFHTCxPQUFPLENBQUNJLE1BQVIsQ0FBZUYsV0FBVyxDQUFDQyxLQUEzQixDQUFsQjtBQUNBLFlBQUlHLGtCQUFrQixHQUFHSixXQUFXLENBQUNLLFlBQVosQ0FBeUJGLFdBQXpCLENBQXpCO0FBQ0FHLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGFBQVosRUFBMkJKLFdBQTNCLEVBQXdDLHFCQUF4QyxFQUErREMsa0JBQS9EO0FBQ0FOLFFBQUFBLE9BQU8sQ0FBQ0ksTUFBUixDQUFlRSxrQkFBZixJQUFxQ1osVUFBVSxDQUFDZ0IsT0FBWCxDQUFtQlgsV0FBVyxDQUFDWSxJQUFaLENBQWlCQyxNQUFqQixDQUF3Qk4sa0JBQXhCLENBQW5CLEVBQWdFTixPQUFPLENBQUNhLElBQXhFLENBQXJDO0FBQ0g7QUFDSixLQVBEO0FBU0EsV0FBTyxJQUFQO0FBQ0g7QUFaWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSdWxlcyA9IHJlcXVpcmUoJy4uLy4uL2VudW0vUnVsZXMnKTtcbmNvbnN0IEdlbmVyYXRvcnMgPSByZXF1aXJlKCcuLi9HZW5lcmF0b3JzJyk7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgY2hhbmdlIG9mIHN0YXRlIHdpbGwgYmUgdHJhY2tlZCBhdXRvbWF0aWNhbGx5LlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlUnVudGltZV9TdGF0ZVRyYWNraW5nXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQUZURVJfVkFMSURBVElPTl06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4ge1xuICAgICAgICBmZWF0dXJlLmZvckVhY2goZmVhdHVyZUl0ZW0gPT4ge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVJdGVtLmZpZWxkIGluIGNvbnRleHQubGF0ZXN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldFN0YXRlID0gY29udGV4dC5sYXRlc3RbZmVhdHVyZUl0ZW0uZmllbGRdO1xuICAgICAgICAgICAgICAgIGxldCB0aW1lc3RhbXBGaWVsZE5hbWUgPSBmZWF0dXJlSXRlbS5zdGF0ZU1hcHBpbmdbdGFyZ2V0U3RhdGVdO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0YXJnZXRTdGF0ZScsIHRhcmdldFN0YXRlLCAndGltZXN0YW1wRmllbGROYW1lOicsIHRpbWVzdGFtcEZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sYXRlc3RbdGltZXN0YW1wRmllbGROYW1lXSA9IEdlbmVyYXRvcnMuZGVmYXVsdChlbnRpdHlNb2RlbC5tZXRhLmZpZWxkc1t0aW1lc3RhbXBGaWVsZE5hbWVdLCBjb250ZXh0LmkxOG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07Il19