"use strict";

require("source-map-support/register");

class Db {
  constructor(appModule, dbServiceId, ctx) {
    this.appModule = appModule;
    let [dbType, dbName] = dbServiceId.split(':');
    this.name = dbName;
    this.dbType = dbType;
    this.serviceId = dbServiceId;

    if (ctx) {
      if (!appModule.hasPostActions) {
        throw new Error('postActions middleware is required for using db model in http request');
      }

      this.ctx = ctx;
    }
  }

  get service() {
    return this.appModule.getService(this.serviceId);
  }

  async conn_() {
    if (!this._conn) {
      this._conn = await this.service.getConnection_();

      if (this.ctx) {
        this._autoRelease = () => {
          this.release();
        };

        this.ctx.addPostAction(this._autoRelease);
      }
    }

    return this._conn;
  }

  async query_() {
    throw new Error('To be overrided by subclass.');
  }

  release() {
    if (this._conn) {
      if (this.ctx) {
        this.ctx.removePostAction(this._autoRelease);
        delete this._autoRelease;
      }

      this.service.closeConnection(this._conn);
      delete this._conn;
    }

    return this;
  }

  async doTransaction_(businessLogic_) {
    let conn = await this.conn_();
    let result;

    try {
      await this.service.startTransaction_(conn);

      try {
        result = await businessLogic_(conn);
        console.log(result);
        result = await this.service.commitTransaction_(conn);
        console.log(result);
      } catch (error) {
        await this.service.rollbackTransaction_(conn);
      }
    } finally {
      if (!this.ctx) {
        this.release();
      }
    }

    return result;
  }

}

module.exports = Db;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL1JlcG9zaXRvcnkuanMiXSwibmFtZXMiOlsiRGIiLCJjb25zdHJ1Y3RvciIsImFwcE1vZHVsZSIsImRiU2VydmljZUlkIiwiY3R4IiwiZGJUeXBlIiwiZGJOYW1lIiwic3BsaXQiLCJuYW1lIiwic2VydmljZUlkIiwiaGFzUG9zdEFjdGlvbnMiLCJzZXJ2aWNlIiwiZ2V0U2VydmljZSIsImNvbm5fIiwiX2Nvbm4iLCJnZXRDb25uZWN0aW9uXyIsIl9hdXRvUmVsZWFzZSIsInJlbGVhc2UiLCJhZGRQb3N0QWN0aW9uIiwicXVlcnlfIiwiRXJyb3IiLCJyZW1vdmVQb3N0QWN0aW9uIiwiY2xvc2VDb25uZWN0aW9uIiwiZG9UcmFuc2FjdGlvbl8iLCJidXNpbmVzc0xvZ2ljXyIsImNvbm4iLCJyZXN1bHQiLCJzdGFydFRyYW5zYWN0aW9uXyIsImNvbnNvbGUiLCJsb2ciLCJjb21taXRUcmFuc2FjdGlvbl8iLCJlcnJvciIsInJvbGxiYWNrVHJhbnNhY3Rpb25fIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxFQUFOLENBQVM7QUFTTEMsRUFBQUEsV0FBVyxDQUFDQyxTQUFELEVBQVlDLFdBQVosRUFBeUJDLEdBQXpCLEVBQThCO0FBT3JDLFNBQUtGLFNBQUwsR0FBaUJBLFNBQWpCO0FBRUEsUUFBSSxDQUFFRyxNQUFGLEVBQVVDLE1BQVYsSUFBcUJILFdBQVcsQ0FBQ0ksS0FBWixDQUFrQixHQUFsQixDQUF6QjtBQU9BLFNBQUtDLElBQUwsR0FBWUYsTUFBWjtBQU9BLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQU9BLFNBQUtJLFNBQUwsR0FBaUJOLFdBQWpCOztBQUVBLFFBQUlDLEdBQUosRUFBUztBQUFBLFdBRUdGLFNBQVMsQ0FBQ1EsY0FGYjtBQUFBLHdCQUU2Qix1RUFGN0I7QUFBQTs7QUFTTCxXQUFLTixHQUFMLEdBQVdBLEdBQVg7QUFDSDtBQUNKOztBQU1ELE1BQUlPLE9BQUosR0FBYztBQUNWLFdBQU8sS0FBS1QsU0FBTCxDQUFlVSxVQUFmLENBQTBCLEtBQUtILFNBQS9CLENBQVA7QUFDSDs7QUFNRCxRQUFNSSxLQUFOLEdBQWM7QUFDVixRQUFJLENBQUMsS0FBS0MsS0FBVixFQUFpQjtBQUNiLFdBQUtBLEtBQUwsR0FBYSxNQUFNLEtBQUtILE9BQUwsQ0FBYUksY0FBYixFQUFuQjs7QUFDQSxVQUFJLEtBQUtYLEdBQVQsRUFBYztBQUNWLGFBQUtZLFlBQUwsR0FBb0IsTUFBTTtBQUN0QixlQUFLQyxPQUFMO0FBQ0gsU0FGRDs7QUFJQSxhQUFLYixHQUFMLENBQVNjLGFBQVQsQ0FBdUIsS0FBS0YsWUFBNUI7QUFDSDtBQUNKOztBQUVELFdBQU8sS0FBS0YsS0FBWjtBQUNIOztBQU1ELFFBQU1LLE1BQU4sR0FBZTtBQUNYLFVBQU0sSUFBSUMsS0FBSixDQUFVLDhCQUFWLENBQU47QUFDSDs7QUFNREgsRUFBQUEsT0FBTyxHQUFHO0FBQ04sUUFBSSxLQUFLSCxLQUFULEVBQWdCO0FBQ1osVUFBSSxLQUFLVixHQUFULEVBQWM7QUFDVixhQUFLQSxHQUFMLENBQVNpQixnQkFBVCxDQUEwQixLQUFLTCxZQUEvQjtBQUNBLGVBQU8sS0FBS0EsWUFBWjtBQUNIOztBQUVELFdBQUtMLE9BQUwsQ0FBYVcsZUFBYixDQUE2QixLQUFLUixLQUFsQztBQUNBLGFBQU8sS0FBS0EsS0FBWjtBQUNIOztBQUVELFdBQU8sSUFBUDtBQUNIOztBQUVELFFBQU1TLGNBQU4sQ0FBcUJDLGNBQXJCLEVBQXFDO0FBQ2pDLFFBQUlDLElBQUksR0FBRyxNQUFNLEtBQUtaLEtBQUwsRUFBakI7QUFDQSxRQUFJYSxNQUFKOztBQUVBLFFBQUk7QUFDQSxZQUFNLEtBQUtmLE9BQUwsQ0FBYWdCLGlCQUFiLENBQStCRixJQUEvQixDQUFOOztBQUVBLFVBQUk7QUFDQUMsUUFBQUEsTUFBTSxHQUFHLE1BQU1GLGNBQWMsQ0FBQ0MsSUFBRCxDQUE3QjtBQUNBRyxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsTUFBWjtBQUNBQSxRQUFBQSxNQUFNLEdBQUcsTUFBTSxLQUFLZixPQUFMLENBQWFtQixrQkFBYixDQUFnQ0wsSUFBaEMsQ0FBZjtBQUNBRyxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsTUFBWjtBQUNILE9BTEQsQ0FLRSxPQUFPSyxLQUFQLEVBQWM7QUFDWixjQUFNLEtBQUtwQixPQUFMLENBQWFxQixvQkFBYixDQUFrQ1AsSUFBbEMsQ0FBTjtBQUNIO0FBQ0osS0FYRCxTQVdVO0FBQ04sVUFBSSxDQUFDLEtBQUtyQixHQUFWLEVBQWU7QUFDWCxhQUFLYSxPQUFMO0FBQ0g7QUFDSjs7QUFFRCxXQUFPUyxNQUFQO0FBQ0g7O0FBaklJOztBQW9JVE8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEMsRUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY2xhc3MgRGIge1xuICAgIC8qKlxuICAgICAqIERhdGFiYXNlIG9iamVjdFxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdHMgRGJcbiAgICAgKiBAcGFyYW0ge0FwcE1vZHVsZX0gYXBwTW9kdWxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRiU2VydmljZUlkXG4gICAgICogQHBhcmFtIHsqfSBjdHhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHBNb2R1bGUsIGRiU2VydmljZUlkLCBjdHgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE93bmVyIGFwcCBtb2R1bGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0FwcE1vZHVsZX1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuYXBwTW9kdWxlID0gYXBwTW9kdWxlO1xuXG4gICAgICAgIGxldCBbIGRiVHlwZSwgZGJOYW1lIF0gPSBkYlNlcnZpY2VJZC5zcGxpdCgnOicpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEYiBuYW1lXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IGRiTmFtZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGIgdHlwZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRiVHlwZSA9IGRiVHlwZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2VydmljZSBpZFxuICAgICAgICAgKiBcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXJ2aWNlSWQgPSBkYlNlcnZpY2VJZDtcbiAgICAgICAgXG4gICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgIC8vYXV0byBkZXN0cnVjdCBpZiBjdHggZ2l2ZW4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFzc2VydDogYXBwTW9kdWxlLmhhc1Bvc3RBY3Rpb25zLCAncG9zdEFjdGlvbnMgbWlkZGxld2FyZSBpcyByZXF1aXJlZCBmb3IgdXNpbmcgZGIgbW9kZWwgaW4gaHR0cCByZXF1ZXN0JztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXF1ZXN0IGNvbnRleHRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY3R4ID0gY3R4OyAgICBcbiAgICAgICAgfSAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkYXRhYmFzZSBzZXJ2aWNlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHsqfE9iamVjdH1cbiAgICAgKi9cbiAgICBnZXQgc2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwTW9kdWxlLmdldFNlcnZpY2UodGhpcy5zZXJ2aWNlSWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiAgICAgXG4gICAgICogQHJldHVybnMgeyp8UHJvbWlzZS48T2JqZWN0Pn1cbiAgICAgKi9cbiAgICBhc3luYyBjb25uXygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uID0gYXdhaXQgdGhpcy5zZXJ2aWNlLmdldENvbm5lY3Rpb25fKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jdHgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdXRvUmVsZWFzZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguYWRkUG9zdEFjdGlvbih0aGlzLl9hdXRvUmVsZWFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fY29ubjtcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIHF1ZXJ5IHRvd2FyZHMgdGhlIGRhdGFiYXNlXG4gICAgICogQHJldHVybnMgeyp8UHJvbWlzZS48T2JqZWN0Pn1cbiAgICAgKi9cbiAgICBhc3luYyBxdWVyeV8oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVG8gYmUgb3ZlcnJpZGVkIGJ5IHN1YmNsYXNzLicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7RGJ9XG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm4pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN0eCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnJlbW92ZVBvc3RBY3Rpb24odGhpcy5fYXV0b1JlbGVhc2UpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9hdXRvUmVsZWFzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmNsb3NlQ29ubmVjdGlvbih0aGlzLl9jb25uKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jb25uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSAgICBcblxuICAgIGFzeW5jIGRvVHJhbnNhY3Rpb25fKGJ1c2luZXNzTG9naWNfKSB7XG4gICAgICAgIGxldCBjb25uID0gYXdhaXQgdGhpcy5jb25uXygpO1xuICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNlcnZpY2Uuc3RhcnRUcmFuc2FjdGlvbl8oY29ubik7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgYnVzaW5lc3NMb2dpY18oY29ubik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLnNlcnZpY2UuY29tbWl0VHJhbnNhY3Rpb25fKGNvbm4pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VydmljZS5yb2xsYmFja1RyYW5zYWN0aW9uXyhjb25uKTtcbiAgICAgICAgICAgIH0gICAgIFxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmN0eCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVsZWFzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYjsiXX0=