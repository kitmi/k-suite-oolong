"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util._;

const Errors = require('./Errors');

const Generators = require('./Generators');

const Types = require('./types');

const {
  DataValidationError,
  OolongUsageError,
  DsOperationError
} = Errors;

const Features = require('./entityFeatures');

const Rules = require('../enum/Rules');

const {
  isNothing
} = require('../utils/lang');

class EntityModel {
  constructor(rawData) {
    if (rawData) {
      Object.assign(this, rawData);
    }
  }

  get $pkValues() {
    return _.pick(this, _.castArray(this.constructor.meta.keyField));
  }

  static populate(data) {
    let ModelClass = this;
    return new ModelClass(data);
  }

  static getUniqueKeyFieldsFrom(data) {
    return _.find(this.meta.uniqueKeys, fields => _.every(fields, f => !_.isNil(data[f])));
  }

  static getUniqueKeyValuePairsFrom(data) {
    if (!_.isPlainObject(data)) {
      throw new Error("Function  precondition failed: _.isPlainObject(data)");
    }

    let ukFields = getUniqueKeyFieldsFrom(data);
    return _.pick(data, ukFields);
  }

  static async findOne_(findOptions, connOptions) {
    if (!findOptions) {
      throw new Error("Function  precondition failed: findOptions");
    }

    findOptions = this._prepareWhere(findOptions, true);
    let context = {
      findOptions,
      connOptions
    };
    await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);
    return this._safeExecute_(async context => {
      let records = await this.db.connector.find_(this.meta.name, context.findOptions, context.connOptions);
      if (!records) throw new DsOperationError('connector.find_() returns undefined data record.');
      if (records.length === 0) return undefined;

      if (!(records.length === 1)) {
        throw new Error("Assertion failed: records.length === 1");
      }

      let result = records[0];
      if (context.findOptions.$fetchArray) return result;
      return this.populate(result);
    }, context);
  }

  static async findAll_(findOptions, connOptions) {
    findOptions = this._prepareWhere(findOptions);
    let context = {
      findOptions,
      connOptions
    };
    await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);
    return this._safeExecute_(async context => {
      let records = await this.db.connector.find_(this.meta.name, context.findOptions, context.connOptions);
      if (!records) throw new DsOperationError('connector.find_() returns undefined data record.');
      if (context.findOptions.$fetchArray) return records;
      return records.map(row => this.populate(row));
    }, context);
  }

  static async create_(data, createOptions, connOptions) {
    createOptions || (createOptions = {});
    let context = {
      raw: data,
      createOptions,
      connOptions
    };
    return this._safeExecute_(async context => {
      await this._prepareEntityData_(context);
      await Features.applyRules_(Rules.RULE_BEFORE_CREATE, this, context);
      context.result = await this.db.connector.create_(this.meta.name, context.latest, context.connOptions);
      await this.afterCreate_(context);
      return createOptions.$fetchArray ? context.latest : this.populate(context.latest);
    }, context);
  }

  static async update_(data, updateOptions, connOptions) {
    if (!updateOptions) {
      let conditionFields = this.getUniqueKeyFieldsFrom(data);

      if (_.isEmpty(conditionFields)) {
        throw new OolongUsageError('Primary key value(s) or at least one group of unique key value(s) is required for updating an entity.');
      }

      updateOptions = {
        $where: _.pick(data, conditionFields)
      };
      data = _.omit(data, conditionFields);
    }

    updateOptions = this._prepareWhere(updateOptions, true);
    let context = {
      raw: data,
      updateOptions,
      connOptions
    };
    return this._safeExecute_(async context => {
      await this._prepareEntityData_(context, true);
      await Features.applyRules_(Rules.RULE_BEFORE_UPDATE, this, context);
      context.result = await this.db.connector.update_(this.meta.name, context.latest, context.updateOptions.$where, context.connOptions);
      await this.afterUpdate_(context);
      return updateOptions.$fetchArray ? context.latest : this.populate(context.latest);
    }, context);
  }

  static async delete_(deleteOptions, connOptions) {
    if (!deleteOptions) {
      throw new Error("Function  precondition failed: deleteOptions");
    }

    deleteOptions = this._prepareWhere(deleteOptions, true);

    if (_.isEmpty(deleteOptions.$where)) {
      throw new OolongUsageError('Empty condition is not allowed for deleting an entity.');
    }

    if (this.meta.features.logicalDeletion && !deleteOptions.$physicalDeletion) {
      let {
        field,
        value
      } = this.meta.features.logicalDeletion;
      return this.update_({
        [field]: value
      }, {
        $where: deleteOptions.$where,
        $retrieveUpdated: deleteOptions.$retrieveDeleted,
        $fetchArray: deleteOptions.$fetchArray
      });
    }

    let context = {
      deleteOptions,
      connOptions
    };
    return this._safeExecute_(async context => {
      await this.beforeDelete_(context);
      context.result = await this.db.connector.delete_(this.meta.name, context.deleteOptions.$where, context.connOptions);
      return deleteOptions.$fetchArray ? context.existing : this.populate(context.existing);
    }, context);
  }

  static mergeCondition(condition1, condition2, operator = '$and') {
    if (_.isEmpty(condition1)) {
      return condition2;
    }

    if (_.isEmpty(condition2)) {
      return condition1;
    }

    return {
      [operator]: [condition1, condition2]
    };
  }

  static containsUniqueKey(data) {
    return _.find(this.meta.uniqueKeys, fields => _.every(fields, f => _.isNil(data[f])));
  }

  static _ensureContainsUniqueKey(condition) {
    let containsUniqueKey = this.containsUniqueKey(condition);

    if (!containsUniqueKey) {
      throw new OolongUsageError('Unexpected usage.', {
        entity: this.meta.name,
        reason: 'Single record operation requires condition to be containing unique key.',
        condition
      });
    }
  }

  static async _prepareEntityData_(context, isUpdating = false) {
    let meta = this.meta;
    let i18n = this.i18n;
    let {
      name,
      fields
    } = meta;
    let {
      raw
    } = context;
    let latest = {},
        existing;
    context.latest = latest;

    if (!context.i18n) {
      context.i18n = i18n;
    }

    if (isUpdating && this._dependsOnExistingData(raw)) {
      if (!context.connOptions || !context.connOptions.connection) {
        context.connOptions || (context.connOptions = {});
        context.connOptions.connection = await this.db.connector.beginTransaction_();
      }

      existing = await this.findOne_({
        $where: context.updateOptions.$where,
        $fetchArray: true
      }, context.connOptions);
      context.existing = existing;
    }

    await Util.eachAsync_(fields, async (fieldInfo, fieldName) => {
      if (fieldName in raw) {
        if (fieldInfo.readOnly) {
          throw new DataValidationError(`Read-only field "${fieldName}" is not allowed to be set by manual input.`, {
            entity: name,
            fieldInfo: fieldInfo
          });
        }

        if (isUpdating && fieldInfo.writeOnce) {
          if (existing && !_.isNil(existing[fieldName])) {
            throw new DataValidationError(`Write-once field "${fieldName}" is not allowed to be update once it was set.`, {
              entity: name,
              fieldInfo: fieldInfo
            });
          }
        }

        if (isNothing(raw[fieldName])) {
          if (!fieldInfo.optional) {
            throw new DataValidationError(`The "${fieldName}" value of "${name}" entity cannot be null.`, {
              entity: name,
              fieldInfo: fieldInfo
            });
          }

          latest[fieldName] = null;
        } else {
          latest[fieldName] = Types.sanitize(raw[fieldName], fieldInfo, i18n);
        }

        return;
      }

      if (isUpdating) {
        if (fieldInfo.forceUpdate) {
          if (fieldInfo.updateByDb) {
            return;
          }

          if (fieldInfo.auto) {
            latest[fieldName] = await Generators.default(fieldInfo, i18n);
            return;
          }

          throw new DataValidationError(`"${fieldName}" of "${name}" enttiy is required for each update.`, {
            entity: name,
            fieldInfo: fieldInfo
          });
        }

        return;
      }

      if (!fieldInfo.createByDb) {
        if (fieldInfo.hasOwnProperty('default')) {
          latest[fieldName] = fieldInfo.default;
        } else if (fieldInfo.optional) {
          return;
        } else if (fieldInfo.auto) {
          latest[fieldName] = await Generators.default(fieldInfo, i18n);
        } else {
          throw new DataValidationError(`"${fieldName}" of "${name}" entity is required.`, {
            entity: name,
            fieldInfo: fieldInfo
          });
        }
      }
    });
    await Features.applyRules_(Rules.RULE_AFTER_VALIDATION, this, context);
    await this.applyModifiers_(context, isUpdating);
    this.serialize(context.latest);
    return context;
  }

  static async _safeExecute_(executor, context) {
    executor = executor.bind(this);

    if (context.connOptions && context.connOptions.connection) {
      return executor(context);
    }

    try {
      let result = await executor(context);
      context.connOptions && context.connOptions.connection && (await this.db.connector.commit_(context.connOptions.connection));
      return result;
    } catch (error) {
      context.connOptions && context.connOptions.connection && (await this.db.connector.rollback_(context.connOptions.connection));
      throw error;
    }
  }

  static _dependsOnExistingData(input) {
    let deps = this.meta.fieldDependencies;
    let hasDepends = false;

    if (deps) {
      hasDepends = _.find(deps, (dep, fieldName) => {
        if (fieldName in input) {
          return _.find(dep, d => {
            let [stage, field] = d.split('.');
            return (stage === 'latest' || stage === 'existng') && _.isNil(input[field]);
          });
        }

        return false;
      });

      if (hasDepends) {
        return true;
      }
    }

    let atLeastOneNotNull = this.meta.features.atLeastOneNotNull;

    if (atLeastOneNotNull) {
      hasDepends = _.find(atLeastOneNotNull, fields => _.find(fields, field => field in input && _.isNil(input[field])));

      if (hasDepends) {
        return true;
      }
    }

    return false;
  }

  static _hasReservedKeys(obj) {
    return _.find(obj, (v, k) => k[0] === '$');
  }

  static _prepareWhere(options, forSingleRecord = false) {
    if (options && !options.$where && !this._hasReservedKeys(options)) {
      options = {
        $where: options
      };
    }

    if (forSingleRecord) {
      if (!_.isPlainObject(options.$where)) {
        if (Array.isArray(this.meta.keyField)) {
          throw new OolongUsageError('Cannot use a singular value as condition to query against a entity with combined primary key.');
        }

        options.$where = {
          [this.meta.keyField]: options.$where
        };
      } else {
        this._ensureContainsUniqueKey(options.$where);
      }
    }

    return options || {};
  }

}

module.exports = EntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL0VudGl0eU1vZGVsLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsIkVycm9ycyIsIkdlbmVyYXRvcnMiLCJUeXBlcyIsIkRhdGFWYWxpZGF0aW9uRXJyb3IiLCJPb2xvbmdVc2FnZUVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIkZlYXR1cmVzIiwiUnVsZXMiLCJpc05vdGhpbmciLCJFbnRpdHlNb2RlbCIsImNvbnN0cnVjdG9yIiwicmF3RGF0YSIsIk9iamVjdCIsImFzc2lnbiIsIiRwa1ZhbHVlcyIsInBpY2siLCJjYXN0QXJyYXkiLCJtZXRhIiwia2V5RmllbGQiLCJwb3B1bGF0ZSIsImRhdGEiLCJNb2RlbENsYXNzIiwiZ2V0VW5pcXVlS2V5RmllbGRzRnJvbSIsImZpbmQiLCJ1bmlxdWVLZXlzIiwiZmllbGRzIiwiZXZlcnkiLCJmIiwiaXNOaWwiLCJnZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbSIsImlzUGxhaW5PYmplY3QiLCJ1a0ZpZWxkcyIsImZpbmRPbmVfIiwiZmluZE9wdGlvbnMiLCJjb25uT3B0aW9ucyIsIl9wcmVwYXJlV2hlcmUiLCJjb250ZXh0IiwiYXBwbHlSdWxlc18iLCJSVUxFX0JFRk9SRV9GSU5EIiwiX3NhZmVFeGVjdXRlXyIsInJlY29yZHMiLCJkYiIsImNvbm5lY3RvciIsImZpbmRfIiwibmFtZSIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlc3VsdCIsIiRmZXRjaEFycmF5IiwiZmluZEFsbF8iLCJtYXAiLCJyb3ciLCJjcmVhdGVfIiwiY3JlYXRlT3B0aW9ucyIsInJhdyIsIl9wcmVwYXJlRW50aXR5RGF0YV8iLCJSVUxFX0JFRk9SRV9DUkVBVEUiLCJsYXRlc3QiLCJhZnRlckNyZWF0ZV8iLCJ1cGRhdGVfIiwidXBkYXRlT3B0aW9ucyIsImNvbmRpdGlvbkZpZWxkcyIsImlzRW1wdHkiLCIkd2hlcmUiLCJvbWl0IiwiUlVMRV9CRUZPUkVfVVBEQVRFIiwiYWZ0ZXJVcGRhdGVfIiwiZGVsZXRlXyIsImRlbGV0ZU9wdGlvbnMiLCJmZWF0dXJlcyIsImxvZ2ljYWxEZWxldGlvbiIsIiRwaHlzaWNhbERlbGV0aW9uIiwiZmllbGQiLCJ2YWx1ZSIsIiRyZXRyaWV2ZVVwZGF0ZWQiLCIkcmV0cmlldmVEZWxldGVkIiwiYmVmb3JlRGVsZXRlXyIsImV4aXN0aW5nIiwibWVyZ2VDb25kaXRpb24iLCJjb25kaXRpb24xIiwiY29uZGl0aW9uMiIsIm9wZXJhdG9yIiwiY29udGFpbnNVbmlxdWVLZXkiLCJfZW5zdXJlQ29udGFpbnNVbmlxdWVLZXkiLCJjb25kaXRpb24iLCJlbnRpdHkiLCJyZWFzb24iLCJpc1VwZGF0aW5nIiwiaTE4biIsIl9kZXBlbmRzT25FeGlzdGluZ0RhdGEiLCJjb25uZWN0aW9uIiwiYmVnaW5UcmFuc2FjdGlvbl8iLCJlYWNoQXN5bmNfIiwiZmllbGRJbmZvIiwiZmllbGROYW1lIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvcHRpb25hbCIsInNhbml0aXplIiwiZm9yY2VVcGRhdGUiLCJ1cGRhdGVCeURiIiwiYXV0byIsImRlZmF1bHQiLCJjcmVhdGVCeURiIiwiaGFzT3duUHJvcGVydHkiLCJSVUxFX0FGVEVSX1ZBTElEQVRJT04iLCJhcHBseU1vZGlmaWVyc18iLCJzZXJpYWxpemUiLCJleGVjdXRvciIsImJpbmQiLCJjb21taXRfIiwiZXJyb3IiLCJyb2xsYmFja18iLCJpbnB1dCIsImRlcHMiLCJmaWVsZERlcGVuZGVuY2llcyIsImhhc0RlcGVuZHMiLCJkZXAiLCJkIiwic3RhZ2UiLCJzcGxpdCIsImF0TGVhc3RPbmVOb3ROdWxsIiwiX2hhc1Jlc2VydmVkS2V5cyIsIm9iaiIsInYiLCJrIiwib3B0aW9ucyIsImZvclNpbmdsZVJlY29yZCIsIkFycmF5IiwiaXNBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVD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bkMsZ0JBQU0sSUFBSWQsZ0JBQUosQ0FBcUIsK0ZBQXJCLENBQU47QUFDSDs7QUFFRDBILFFBQUFBLE9BQU8sQ0FBQy9ELE1BQVIsR0FBaUI7QUFBRSxXQUFDLEtBQUs5QyxJQUFMLENBQVVDLFFBQVgsR0FBc0I0RyxPQUFPLENBQUMvRDtBQUFoQyxTQUFqQjtBQUNILE9BTkQsTUFNTztBQUNILGFBQUtvQix3QkFBTCxDQUE4QjJDLE9BQU8sQ0FBQy9ELE1BQXRDO0FBQ0g7QUFDSjs7QUFFRCxXQUFPK0QsT0FBTyxJQUFJLEVBQWxCO0FBQ0g7O0FBbGdCYTs7QUFxZ0JsQkksTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUgsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IF8gfSA9IFV0aWwuXztcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4vRXJyb3JzJyk7XG5jb25zdCBHZW5lcmF0b3JzID0gcmVxdWlyZSgnLi9HZW5lcmF0b3JzJyk7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbmNvbnN0IHsgRGF0YVZhbGlkYXRpb25FcnJvciwgT29sb25nVXNhZ2VFcnJvciwgRHNPcGVyYXRpb25FcnJvciB9ID0gRXJyb3JzO1xuY29uc3QgRmVhdHVyZXMgPSByZXF1aXJlKCcuL2VudGl0eUZlYXR1cmVzJyk7XG5jb25zdCBSdWxlcyA9IHJlcXVpcmUoJy4uL2VudW0vUnVsZXMnKTtcblxuY29uc3QgeyBpc05vdGhpbmcgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xhbmcnKTtcblxuLyoqXG4gKiBCYXNlIGVudGl0eSBtb2RlbCBjbGFzcy5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBFbnRpdHlNb2RlbCB7XG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Jhd0RhdGFdIC0gUmF3IGRhdGEgb2JqZWN0IFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJhd0RhdGEpIHtcbiAgICAgICAgaWYgKHJhd0RhdGEpIHtcbiAgICAgICAgICAgIC8vb25seSBwaWNrIHRob3NlIHRoYXQgYXJlIGZpZWxkcyBvZiB0aGlzIGVudGl0eVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCByYXdEYXRhKTtcbiAgICAgICAgfSBcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIG9iamVjdCBvZiB0aGUgcHJpbWFyeSBrZXkgdmFsdWVzLlxuICAgICAqL1xuICAgIGdldCAkcGtWYWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiBfLnBpY2sodGhpcywgXy5jYXN0QXJyYXkodGhpcy5jb25zdHJ1Y3Rvci5tZXRhLmtleUZpZWxkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGUgZGF0YSBmcm9tIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBcbiAgICAgKiBAcmV0dXJuIHtFbnRpdHlNb2RlbH1cbiAgICAgKi9cbiAgICBzdGF0aWMgcG9wdWxhdGUoZGF0YSkge1xuICAgICAgICBsZXQgTW9kZWxDbGFzcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgTW9kZWxDbGFzcyhkYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgZmllbGQgbmFtZXMgYXJyYXkgb2YgYSB1bmlxdWUga2V5IGZyb20gaW5wdXQgZGF0YS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIElucHV0IGRhdGEuXG4gICAgICovXG4gICAgc3RhdGljIGdldFVuaXF1ZUtleUZpZWxkc0Zyb20oZGF0YSkge1xuICAgICAgICByZXR1cm4gXy5maW5kKHRoaXMubWV0YS51bmlxdWVLZXlzLCBmaWVsZHMgPT4gXy5ldmVyeShmaWVsZHMsIGYgPT4gIV8uaXNOaWwoZGF0YVtmXSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQga2V5LXZhbHVlIHBhaXJzIG9mIGEgdW5pcXVlIGtleSBmcm9tIGlucHV0IGRhdGEuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBJbnB1dCBkYXRhLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbShkYXRhKSB7ICBcbiAgICAgICAgcHJlOiBfLmlzUGxhaW5PYmplY3QoZGF0YSk7ICAgIFxuICAgICAgICBcbiAgICAgICAgbGV0IHVrRmllbGRzID0gZ2V0VW5pcXVlS2V5RmllbGRzRnJvbShkYXRhKTtcbiAgICAgICAgcmV0dXJuIF8ucGljayhkYXRhLCB1a0ZpZWxkcyk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbmQgb25lIHJlY29yZCwgcmV0dXJucyBhIG1vZGVsIG9iamVjdCBjb250YWluaW5nIHRoZSByZWNvcmQgb3IgdW5kZWZpbmVkIGlmIG5vdGhpbmcgZm91bmQuXG4gICAgICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IGNvbmRpdGlvbiAtIFF1ZXJ5IGNvbmRpdGlvbiwga2V5LXZhbHVlIHBhaXIgd2lsbCBiZSBqb2luZWQgd2l0aCAnQU5EJywgYXJyYXkgZWxlbWVudCB3aWxsIGJlIGpvaW5lZCB3aXRoICdPUicuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtmaW5kT3B0aW9uc10gLSBmaW5kT3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kc2VsZWN0XSAtIFNlbGVjdGVkIGZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJHdoZXJlXSAtIEV4dHJhIGNvbmRpdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJGdyb3VwQnldIC0gR3JvdXAgYnkgZmllbGRzXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kaGF2aW5nXSAtIEhhdmluZyBmaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRvcmRlckJ5XSAtIE9yZGVyIGJ5IGZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmluZE9wdGlvbnMuJG9mZnNldF0gLSBPZmZzZXRcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW2ZpbmRPcHRpb25zLiRsaW1pdF0gLSBMaW1pdCAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbZmluZE9wdGlvbnMuJGZldGNoQXJyYXk9ZmFsc2VdIC0gV2hlbiBmZXRjaEFycmF5ID0gdHJ1ZSwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGRpcmVjdGx5IHdpdGhvdXQgY3JlYXRpbmcgbW9kZWwgb2JqZWN0cy5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtmaW5kT3B0aW9ucy4kaW5jbHVkZURlbGV0ZWQ9ZmFsc2VdIC0gSW5jbHVkZSB0aG9zZSBtYXJrZWQgYXMgbG9naWNhbCBkZWxldGVkLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbY29ubk9wdGlvbnNdXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb25uT3B0aW9ucy5jb25uZWN0aW9uXVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmaW5kT25lXyhmaW5kT3B0aW9ucywgY29ubk9wdGlvbnMpIHsgXG4gICAgICAgIHByZTogZmluZE9wdGlvbnM7XG5cbiAgICAgICAgZmluZE9wdGlvbnMgPSB0aGlzLl9wcmVwYXJlV2hlcmUoZmluZE9wdGlvbnMsIHRydWUgLyogZm9yIHNpbmdsZSByZWNvcmQgKi8pO1xuICAgICAgICBcbiAgICAgICAgbGV0IGNvbnRleHQgPSB7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgZmluZE9wdGlvbnMsXG4gICAgICAgICAgICBjb25uT3B0aW9uc1xuICAgICAgICB9OyBcblxuICAgICAgICBhd2FpdCBGZWF0dXJlcy5hcHBseVJ1bGVzXyhSdWxlcy5SVUxFX0JFRk9SRV9GSU5ELCB0aGlzLCBjb250ZXh0KTsgIFxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zYWZlRXhlY3V0ZV8oYXN5bmMgKGNvbnRleHQpID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCByZWNvcmRzID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuZmluZF8oXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhLm5hbWUsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmluZE9wdGlvbnMsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIXJlY29yZHMpIHRocm93IG5ldyBEc09wZXJhdGlvbkVycm9yKCdjb25uZWN0b3IuZmluZF8oKSByZXR1cm5zIHVuZGVmaW5lZCBkYXRhIHJlY29yZC4nKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBhc3NlcnQ6IHJlY29yZHMubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlY29yZHNbMF07XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LmZpbmRPcHRpb25zLiRmZXRjaEFycmF5KSByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3B1bGF0ZShyZXN1bHQpO1xuICAgICAgICB9LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIHJlY29yZHMgbWF0Y2hpbmcgdGhlIGNvbmRpdGlvbiwgcmV0dXJucyBhbiBhcnJheSBvZiBtb2RlbCBvYmplY3Qgb3IgYW4gYXJyYXkgb2YgcmVjb3JkcyBkaXJlY3RseSBpZiAkZmV0Y2hBcnJheSA9IHRydWUuICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2ZpbmRPcHRpb25zXSAtIGZpbmRPcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRzZWxlY3RdIC0gU2VsZWN0ZWQgZmllbGRzXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kd2hlcmVdIC0gRXh0cmEgY29uZGl0aW9uXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kZ3JvdXBCeV0gLSBHcm91cCBieSBmaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRoYXZpbmddIC0gSGF2aW5nIGZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJG9yZGVyQnldIC0gT3JkZXIgYnkgZmllbGRzXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtmaW5kT3B0aW9ucy4kb2Zmc2V0XSAtIE9mZnNldFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmluZE9wdGlvbnMuJGxpbWl0XSAtIExpbWl0ICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtmaW5kT3B0aW9ucy4kZmV0Y2hBcnJheT1mYWxzZV0gLSBXaGVuIGZldGNoQXJyYXkgPSB0cnVlLCB0aGUgcmVzdWx0IHdpbGwgYmUgcmV0dXJuZWQgZGlyZWN0bHkgd2l0aG91dCBjcmVhdGluZyBtb2RlbCBvYmplY3RzLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2ZpbmRPcHRpb25zLiRpbmNsdWRlRGVsZXRlZD1mYWxzZV0gLSBJbmNsdWRlIHRob3NlIG1hcmtlZCBhcyBsb2dpY2FsIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dXG4gICAgICogQHJldHVybnMge2FycmF5fVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmaW5kQWxsXyhmaW5kT3B0aW9ucywgY29ubk9wdGlvbnMpIHtcbiAgICAgICAgZmluZE9wdGlvbnMgPSB0aGlzLl9wcmVwYXJlV2hlcmUoZmluZE9wdGlvbnMpO1xuXG4gICAgICAgIGxldCBjb250ZXh0ID0geyAgICAgICAgICAgICBcbiAgICAgICAgICAgIGZpbmRPcHRpb25zLFxuICAgICAgICAgICAgY29ubk9wdGlvbnNcbiAgICAgICAgfTsgXG5cbiAgICAgICAgYXdhaXQgRmVhdHVyZXMuYXBwbHlSdWxlc18oUnVsZXMuUlVMRV9CRUZPUkVfRklORCwgdGhpcywgY29udGV4dCk7ICBcblxuICAgICAgICByZXR1cm4gdGhpcy5fc2FmZUV4ZWN1dGVfKGFzeW5jIChjb250ZXh0KSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmZpbmRfKFxuICAgICAgICAgICAgICAgIHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbmRPcHRpb25zLCBcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFyZWNvcmRzKSB0aHJvdyBuZXcgRHNPcGVyYXRpb25FcnJvcignY29ubmVjdG9yLmZpbmRfKCkgcmV0dXJucyB1bmRlZmluZWQgZGF0YSByZWNvcmQuJyk7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LmZpbmRPcHRpb25zLiRmZXRjaEFycmF5KSByZXR1cm4gcmVjb3JkcztcblxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZHMubWFwKHJvdyA9PiB0aGlzLnBvcHVsYXRlKHJvdykpO1xuICAgICAgICB9LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW50aXR5IHdpdGggZ2l2ZW4gZGF0YS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEVudGl0eSBkYXRhIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbY3JlYXRlT3B0aW9uc10gLSBDcmVhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY3JlYXRlT3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkPWZhbHNlXSAtIFJldHJpZXZlIHRoZSBuZXdseSBjcmVhdGVkIHJlY29yZCBmcm9tIGRiLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NyZWF0ZU9wdGlvbnMuJGZldGNoQXJyYXk9ZmFsc2VdIC0gV2hlbiBmZXRjaEFycmF5ID0gdHJ1ZSwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGRpcmVjdGx5IHdpdGhvdXQgY3JlYXRpbmcgbW9kZWwgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2Nvbm5PcHRpb25zXVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29ubk9wdGlvbnMuY29ubmVjdGlvbl1cbiAgICAgKiBAcmV0dXJucyB7RW50aXR5TW9kZWx9XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZV8oZGF0YSwgY3JlYXRlT3B0aW9ucywgY29ubk9wdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlT3B0aW9ucyB8fCAoY3JlYXRlT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICBsZXQgY29udGV4dCA9IHsgXG4gICAgICAgICAgICByYXc6IGRhdGEsIFxuICAgICAgICAgICAgY3JlYXRlT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NhZmVFeGVjdXRlXyhhc3luYyAoY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcHJlcGFyZUVudGl0eURhdGFfKGNvbnRleHQpOyAgICAgICAgICBcblxuICAgICAgICAgICAgYXdhaXQgRmVhdHVyZXMuYXBwbHlSdWxlc18oUnVsZXMuUlVMRV9CRUZPUkVfQ1JFQVRFLCB0aGlzLCBjb250ZXh0KTsgICAgXG5cbiAgICAgICAgICAgIGNvbnRleHQucmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuY3JlYXRlXyhcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGEubmFtZSwgXG4gICAgICAgICAgICAgICAgY29udGV4dC5sYXRlc3QsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnNcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWZ0ZXJDcmVhdGVfKGNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlT3B0aW9ucy4kZmV0Y2hBcnJheSA/IGNvbnRleHQubGF0ZXN0IDogdGhpcy5wb3B1bGF0ZShjb250ZXh0LmxhdGVzdCk7XG4gICAgICAgIH0sIGNvbnRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBlbnRpdHkgd2l0aCBnaXZlbiBkYXRhLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gRW50aXR5IGRhdGEgd2l0aCBhdCBsZWFzdCBvbmUgdW5pcXVlIGtleSAocGFpcikgZ2l2ZW5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3VwZGF0ZU9wdGlvbnNdIC0gVXBkYXRlIG9wdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW3VwZGF0ZU9wdGlvbnMuJHdoZXJlXSAtIEV4dHJhIGNvbmRpdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW3VwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZD1mYWxzZV0gLSBSZXRyaWV2ZSB0aGUgdXBkYXRlZCBlbnRpdHkgZnJvbSBkYXRhYmFzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW3VwZGF0ZU9wdGlvbnMuJGZldGNoQXJyYXk9ZmFsc2VdIC0gV2hlbiBmZXRjaEFycmF5ID0gdHJ1ZSwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGRpcmVjdGx5IHdpdGhvdXQgY3JlYXRpbmcgbW9kZWwgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2Nvbm5PcHRpb25zXVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29ubk9wdGlvbnMuY29ubmVjdGlvbl1cbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyB1cGRhdGVfKGRhdGEsIHVwZGF0ZU9wdGlvbnMsIGNvbm5PcHRpb25zKSB7XG4gICAgICAgIGlmICghdXBkYXRlT3B0aW9ucykge1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbkZpZWxkcyA9IHRoaXMuZ2V0VW5pcXVlS2V5RmllbGRzRnJvbShkYXRhKTtcbiAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoY29uZGl0aW9uRmllbGRzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBPb2xvbmdVc2FnZUVycm9yKCdQcmltYXJ5IGtleSB2YWx1ZShzKSBvciBhdCBsZWFzdCBvbmUgZ3JvdXAgb2YgdW5pcXVlIGtleSB2YWx1ZShzKSBpcyByZXF1aXJlZCBmb3IgdXBkYXRpbmcgYW4gZW50aXR5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlT3B0aW9ucyA9IHsgJHdoZXJlOiBfLnBpY2soZGF0YSwgY29uZGl0aW9uRmllbGRzKSB9O1xuICAgICAgICAgICAgZGF0YSA9IF8ub21pdChkYXRhLCBjb25kaXRpb25GaWVsZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT3B0aW9ucyA9IHRoaXMuX3ByZXBhcmVXaGVyZSh1cGRhdGVPcHRpb25zLCB0cnVlIC8qIGZvciBzaW5nbGUgcmVjb3JkICovKTtcblxuICAgICAgICBsZXQgY29udGV4dCA9IHsgXG4gICAgICAgICAgICByYXc6IGRhdGEsIFxuICAgICAgICAgICAgdXBkYXRlT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fc2FmZUV4ZWN1dGVfKGFzeW5jIChjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wcmVwYXJlRW50aXR5RGF0YV8oY29udGV4dCwgdHJ1ZSAvKiBpcyB1cGRhdGluZyAqLyk7ICAgICAgICAgIFxuXG4gICAgICAgICAgICBhd2FpdCBGZWF0dXJlcy5hcHBseVJ1bGVzXyhSdWxlcy5SVUxFX0JFRk9SRV9VUERBVEUsIHRoaXMsIGNvbnRleHQpOyAgICAgXG5cbiAgICAgICAgICAgIGNvbnRleHQucmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IudXBkYXRlXyhcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGEubmFtZSwgXG4gICAgICAgICAgICAgICAgY29udGV4dC5sYXRlc3QsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQudXBkYXRlT3B0aW9ucy4kd2hlcmUsXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9uc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZnRlclVwZGF0ZV8oY29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVPcHRpb25zLiRmZXRjaEFycmF5ID8gY29udGV4dC5sYXRlc3QgOiB0aGlzLnBvcHVsYXRlKGNvbnRleHQubGF0ZXN0KTtcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV4aXN0aW5nIGVudGl0eSB3aXRoIGdpdmVuIGRhdGEuICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2RlbGV0ZU9wdGlvbnNdIC0gVXBkYXRlIG9wdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2RlbGV0ZU9wdGlvbnMuJHdoZXJlXSAtIEV4dHJhIGNvbmRpdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZD1mYWxzZV0gLSBSZXRyaWV2ZSB0aGUgdXBkYXRlZCBlbnRpdHkgZnJvbSBkYXRhYmFzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJGZldGNoQXJyYXk9ZmFsc2VdIC0gV2hlbiBmZXRjaEFycmF5ID0gdHJ1ZSwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGRpcmVjdGx5IHdpdGhvdXQgY3JlYXRpbmcgbW9kZWwgb2JqZWN0cy5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRwaHlzaWNhbERlbGV0aW9uPWZhbHNlXSAtIFdoZW4gZmV0Y2hBcnJheSA9IHRydWUsIHRoZSByZXN1bHQgd2lsbCBiZSByZXR1cm5lZCBkaXJlY3RseSB3aXRob3V0IGNyZWF0aW5nIG1vZGVsIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBkZWxldGVfKGRlbGV0ZU9wdGlvbnMsIGNvbm5PcHRpb25zKSB7XG4gICAgICAgIHByZTogZGVsZXRlT3B0aW9ucztcblxuICAgICAgICBkZWxldGVPcHRpb25zID0gdGhpcy5fcHJlcGFyZVdoZXJlKGRlbGV0ZU9wdGlvbnMsIHRydWUgLyogZm9yIHNpbmdsZSByZWNvcmQgKi8pO1xuXG4gICAgICAgIGlmIChfLmlzRW1wdHkoZGVsZXRlT3B0aW9ucy4kd2hlcmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT29sb25nVXNhZ2VFcnJvcignRW1wdHkgY29uZGl0aW9uIGlzIG5vdCBhbGxvd2VkIGZvciBkZWxldGluZyBhbiBlbnRpdHkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tZXRhLmZlYXR1cmVzLmxvZ2ljYWxEZWxldGlvbiAmJiAhZGVsZXRlT3B0aW9ucy4kcGh5c2ljYWxEZWxldGlvbikge1xuICAgICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlIH0gPSB0aGlzLm1ldGEuZmVhdHVyZXMubG9naWNhbERlbGV0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlXyh7IFtmaWVsZF06IHZhbHVlIH0sIHsgXG4gICAgICAgICAgICAgICAgJHdoZXJlOiBkZWxldGVPcHRpb25zLiR3aGVyZSwgXG4gICAgICAgICAgICAgICAgJHJldHJpZXZlVXBkYXRlZDogZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkLFxuICAgICAgICAgICAgICAgICRmZXRjaEFycmF5OiBkZWxldGVPcHRpb25zLiRmZXRjaEFycmF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IGNvbnRleHQgPSB7IFxuICAgICAgICAgICAgZGVsZXRlT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fc2FmZUV4ZWN1dGVfKGFzeW5jIChjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJlZm9yZURlbGV0ZV8oY29udGV4dCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQucmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuZGVsZXRlXyhcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGEubmFtZSwgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGVsZXRlT3B0aW9ucy4kd2hlcmUsXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU9wdGlvbnMuJGZldGNoQXJyYXkgPyBjb250ZXh0LmV4aXN0aW5nIDogdGhpcy5wb3B1bGF0ZShjb250ZXh0LmV4aXN0aW5nKTtcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2UgdHdvIHF1ZXJ5IGNvbmRpdGlvbnMgdXNpbmcgZ2l2ZW4gb3BlcmF0b3IuXG4gICAgICogQHBhcmFtIHsqfSBjb25kaXRpb24xIFxuICAgICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uMiBcbiAgICAgKiBAcGFyYW0geyp9IG9wZXJhdG9yIFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgc3RhdGljIG1lcmdlQ29uZGl0aW9uKGNvbmRpdGlvbjEsIGNvbmRpdGlvbjIsIG9wZXJhdG9yID0gJyRhbmQnKSB7ICAgICAgICBcbiAgICAgICAgaWYgKF8uaXNFbXB0eShjb25kaXRpb24xKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc0VtcHR5KGNvbmRpdGlvbjIpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZGl0aW9uMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IFtvcGVyYXRvcl06IFsgY29uZGl0aW9uMSwgY29uZGl0aW9uMiBdIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciBhIGRhdGEgcmVjb3JkIGNvbnRhaW5zIHByaW1hcnkga2V5IG9yIGF0IGxlYXN0IG9uZSB1bmlxdWUga2V5IHBhaXIuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICovXG4gICAgc3RhdGljIGNvbnRhaW5zVW5pcXVlS2V5KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLm1ldGEudW5pcXVlS2V5cywgZmllbGRzID0+IF8uZXZlcnkoZmllbGRzLCBmID0+IF8uaXNOaWwoZGF0YVtmXSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgdGhlIGNvbmRpdGlvbiBjb250YWlucyBvbmUgb2YgdGhlIHVuaXF1ZSBrZXlzLlxuICAgICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFxuICAgICAqL1xuICAgIHN0YXRpYyBfZW5zdXJlQ29udGFpbnNVbmlxdWVLZXkoY29uZGl0aW9uKSB7XG4gICAgICAgIGxldCBjb250YWluc1VuaXF1ZUtleSA9IHRoaXMuY29udGFpbnNVbmlxdWVLZXkoY29uZGl0aW9uKTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5zVW5pcXVlS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT29sb25nVXNhZ2VFcnJvcignVW5leHBlY3RlZCB1c2FnZS4nLCB7IFxuICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiAnU2luZ2xlIHJlY29yZCBvcGVyYXRpb24gcmVxdWlyZXMgY29uZGl0aW9uIHRvIGJlIGNvbnRhaW5pbmcgdW5pcXVlIGtleS4nLFxuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgdmFsaWQgYW5kIHNhbml0aXplZCBlbnRpdHkgZGF0YSBmb3Igc2VuZGluZyB0byBkYXRhYmFzZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAtIE9wZXJhdGlvbiBjb250ZXh0LlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0LnJhdyAtIFJhdyBpbnB1dCBkYXRhLlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5jb25uT3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IGlzVXBkYXRpbmcgLSBGbGFnIGZvciB1cGRhdGluZyBleGlzdGluZyBlbnRpdHkuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9wcmVwYXJlRW50aXR5RGF0YV8oY29udGV4dCwgaXNVcGRhdGluZyA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5tZXRhO1xuICAgICAgICBsZXQgaTE4biA9IHRoaXMuaTE4bjtcbiAgICAgICAgbGV0IHsgbmFtZSwgZmllbGRzIH0gPSBtZXRhOyAgICAgICAgXG5cbiAgICAgICAgbGV0IHsgcmF3IH0gPSBjb250ZXh0O1xuICAgICAgICBsZXQgbGF0ZXN0ID0ge30sIGV4aXN0aW5nO1xuICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGxhdGVzdDsgICAgICAgXG5cbiAgICAgICAgaWYgKCFjb250ZXh0LmkxOG4pIHtcbiAgICAgICAgICAgIGNvbnRleHQuaTE4biA9IGkxOG47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNVcGRhdGluZyAmJiB0aGlzLl9kZXBlbmRzT25FeGlzdGluZ0RhdGEocmF3KSkge1xuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmNvbm5PcHRpb25zIHx8ICFjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucyB8fCAoY29udGV4dC5jb25uT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbiA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmJlZ2luVHJhbnNhY3Rpb25fKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IC8vIGVsc2UgYWxyZWFkeSBpbiBhIHRyYW5zYWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICR3aGVyZTogY29udGV4dC51cGRhdGVPcHRpb25zLiR3aGVyZSwgJGZldGNoQXJyYXk6IHRydWUgfSwgY29udGV4dC5jb25uT3B0aW9ucyk7ICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmV4aXN0aW5nID0gZXhpc3Rpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGF3YWl0IFV0aWwuZWFjaEFzeW5jXyhmaWVsZHMsIGFzeW5jIChmaWVsZEluZm8sIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSBpbiByYXcpIHtcbiAgICAgICAgICAgICAgICAvL2ZpZWxkIHZhbHVlIGdpdmVuIGluIHJhdyBkYXRhXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgICAgICAvL3JlYWQgb25seSwgbm90IGFsbG93IHRvIHNldCBieSBpbnB1dCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YVZhbGlkYXRpb25FcnJvcihgUmVhZC1vbmx5IGZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgaXMgbm90IGFsbG93ZWQgdG8gYmUgc2V0IGJ5IG1hbnVhbCBpbnB1dC5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IG5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZEluZm86IGZpZWxkSW5mbyBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSAgXG5cbiAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGluZyAmJiBmaWVsZEluZm8ud3JpdGVPbmNlKSB7ICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZyAmJiAhXy5pc05pbChleGlzdGluZ1tmaWVsZE5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERhdGFWYWxpZGF0aW9uRXJyb3IoYFdyaXRlLW9uY2UgZmllbGQgXCIke2ZpZWxkTmFtZX1cIiBpcyBub3QgYWxsb3dlZCB0byBiZSB1cGRhdGUgb25jZSBpdCB3YXMgc2V0LmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvOiBmaWVsZEluZm8gXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9zYW5pdGl6ZSBmaXJzdFxuICAgICAgICAgICAgICAgIGlmIChpc05vdGhpbmcocmF3W2ZpZWxkTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGRJbmZvLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YVZhbGlkYXRpb25FcnJvcihgVGhlIFwiJHtmaWVsZE5hbWV9XCIgdmFsdWUgb2YgXCIke25hbWV9XCIgZW50aXR5IGNhbm5vdCBiZSBudWxsLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvOiBmaWVsZEluZm8gXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdFtmaWVsZE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IFR5cGVzLnNhbml0aXplKHJhd1tmaWVsZE5hbWVdLCBmaWVsZEluZm8sIGkxOG4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vbm90IGdpdmVuIGluIHJhdyBkYXRhXG4gICAgICAgICAgICBpZiAoaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZEluZm8uZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9oYXMgZm9yY2UgdXBkYXRlIHBvbGljeSwgZS5nLiB1cGRhdGVUaW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby51cGRhdGVCeURiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL3JlcXVpcmUgZ2VuZXJhdG9yIHRvIHJlZnJlc2ggYXV0byBnZW5lcmF0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby5hdXRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IGF3YWl0IEdlbmVyYXRvcnMuZGVmYXVsdChmaWVsZEluZm8sIGkxOG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBEYXRhVmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFwiJHtmaWVsZE5hbWV9XCIgb2YgXCIke25hbWV9XCIgZW50dGl5IGlzIHJlcXVpcmVkIGZvciBlYWNoIHVwZGF0ZS5gLCB7ICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBuYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvOiBmaWVsZEluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTsgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgLy9uZXcgcmVjb3JkXG4gICAgICAgICAgICBpZiAoIWZpZWxkSW5mby5jcmVhdGVCeURiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaGFzIGRlZmF1bHQgc2V0dGluZyBpbiBtZXRhIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0W2ZpZWxkTmFtZV0gPSBmaWVsZEluZm8uZGVmYXVsdDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmllbGRJbmZvLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkSW5mby5hdXRvKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYXV0b21hdGljYWxseSBnZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0W2ZpZWxkTmFtZV0gPSBhd2FpdCBHZW5lcmF0b3JzLmRlZmF1bHQoZmllbGRJbmZvLCBpMThuKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbWlzc2luZyByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YVZhbGlkYXRpb25FcnJvcihgXCIke2ZpZWxkTmFtZX1cIiBvZiBcIiR7bmFtZX1cIiBlbnRpdHkgaXMgcmVxdWlyZWQuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvOiBmaWVsZEluZm8gXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gLy8gZWxzZSBkZWZhdWx0IHZhbHVlIHNldCBieSBkYXRhYmFzZSBvciBieSBydWxlc1xuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBGZWF0dXJlcy5hcHBseVJ1bGVzXyhSdWxlcy5SVUxFX0FGVEVSX1ZBTElEQVRJT04sIHRoaXMsIGNvbnRleHQpOyAgICBcblxuICAgICAgICBhd2FpdCB0aGlzLmFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKTtcblxuICAgICAgICB0aGlzLnNlcmlhbGl6ZShjb250ZXh0LmxhdGVzdCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIF9zYWZlRXhlY3V0ZV8oZXhlY3V0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgZXhlY3V0b3IgPSBleGVjdXRvci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIGlmIChjb250ZXh0LmNvbm5PcHRpb25zICYmIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgIHJldHVybiBleGVjdXRvcihjb250ZXh0KTtcbiAgICAgICAgfSBcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGV4ZWN1dG9yKGNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIHRoZSBleGVjdXRvciBoYXZlIGluaXRpYXRlZCBhIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zICYmIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbiAmJiBcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRiLmNvbm5lY3Rvci5jb21taXRfKGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbik7ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy93ZSBoYXZlIHRvIHJvbGxiYWNrIGlmIGVycm9yIG9jY3VycmVkIGluIGEgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnMgJiYgXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uICYmIFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLnJvbGxiYWNrXyhjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgc3RhdGljIF9kZXBlbmRzT25FeGlzdGluZ0RhdGEoaW5wdXQpIHtcbiAgICAgICAgLy9jaGVjayBtb2RpZmllciBkZXBlbmRlbmNpZXNcbiAgICAgICAgbGV0IGRlcHMgPSB0aGlzLm1ldGEuZmllbGREZXBlbmRlbmNpZXM7XG4gICAgICAgIGxldCBoYXNEZXBlbmRzID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGRlcHMpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGhhc0RlcGVuZHMgPSBfLmZpbmQoZGVwcywgKGRlcCwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSBpbiBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kKGRlcCwgZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgWyBzdGFnZSwgZmllbGQgXSA9IGQuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoc3RhZ2UgPT09ICdsYXRlc3QnIHx8IHN0YWdlID09PSAnZXhpc3RuZycpICYmIF8uaXNOaWwoaW5wdXRbZmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChoYXNEZXBlbmRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGJ5IHNwZWNpYWwgcnVsZXNcbiAgICAgICAgbGV0IGF0TGVhc3RPbmVOb3ROdWxsID0gdGhpcy5tZXRhLmZlYXR1cmVzLmF0TGVhc3RPbmVOb3ROdWxsO1xuICAgICAgICBpZiAoYXRMZWFzdE9uZU5vdE51bGwpIHtcbiAgICAgICAgICAgIGhhc0RlcGVuZHMgPSBfLmZpbmQoYXRMZWFzdE9uZU5vdE51bGwsIGZpZWxkcyA9PiBfLmZpbmQoZmllbGRzLCBmaWVsZCA9PiAoZmllbGQgaW4gaW5wdXQpICYmIF8uaXNOaWwoaW5wdXRbZmllbGRdKSkpO1xuICAgICAgICAgICAgaWYgKGhhc0RlcGVuZHMpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2hhc1Jlc2VydmVkS2V5cyhvYmopIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZChvYmosICh2LCBrKSA9PiBrWzBdID09PSAnJCcpO1xuICAgIH1cblxuICAgIHN0YXRpYyBfcHJlcGFyZVdoZXJlKG9wdGlvbnMsIGZvclNpbmdsZVJlY29yZCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmICFvcHRpb25zLiR3aGVyZSAmJiAhdGhpcy5faGFzUmVzZXJ2ZWRLZXlzKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyAkd2hlcmU6IG9wdGlvbnMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgICAgIGlmICghXy5pc1BsYWluT2JqZWN0KG9wdGlvbnMuJHdoZXJlKSkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMubWV0YS5rZXlGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9vbG9uZ1VzYWdlRXJyb3IoJ0Nhbm5vdCB1c2UgYSBzaW5ndWxhciB2YWx1ZSBhcyBjb25kaXRpb24gdG8gcXVlcnkgYWdhaW5zdCBhIGVudGl0eSB3aXRoIGNvbWJpbmVkIHByaW1hcnkga2V5LicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBvcHRpb25zLiR3aGVyZSA9IHsgW3RoaXMubWV0YS5rZXlGaWVsZF06IG9wdGlvbnMuJHdoZXJlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vuc3VyZUNvbnRhaW5zVW5pcXVlS2V5KG9wdGlvbnMuJHdoZXJlKTtcbiAgICAgICAgICAgIH0gICAgICAgIFxuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRW50aXR5TW9kZWw7Il19