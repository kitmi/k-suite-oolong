/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,92,226,234],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,51,82,84,85,90,104,105,132,136,140,142,155,182,225,229,244,251,253,255,256,272,284,295],$Vc=[2,280],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,82,84,85,104],$Vo=[2,63],$Vp=[2,96],$Vq=[1,108],$Vr=[17,295],$Vs=[1,112],$Vt=[17,20,82,84,85,142,147,176,177,190,198,202,217,229,268,270,272,284,295,302,303,305,306,307,308,309,310,313,314],$Vu=[1,122],$Vv=[1,128],$Vw=[17,104],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,82,84,85,104,284],$VC=[1,141],$VD=[1,162],$VE=[1,155],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,178],$VM=[217,272],$VN=[17,20,82,84,85,105,142,147,176,177,190,198,202,217,229,268,270,272,284,295,302,303,305,306,307,308,309,310,313,314],$VO=[147,295],$VP=[1,184],$VQ=[17,20,142,147,176,177,190,198,202,217,229,268,270,272,284,295,302,303,305,306,307,308,309,310,313,314],$VR=[2,262],$VS=[1,186],$VT=[2,105],$VU=[1,191],$VV=[17,20,104,142,147,176,177,190,198,202,217,229,268,270,272,284,295,302,303,305,306,307,308,309,310,313,314],$VW=[20,103,105,109,116,148,149,156,159],$VX=[1,213],$VY=[16,284],$VZ=[2,211],$V_=[1,228],$V$=[1,229],$V01=[1,230],$V11=[1,231],$V21=[17,20,82,84,85,104,142,147,176,177,190,198,202,217,229,268,270,272,284,295,302,303,305,306,307,308,309,310,313,314],$V31=[1,243],$V41=[17,155,229],$V51=[2,150],$V61=[1,268],$V71=[1,294],$V81=[1,295],$V91=[1,296],$Va1=[1,297],$Vb1=[20,257,261,262,273,276],$Vc1=[1,315],$Vd1=[1,314],$Ve1=[1,312],$Vf1=[1,313],$Vg1=[1,310],$Vh1=[1,311],$Vi1=[20,105,140,176,177,251,253,255,256,257,261,262,273,276],$Vj1=[17,105],$Vk1=[16,17,284],$Vl1=[20,261,262,273,276],$Vm1=[1,352],$Vn1=[1,354],$Vo1=[16,146,215,274,275,284,285,286,287,288,289,294,303],$Vp1=[16,20,284],$Vq1=[17,142,284],$Vr1=[17,82,84,85,284],$Vs1=[1,383],$Vt1=[20,262,273,276],$Vu1=[17,20,142,176,177,190,198,284],$Vv1=[17,20,142,147,176,177,190,198,284,313,314],$Vw1=[1,403],$Vx1=[1,405],$Vy1=[1,404],$Vz1=[1,401],$VA1=[1,402],$VB1=[1,406],$VC1=[1,407],$VD1=[1,408],$VE1=[1,409],$VF1=[1,410],$VG1=[20,40],$VH1=[17,284],$VI1=[1,425],$VJ1=[1,426],$VK1=[20,273,276],$VL1=[17,105,142,267,268,269,270,272,284],$VM1=[1,475],$VN1=[1,476],$VO1=[20,276],$VP1=[1,484],$VQ1=[1,502],$VR1=[20,198],$VS1=[20,176,177,198],$VT1=[1,536],$VU1=[17,272],$VV1=[1,548],$VW1=[1,574],$VX1=[1,577],$VY1=[20,194,195],$VZ1=[1,604],$V_1=[17,20,140,194,195];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"identifier_or_string":30,"schema_statement_block":31,"schema_statement_option0":32,"comment_or_not":33,"schema_entities":34,"schema_views_or_not":35,"schema_views":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"general_function_call":83,"|>":84,"|=":85,"entity_statement_header":86,"entity_statement_block":87,"entity_statement_option0":88,"entity_statement_header0":89,"extends":90,"identifier_or_string_list":91,"entity":92,"entity_sub_items":93,"entity_sub_item":94,"with_features":95,"has_fields":96,"associations_statement":97,"key_statement":98,"index_statement":99,"data_statement":100,"interfaces_statement":101,"mixin_statement":102,"mixes":103,"--":104,"with":105,"with_features_block":106,"with_features_option0":107,"feature_inject":108,"has":109,"has_fields_block":110,"has_fields_option0":111,"field_item":112,"field_item_body":113,"modifiable_field":114,"type_base_or_not":115,"associations":116,"associations_block":117,"associations_statement_option0":118,"association_item":119,"association_type_referee":120,"association_item_option0":121,"association_item_option1":122,"association_cases_block":123,"association_item_option2":124,"association_type_referer":125,"association_item_option3":126,"hasOne":127,"hasMany":128,"refersTo":129,"belongsTo":130,"association_through":131,"connectedBy":132,"identifier_string_or_dotname":133,"conditional_expression":134,"association_connection":135,"being":136,"array_of_identifier_or_string":137,"association_cases":138,"association_condition":139,"when":140,"association_as":141,"as":142,"association_qualifiers":143,"optional":144,"default":145,"(":146,")":147,"key":148,"index":149,"index_item":150,"index_statement_block":151,"index_statement_option0":152,"index_item_body":153,"index_item_option0":154,"unique":155,"data":156,"inline_object":157,"inline_array":158,"interface":159,"interfaces_statement_block":160,"interfaces_statement_option0":161,"interface_definition":162,"interface_definition_body":163,"interface_definition_option0":164,"accept_or_not":165,"implementation":166,"return_or_not":167,"accept_statement":168,"accept":169,"modifiable_param":170,"accept_block":171,"accept_statement_option0":172,"operation":173,"find_one_operation":174,"find_one_keywords":175,"findOne":176,"find":177,"article_keyword":178,"selection_inline_keywords":179,"case_statement":180,"cases_keywords":181,"by":182,"cases":183,"below":184,"case_condition_block":185,"case_statement_option0":186,"otherwise_statement":187,"case_statement_option1":188,"case_condition_item":189,"=>":190,"condition_as_result_expression":191,"otherwise_keywords":192,"stop_controll_flow_expression":193,"otherwise":194,"else":195,"return_expression":196,"throw_error_expression":197,"return":198,"modifiable_value":199,"throw":200,"gfc_param_list":201,"unless":202,"return_condition_block":203,"return_or_not_option0":204,"return_condition_item":205,"update_operation":206,"update":207,"where_expr":208,"create_operation":209,"create":210,"delete_operation":211,"delete":212,"coding_block":213,"do":214,"{":215,"javascript":216,"}":217,"assign_operation":218,"set":219,"identifier_or_member_access":220,"<-":221,"value":222,"variable_modifier_or_not":223,"entity_fields_selections":224,"->":225,"dataset":226,"dataset_statement_block":227,"dataset_statement_option0":228,"is":229,"article_keyword_or_not":230,"dataset_join_with_item":231,"dataset_join_with_block":232,"dataset_join_with_item_option0":233,"view":234,"view_statement_block":235,"view_statement_option0":236,"view_main_entity":237,"view_selection_or_not":238,"group_by_or_not":239,"having_or_not":240,"order_by_or_not":241,"skip_or_not":242,"limit_or_not":243,"list":244,"view_selection":245,"a":246,"an":247,"the":248,"one":249,"selection_attributive_keywords":250,"of":251,"which":252,"where":253,"selection_keywords":254,"selectedBy":255,"selected":256,"group":257,"identifier_string_or_dotname_list":258,"identifier_string_or_dotname_block":259,"group_by_or_not_option0":260,"having":261,"order":262,"order_by_list":263,"order_by_block":264,"order_by_or_not_option0":265,"order_by_clause":266,"ascend":267,"<":268,"descend":269,">":270,"order_by_list0":271,",":272,"offset":273,"INTEGER":274,"REFERENCE":275,"limit":276,"gfc_param0":277,"nfc_param_list":278,"nfc_param":279,"nfc_param_list0":280,"gfc_param_list0":281,"DOTNAME":282,"identifier_string_or_dotname_list0":283,"NAME":284,"FLOAT":285,"BOOL":286,"REGEXP":287,"SCRIPT":288,"SYMBOL":289,"kv_pairs":290,"kv_pair_item":291,"non_exist":292,"kv_pairs0":293,"[":294,"]":295,"identifier_or_string_list0":296,"simple_expression":297,"logical_expression":298,"boolean_expression":299,"unary_expression":300,"binary_expression":301,"exists":302,"not":303,"null":304,"~":305,">=":306,"<=":307,"==":308,"!=":309,"in":310,"logical_expression_right":311,"logical_operators":312,"and":313,"or":314,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",85:"|=",90:"extends",92:"entity",103:"mixes",104:"--",105:"with",109:"has",116:"associations",127:"hasOne",128:"hasMany",129:"refersTo",130:"belongsTo",132:"connectedBy",136:"being",140:"when",142:"as",144:"optional",145:"default",146:"(",147:")",148:"key",149:"index",155:"unique",156:"data",159:"interface",169:"accept",176:"findOne",177:"find",182:"by",183:"cases",184:"below",190:"=>",194:"otherwise",195:"else",198:"return",200:"throw",202:"unless",207:"update",208:"where_expr",210:"create",212:"delete",214:"do",215:"{",216:"javascript",217:"}",219:"set",220:"identifier_or_member_access",221:"<-",223:"variable_modifier_or_not",225:"->",226:"dataset",229:"is",234:"view",244:"list",246:"a",247:"an",248:"the",249:"one",251:"of",252:"which",253:"where",255:"selectedBy",256:"selected",257:"group",261:"having",262:"order",267:"ascend",268:"<",269:"descend",270:">",272:",",273:"offset",274:"INTEGER",275:"REFERENCE",276:"limit",282:"DOTNAME",284:"NAME",285:"FLOAT",286:"BOOL",287:"REGEXP",288:"SCRIPT",289:"SYMBOL",294:"[",295:"]",302:"exists",303:"not",304:"null",305:"~",306:">=",307:"<=",308:"==",309:"!=",310:"in",313:"and",314:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[31,3],[35,0],[35,1],[34,6],[38,2],[38,3],[36,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,2],[81,2],[81,2],[81,2],[12,2],[12,6],[86,1],[86,3],[89,2],[87,2],[93,1],[93,2],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[102,3],[33,0],[33,3],[95,6],[106,2],[106,3],[96,6],[110,2],[110,3],[112,2],[50,0],[50,2],[113,1],[115,0],[115,1],[97,6],[117,2],[117,3],[119,5],[119,9],[119,5],[120,1],[120,1],[125,1],[125,1],[131,2],[131,4],[131,1],[131,2],[123,5],[135,2],[135,3],[138,3],[138,4],[139,2],[141,2],[143,1],[143,4],[98,3],[98,3],[99,3],[99,6],[151,2],[151,3],[150,1],[150,3],[153,1],[153,1],[100,3],[100,3],[101,6],[160,1],[160,2],[162,6],[163,3],[165,0],[165,1],[168,3],[168,6],[171,2],[171,3],[166,1],[166,2],[173,1],[175,1],[175,2],[174,4],[174,3],[181,1],[181,2],[181,4],[180,6],[180,7],[189,4],[185,1],[185,2],[187,4],[187,4],[187,7],[192,1],[192,1],[193,1],[193,1],[191,2],[191,5],[196,2],[197,2],[197,2],[197,5],[167,0],[167,2],[167,7],[205,4],[205,4],[203,2],[203,3],[206,6],[209,5],[211,4],[213,5],[218,6],[224,1],[224,3],[14,7],[227,3],[232,1],[232,2],[231,2],[231,8],[13,7],[235,9],[237,3],[237,4],[238,0],[238,1],[245,3],[230,0],[230,1],[178,1],[178,1],[178,1],[178,1],[250,2],[250,1],[250,1],[250,1],[254,1],[254,2],[179,1],[179,1],[239,0],[239,4],[239,7],[240,0],[240,3],[241,0],[241,4],[241,7],[264,2],[264,3],[266,1],[266,2],[266,2],[266,2],[266,2],[263,1],[263,2],[271,2],[271,3],[242,0],[242,3],[242,3],[243,0],[243,3],[243,3],[114,4],[199,1],[199,2],[170,1],[108,1],[108,1],[79,4],[278,1],[278,2],[280,2],[280,3],[279,1],[279,1],[83,4],[201,1],[201,2],[281,2],[281,3],[277,1],[277,1],[277,1],[133,1],[133,1],[133,1],[259,2],[259,3],[258,1],[258,2],[283,2],[283,3],[30,1],[30,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[157,2],[157,3],[291,3],[291,2],[291,3],[292,0],[290,1],[290,2],[293,2],[293,3],[158,2],[158,3],[137,3],[91,1],[91,2],[296,2],[296,3],[222,1],[222,1],[134,1],[134,1],[134,1],[297,1],[297,1],[297,3],[300,2],[300,3],[300,3],[300,4],[300,4],[299,3],[299,3],[299,3],[301,3],[301,3],[301,3],[301,3],[301,3],[301,3],[301,3],[301,4],[298,2],[311,2],[312,1],[312,1],[21,0],[21,1],[25,0],[25,1],[32,0],[32,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[88,0],[88,1],[107,0],[107,1],[111,0],[111,1],[118,0],[118,1],[121,0],[121,1],[122,0],[122,1],[124,0],[124,1],[126,0],[126,1],[152,0],[152,1],[154,0],[154,1],[161,0],[161,1],[164,0],[164,1],[172,0],[172,1],[186,0],[186,1],[188,0],[188,1],[204,0],[204,1],[228,0],[228,1],[233,0],[233,1],[236,0],[236,1],[260,0],[260,1],[265,0],[265,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 99: case 111: case 127: case 137: case 154: case 189: case 233: case 274:
this.$ = [ $$[$0-1] ];
break;
case 31: case 100: case 112: case 138: case 155: case 190: case 234: case 275:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 125: case 199: case 300:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 104: case 147: case 299: case 301:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 156: case 169: case 200: case 240: case 242: case 257: case 259: case 264: case 266: case 276: case 278: case 305: case 307:
this.$ = [ $$[$0] ];
break;
case 72: case 157: case 170: case 201: case 241: case 243: case 258: case 260: case 265: case 267: case 279: case 306: case 308:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { mixins: $$[$0-1] };
break;
case 97:
this.$ = { comment: $$[$0-1] };
break;
case 98:
this.$ = { features: $$[$0-2] };
break;
case 101:
this.$ = { fields: $$[$0-2] };
break;
case 102:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 103:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 106:
this.$ = { comment: $$[$0] };
break;
case 110:
this.$ = { associations: $$[$0-2] };
break;
case 113:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], fieldProps: $$[$0] }    ;
break;
case 114:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: $$[$0-2] };
break;
case 115:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0] } }      ;
break;
case 120:
this.$ = { connectedBy: $$[$0] }    ;
break;
case 121:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] }    ;
break;
case 122:
this.$ = { remoteField: $$[$0] }     ;
break;
case 123:
this.$ = { remoteField: $$[$0] }      ;
break;
case 124:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 126:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 128:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 129:
this.$ = $$[$0];;
break;
case 130:
this.$ = { srcField: $$[$0] };
break;
case 131:
this.$ = { optional: true };
break;
case 132:
this.$ = { default: $$[$0-1] };
break;
case 133: case 134:
this.$ = { key: $$[$0-1] };
break;
case 135:
this.$ = { indexes: [$$[$0-1]] };
break;
case 136:
this.$ = { indexes: $$[$0-2] };
break;
case 140:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 141: case 142:
this.$ = { fields: $$[$0] };
break;
case 143: case 144:
this.$ = { data: $$[$0-1] };
break;
case 145:
this.$ = { interfaces: $$[$0-2] };
break;
case 146:
this.$ = Object.assign({}, $$[$0]);
break;
case 148:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 149:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 152:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 153:
this.$ = { accept: $$[$0-2] };
break;
case 161:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 162:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 166:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 167:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 168:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 171: case 172: case 202: case 293: case 303: case 304: case 316:
this.$ = $$[$0-1];
break;
case 173: case 179:
this.$ = $$[$0-2];
break;
case 180:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 181:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 182:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 183:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 185:
 this.$ = { return: $$[$0-1] }; 
break;
case 186:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 187: case 188:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 191:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 192:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 193:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 194:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 195:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 196:
this.$ = { entity: $$[$0] }     ;
break;
case 197:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 198:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 203:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 204:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 205:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 206:
this.$ = { dataset: $$[$0] };
break;
case 207:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 210:
this.$ = { condition: $$[$0-1] };
break;
case 226:
this.$ = { groupBy: $$[$0-1] };
break;
case 227:
this.$ = { groupBy: $$[$0-2] };
break;
case 229:
this.$ = { having: $$[$0-1] };
break;
case 231:
this.$ = { orderBy: $$[$0-1] };
break;
case 232:
this.$ = { orderBy: $$[$0-2] };
break;
case 235:
this.$ = { field: $$[$0], ascend: true };
break;
case 236: case 237:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 238: case 239:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 245: case 246:
this.$ = { offset: $$[$0-1] };
break;
case 248: case 249:
this.$ = { limit: $$[$0-1] };
break;
case 250:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 252:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 256: case 263:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 262:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 277:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 292:
this.$ = {};
break;
case 294: case 296:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 295:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 302:
this.$ = [];
break;
case 310:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 317:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 318:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 319:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 320:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 321:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 322: case 323:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 324:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 325:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 326:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 327:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 328:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 329:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 330:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 331:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 332:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 333:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 334:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 335:
this.$ = { operator: 'and' };
break;
case 336:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,86:17,89:20,92:$V4,226:$V5,234:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,86:17,89:20,92:$V4,226:$V5,234:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],23:26,26:28,284:$V8},{16:$V9,17:[1,31],26:33,30:32,44:30,284:$V8},{16:$V9,26:33,30:35,284:$V8},{17:[1,36]},{16:$V9,26:33,30:37,284:$V8},{16:$V9,26:33,30:38,284:$V8},{17:[2,81],90:[1,39]},{16:$V9,26:33,30:40,284:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{27:[1,45]},o([17,20,27,51,82,84,85,90,104,105,132,136,140,142,146,147,155,176,177,182,190,198,202,217,225,229,244,251,253,255,256,267,268,269,270,272,284,295,302,303,305,306,307,308,309,310,313,314],[2,282]),{17:[1,46]},{18:[1,47]},{47:48,51:$Va},o($Vb,$Vc),o($Vb,[2,281]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,26:33,30:55,91:54,284:$V8},o([17,90],[2,83]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{23:59,24:58,26:28,284:$V8},{16:$Ve,28:60,157:64,158:65,215:$Vf,274:$Vg,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($V7,[2,32]),{16:$V9,26:33,30:32,44:73,45:72,284:$V8},o($Vn,$Vo,{48:74,77:75,78:76,26:77,79:78,284:$V8}),{16:$V9,26:33,30:90,52:79,53:80,54:81,55:82,56:83,57:84,58:85,59:[1,86],60:[1,87],61:[1,88],62:[1,89],63:[1,91],64:[1,92],65:[1,93],66:[1,94],67:[1,95],68:[1,96],69:[1,97],70:[1,98],71:[1,99],72:[1,100],73:[1,101],74:[1,102],75:[1,103],76:[1,104],284:$V8},{18:[1,105]},o([103,105,109,116,148,149,156,159],$Vp,{87:106,33:107,104:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,82]},o($Vr,[2,305],{296:111,272:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,283]),o($Vt,[2,284]),o($Vt,[2,285]),o($Vt,[2,286]),o($Vt,[2,287]),o($Vt,[2,288]),o($Vt,[2,289]),o($Vt,[2,290]),o($Vt,[2,291]),{16:$V9,26:121,30:120,217:[1,117],274:$Vu,284:$V8,290:118,291:119},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:125,201:124,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,295:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{49:134,80:135,81:136,82:$Vy,84:$Vz,85:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{78:76,26:77,79:78,77:140,284:$V8}),o($VB,[2,67],{146:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),{31:142,33:143,37:$Vp,104:$Vq},{20:[1,144]},{93:145,94:146,95:147,96:148,97:149,98:150,99:151,100:152,101:153,102:154,103:$VD,105:$VE,109:$VF,116:$VG,148:$VH,149:$VI,156:$VJ,159:$VK},{16:[1,163]},{229:[1,166],235:164,237:165},{227:167,229:[1,168]},o($Vr,[2,306]),{16:$V9,26:33,30:169,284:$V8},o($V7,[2,337],{21:170,17:[1,171]}),{16:$Vd,19:172,20:[2,15]},o($V7,[2,339],{25:173,17:[1,174]}),{20:[2,20],23:59,24:175,26:28,284:$V8},o($Vt,[2,292]),{217:[1,176]},{217:[2,298],272:$VL,293:177},{51:[1,179]},o($VM,[2,297],{292:180,51:$Vc}),{51:[1,181]},o($VN,[2,302]),{295:[1,182]},o($VO,[2,264],{281:183,272:$VP}),o($VQ,[2,251],{81:136,80:185,82:$Vy,84:$Vz,85:$VA}),o($Vt,[2,268]),o($Vt,[2,269]),o($Vt,[2,270]),o($Vt,[2,261]),o($Vt,$VR,{146:$VS}),o($V7,[2,347],{46:187,17:[1,188]}),{16:$V9,20:[2,35],26:33,30:32,44:73,45:189,284:$V8},{17:$VT,50:190,104:$VU},o($Vw,[2,70]),o($VV,[2,71],{81:136,80:192,82:$Vy,84:$Vz,85:$VA}),{26:193,83:194,284:$V8},{26:195,83:196,284:$V8},{26:197,83:198,284:$V8},o($Vn,[2,66]),{16:$Ve,26:201,28:130,157:64,158:65,215:$Vf,274:$Vg,278:199,279:200,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{20:[1,202]},{34:203,37:[1,204]},o($V7,[2,349],{88:205,17:[1,206]}),{20:[2,84]},{20:[2,85],93:207,94:146,95:147,96:148,97:149,98:150,99:151,100:152,101:153,102:154,103:$VD,105:$VE,109:$VF,116:$VG,148:$VH,149:$VI,156:$VJ,159:$VK},o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),{17:[1,208]},{17:[1,209]},{17:[1,210]},{16:$V9,26:33,30:211,137:212,284:$V8,294:$VX},{16:$V9,17:[1,215],26:33,30:217,137:218,150:214,153:216,284:$V8,294:$VX},{157:219,158:220,215:$Vf,294:$Vm},{17:[1,221]},{16:$V9,26:33,30:55,91:222,284:$V8},{17:[1,223]},{20:[1,224]},{17:[1,225]},o($VY,$VZ,{230:226,178:227,246:$V_,247:$V$,248:$V01,249:$V11}),{20:[1,232]},o($VY,$VZ,{178:227,230:233,246:$V_,247:$V$,248:$V01,249:$V11}),o($Vr,[2,307],{296:234,272:$Vs}),o($V7,[2,14]),o($V7,[2,338]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,340]),{20:[2,21]},o($Vt,[2,293]),{217:[2,299]},{16:$V9,26:121,30:120,274:$Vu,284:$V8,291:235},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:236,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($VM,[2,295]),{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:237,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($VN,[2,303]),o($VO,[2,265]),{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:238,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($VQ,[2,252]),{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:125,201:239,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($V7,[2,33]),o($V7,[2,348]),{20:[2,36]},{17:[2,34]},{16:[1,240]},o($VV,[2,72]),o($V21,[2,73],{146:$VS}),o($V21,[2,74]),o($V21,[2,75],{146:$VS}),o($V21,[2,76]),o($V21,[2,77],{146:$VS}),o($V21,[2,78]),{147:[1,241]},{147:[2,257],272:$V31,280:242},o([147,272],$VR),o($V7,[2,341],{32:244,17:[1,245]}),{20:[2,24],35:246,36:247,40:[1,248]},{17:[1,249]},o($V7,[2,80]),o($V7,[2,350]),{20:[2,86]},{18:[1,250]},{18:[1,251]},{18:[1,252]},{17:[1,253]},{17:[1,254]},{16:$V9,26:33,30:55,91:255,284:$V8},{17:[1,256]},{18:[1,257]},{17:[2,139],154:258,155:[2,367],229:[1,259]},o($V41,[2,141]),o($V41,[2,142]),{17:[1,260]},{17:[1,261]},{18:[1,262]},{17:[1,263]},o([37,103,105,109,116,148,149,156,159],[2,97]),o($V7,[2,385],{236:264,17:[1,265]}),o([20,105,140,251,253,255,256,257,261,262,273,276],$V51,{165:266,168:267,169:$V61}),{16:$V9,26:33,30:269,284:$V8},o($VY,[2,212]),o($VY,[2,213]),o($VY,[2,214]),o($VY,[2,215]),o($VY,[2,216]),o($V7,[2,381],{228:270,17:[1,271]}),{16:$V9,26:33,30:274,224:273,231:272,284:$V8},o($Vr,[2,308]),{217:[2,300],272:$VL,293:275},o($VM,[2,294]),o($VM,[2,296]),o($VO,[2,266],{281:276,272:$VP}),{147:[1,277]},{17:[2,106]},o($VB,[2,256]),{147:[2,258]},{16:$Ve,26:201,28:130,157:64,158:65,215:$Vf,274:$Vg,279:278,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($V7,[2,22]),o($V7,[2,342]),{20:[2,23]},{20:[2,25]},{17:[1,279]},{18:[1,280]},{26:283,79:284,106:281,108:282,284:$V8},{16:$V9,26:33,30:289,110:285,112:286,113:287,114:288,284:$V8},{117:290,119:291,120:292,125:293,127:$V71,128:$V81,129:$V91,130:$Va1},o($VW,[2,133]),o($VW,[2,134]),{295:[1,298]},o($VW,[2,135]),{16:$V9,26:33,30:217,137:218,150:300,151:299,153:216,284:$V8,294:$VX},{155:[1,301]},{155:[2,368]},o($VW,[2,143]),o($VW,[2,144]),{16:$V9,26:33,30:304,160:302,162:303,284:$V8},o($VW,[2,95]),o($V7,[2,204]),o($V7,[2,386]),o($Vb1,[2,208],{238:305,245:306,179:307,254:308,250:309,105:$Vc1,140:$Vd1,251:$Ve1,253:$Vf1,255:$Vg1,256:$Vh1}),o($Vi1,[2,151]),{16:$V9,17:[1,317],26:33,30:289,114:318,170:316,284:$V8},{17:[2,206],244:[1,319]},o($V7,[2,198]),o($V7,[2,382]),{20:[2,199]},{17:[1,320],105:[1,321]},o($Vj1,[2,196],{225:[1,322]}),{217:[2,301]},o($VO,[2,267]),o($V21,[2,263]),{147:[2,259],272:$V31,280:323},{18:[1,324]},{16:$V9,26:33,30:326,38:325,284:$V8},{20:[1,327]},{17:[1,328]},{17:[2,254],146:$VC},{17:[2,255]},{20:[1,329]},{17:[1,330]},{17:$VT,50:331,104:$VU},o($Vw,[2,107]),o($VB,[2,108],{115:332,47:333,51:$Va}),{20:[1,334]},{17:[1,335]},{16:$V9,17:[1,337],26:33,30:336,284:$V8},{16:$V9,26:33,30:338,284:$V8},o($Vk1,[2,116]),o($Vk1,[2,117]),o($VY,[2,118]),o($VY,[2,119]),o([17,142,155,229,284],[2,304]),{20:[1,339]},{17:[1,340]},{17:[2,140]},{20:[1,341]},{16:$V9,20:[2,146],26:33,30:304,160:342,162:303,284:$V8},{17:[1,343]},o($Vl1,[2,225],{239:344,257:[1,345]}),o($Vb1,[2,209]),{16:$Ve,26:131,28:130,83:129,134:346,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},o($Vo1,[2,223]),o($Vo1,[2,224]),o($Vo1,[2,221]),{182:[1,355]},{252:[1,356]},o($Vo1,[2,218]),o($Vo1,[2,219]),o($Vo1,[2,220]),{17:[1,357]},{18:[1,358]},{17:[2,253]},{17:[2,207]},o($Vp1,[2,202]),{51:[1,359]},{158:360,294:$Vm},{147:[2,260]},{16:$V9,26:33,30:362,41:361,284:$V8},{20:[1,363]},{17:[1,364]},o($VW,[2,351],{107:365,17:[1,366]}),{20:[2,99],26:283,79:284,106:367,108:282,284:$V8},o($VW,[2,353],{111:368,17:[1,369]}),{16:$V9,20:[2,102],26:33,30:289,110:370,112:286,113:287,114:288,284:$V8},{17:[2,104]},o($Vn,$Vo,{77:75,78:76,26:77,79:78,48:371,284:$V8}),o($VB,[2,109]),o($VW,[2,355],{118:372,17:[1,373]}),{20:[2,111],117:374,119:291,120:292,125:293,127:$V71,128:$V81,129:$V91,130:$Va1},o($Vq1,[2,357],{121:375,131:376,135:378,132:[1,377],136:[1,379]}),{18:[1,380]},o($Vr1,[2,363],{126:381,141:382,142:$Vs1}),o($VW,[2,365],{152:384,17:[1,385]}),{16:$V9,20:[2,137],26:33,30:217,137:218,150:300,151:386,153:216,284:$V8,294:$VX},o($VW,[2,369],{161:387,17:[1,388]}),{20:[2,147]},{18:[1,389]},o($Vt1,[2,228],{240:390,261:[1,391]}),{182:[1,392]},{17:[1,393]},o($Vu1,[2,311],{311:394,312:395,313:[1,396],314:[1,397]}),o($Vu1,[2,312]),o($Vu1,[2,313]),o($Vv1,[2,314]),o($Vv1,[2,315]),{16:$Ve,26:131,28:130,83:129,146:$Vm1,157:64,158:65,199:399,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:398,300:350,301:351,303:$Vn1},{229:$Vw1,268:$Vx1,270:$Vy1,302:$Vz1,303:$VA1,305:[1,400],306:$VB1,307:$VC1,308:$VD1,309:$VE1,310:$VF1},{146:[1,411]},o($Vo1,[2,222]),o($Vo1,[2,217]),o($Vi1,[2,152]),{16:$V9,26:33,30:289,114:318,170:413,171:412,284:$V8},{17:[1,414]},o($Vj1,[2,197]),{20:[1,415]},{17:[1,416]},o($VG1,[2,343],{39:417,17:[1,418]}),{16:$V9,20:[2,27],26:33,30:326,38:419,284:$V8},o($VW,[2,98]),o($VW,[2,352]),{20:[2,100]},o($VW,[2,101]),o($VW,[2,354]),{20:[2,103]},o($Vw,$Vx,{80:135,81:136,49:420,82:$Vy,84:$Vz,85:$VA}),o($VW,[2,110]),o($VW,[2,356]),{20:[2,112]},o($VH1,[2,359],{122:421,141:422,142:$Vs1}),o($Vq1,[2,358]),{16:$VI1,26:424,133:423,282:$VJ1,284:$V8},o($Vq1,[2,122]),{16:$V9,26:33,30:428,137:427,284:$V8,294:$VX},{16:$V9,26:33,30:429,284:$V8},o([17,82,84,85],$Vo,{77:75,78:76,26:77,79:78,48:430,284:$V8}),o($Vr1,[2,364]),{16:$V9,26:33,30:431,284:$V8},o($VW,[2,136]),o($VW,[2,366]),{20:[2,138]},o($VW,[2,145]),o($VW,[2,370]),o([176,177],$V51,{168:267,163:432,165:433,169:$V61}),o($VK1,[2,230],{241:434,262:[1,435]}),{16:$Ve,26:131,28:130,83:129,134:436,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{16:$VI1,17:[1,438],26:424,133:439,258:437,282:$VJ1,284:$V8},o($Vb1,[2,210]),o($Vu1,[2,333]),{16:$Ve,26:131,28:130,83:129,146:$Vm1,157:64,158:65,199:399,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:440,300:350,301:351,303:$Vn1},o($Vo1,[2,335]),o($Vo1,[2,336]),{147:[1,441]},{229:$Vw1,268:$Vx1,270:$Vy1,302:$Vz1,303:$VA1,306:$VB1,307:$VC1,308:$VD1,309:$VE1,310:$VF1},{26:442,83:444,284:$V8,287:[1,443]},o($Vv1,[2,317]),{302:[1,445],310:[1,446]},{303:[1,448],304:[1,447]},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:449,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:450,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:451,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:452,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:453,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:454,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:455,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{16:$Ve,26:131,28:130,83:129,146:$Vm1,157:64,158:65,199:399,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:456,300:350,301:351,303:$Vn1},{20:[1,457]},{17:[1,458]},{18:[1,459]},{17:[1,461],20:[2,345],42:460},{16:$V9,20:[2,30],26:33,30:362,41:462,284:$V8},o($VG1,[2,26]),o($VG1,[2,344]),{20:[2,28]},o($Vw,[2,250]),{17:$Vo,26:77,48:463,77:75,78:76,79:78,284:$V8},o($VH1,[2,360]),o($Vq1,[2,120],{105:[1,464]}),o($VL1,[2,271]),o($VL1,[2,272]),o($VL1,[2,273]),o($Vq1,[2,123]),o($Vq1,[2,125],{139:465,105:[1,466]}),{51:[1,468],123:467},{17:$Vx,49:469,80:135,81:136,82:$Vy,84:$Vz,85:$VA},o($Vr1,[2,130]),{20:[1,470]},{166:471,173:472,174:473,175:474,176:$VM1,177:$VN1},o($VO1,[2,244],{242:477,273:[1,478]}),{182:[1,479]},{17:[1,480]},{17:[1,481]},{18:[1,482]},{17:[2,276],272:$VP1,283:483},o($Vu1,[2,334]),o($Vv1,[2,316]),o($Vu1,[2,322],{146:$VS}),o($Vu1,[2,323]),o($Vu1,[2,324]),o($Vv1,[2,318]),{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:485,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($Vv1,[2,319]),{304:[1,486]},o($Vv1,[2,325]),o($Vv1,[2,326]),o($Vv1,[2,327]),o($Vv1,[2,328]),o($Vv1,[2,329]),o($Vv1,[2,330]),o($Vv1,[2,331]),{147:[1,487]},o($Vi1,[2,373],{172:488,17:[1,489]}),{16:$V9,20:[2,154],26:33,30:289,114:318,170:413,171:490,284:$V8},{16:$V9,26:33,30:274,224:273,231:492,232:491,284:$V8},{20:[2,29]},{20:[2,346]},{20:[2,31]},{17:[2,113]},{16:$Ve,26:131,28:130,83:129,134:493,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},o($Vq1,[2,126]),{16:$Ve,26:131,28:130,83:129,134:494,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},o($VH1,[2,361],{124:495,141:496,142:$Vs1}),{17:[1,497]},{17:[2,115]},o($Vp1,[2,371],{164:498,17:[1,499]}),{20:[2,184],167:500,196:501,198:$VQ1},o($VR1,[2,156],{173:472,174:473,175:474,166:503,176:$VM1,177:$VN1}),o($VS1,[2,158]),{16:$V9,26:33,30:504,284:$V8},o($VY,[2,159]),{178:505,246:$V_,247:$V$,248:$V01,249:$V11},{20:[2,247],243:506,276:[1,507]},{274:[1,508],275:[1,509]},{16:$VI1,17:[1,511],26:424,133:513,263:510,266:512,282:$VJ1,284:$V8},o($Vt1,[2,229]),o($Vl1,[2,226]),{16:$VI1,26:424,133:515,259:514,282:$VJ1,284:$V8},{17:[2,277]},{16:$VI1,26:424,133:516,282:$VJ1,284:$V8},o($Vv1,[2,332]),o($Vv1,[2,320]),o($Vv1,[2,321]),o($Vi1,[2,153]),o($Vi1,[2,374]),{20:[2,155]},{20:[1,517]},{16:$V9,20:[2,200],26:33,30:274,224:273,231:492,232:518,284:$V8},o($Vq1,[2,121]),o($Vq1,[2,129]),{17:$Vo,26:77,48:519,77:75,78:76,79:78,284:$V8},o($VH1,[2,362]),{18:[1,520]},o($Vp1,[2,148]),o($Vp1,[2,372]),{20:[2,149]},{17:[1,521],202:[1,522]},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:523,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($VR1,[2,157]),{51:[1,527],105:$Vc1,140:$Vd1,179:524,180:525,181:526,182:[1,528],250:309,251:$Ve1,253:$Vf1,254:308,255:$Vg1,256:$Vh1},o($VY,[2,160]),{20:[2,205]},{274:[1,529],275:[1,530]},{17:[1,531]},{17:[1,532]},{17:[1,533]},{18:[1,534]},{17:[2,240],271:535,272:$VT1},o($VU1,[2,235],{267:[1,537],268:[1,538],269:[1,539],270:[1,540]}),{20:[1,541]},{17:[1,542]},{17:[2,278],272:$VP1,283:543},o($Vp1,[2,383],{233:544,17:[1,545]}),{20:[2,201]},{17:[1,546]},{138:547,140:$VV1},{20:[2,185]},{17:[1,549]},o([17,202],[2,180]),{16:$Ve,26:131,28:130,83:129,134:550,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},o($VS1,[2,162]),{17:[1,551]},{17:[2,163]},{183:[1,552]},{17:[1,553]},{17:[1,554]},o($VO1,[2,245]),o($VO1,[2,246]),o($VK1,[2,231]),{16:$VI1,26:424,133:513,264:555,266:556,282:$VJ1,284:$V8},{17:[2,241]},{16:$VI1,26:424,133:513,266:557,282:$VJ1,284:$V8},o($VU1,[2,236]),o($VU1,[2,237]),o($VU1,[2,238]),o($VU1,[2,239]),o($Vl1,[2,387],{260:558,17:[1,559]}),{16:$VI1,20:[2,274],26:424,133:515,259:560,282:$VJ1,284:$V8},{17:[2,279]},o($Vp1,[2,203]),o($Vp1,[2,384]),{20:[1,561]},{20:[1,562]},{135:563,136:[1,564]},{18:[1,565]},o($VS1,[2,161]),{18:[1,566]},{17:[2,164],142:[1,567]},{20:[2,248]},{20:[2,249]},{20:[1,568]},{17:[1,569]},{17:[2,242],271:570,272:$VT1},o($Vl1,[2,227]),o($Vl1,[2,388]),{20:[2,275]},{17:[2,114]},o($Vq1,[2,124]),{17:[1,571]},{16:$V9,26:33,30:428,284:$V8},{140:$VW1,203:572,205:573},{140:$VX1,185:575,189:576},{184:[1,578]},o($VK1,[2,389],{265:579,17:[1,580]}),{16:$VI1,20:[2,233],26:424,133:513,264:581,266:556,282:$VJ1,284:$V8},{17:[2,243]},{20:[2,127],138:582,140:$VV1},{20:[1,583]},{17:[1,584]},{16:$Ve,26:131,28:130,83:129,134:585,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{20:[1,586],187:587,192:588,194:[1,589],195:[1,590]},o($VY1,[2,169],{189:576,185:591,140:$VX1}),{16:$Ve,26:131,28:130,83:129,134:592,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{17:[2,165]},o($VK1,[2,232]),o($VK1,[2,390]),{20:[2,234]},{20:[2,128]},{17:[1,594],20:[2,379],204:593},{20:[2,189],140:$VW1,203:595,205:573},{190:[1,596]},o($VS1,[2,375],{186:597,17:[1,598]}),{20:[1,599]},{190:[1,600]},{190:[2,174]},{190:[2,175]},o($VY1,[2,170]),{190:[1,601]},{20:[2,186]},{20:[2,380]},{20:[2,190]},{16:$Ve,26:131,28:130,83:129,157:64,158:65,197:603,199:602,200:$VZ1,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},o($VS1,[2,166]),o($VS1,[2,376]),o($VS1,[2,377],{188:605,17:[1,606]}),{16:$Ve,17:[1,609],26:131,28:130,83:129,134:610,146:$Vm1,157:64,158:65,191:607,193:608,196:611,197:612,198:$VQ1,199:353,200:$VZ1,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{16:$Ve,17:[1,614],26:131,28:130,83:129,134:610,146:$Vm1,157:64,158:65,191:613,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{17:[2,187]},{17:[2,188]},{16:[1,615],26:616,284:$V8},o($VS1,[2,167]),o($VS1,[2,378]),{17:[1,617]},{17:[1,618]},{18:[1,619]},{17:[1,620]},{17:[2,176]},{17:[2,177]},o([20,140,194,195],[2,168]),{18:[1,621]},{17:[2,181]},{17:[2,182],146:[1,622]},{20:[2,171]},{20:[2,172]},{16:$Ve,26:131,28:130,83:129,134:624,146:$Vm1,157:64,158:65,193:623,196:611,197:612,198:$VQ1,199:353,200:$VZ1,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},o($V_1,[2,178]),{16:$Ve,26:131,28:130,83:129,134:624,146:$Vm1,157:64,158:65,199:353,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm,297:347,298:348,299:349,300:350,301:351,303:$Vn1},{16:$Ve,26:131,28:130,83:129,157:64,158:65,199:125,201:625,215:$Vf,274:$Vg,275:$Vv,277:126,279:127,284:$V8,285:$Vh,286:$Vi,287:$Vj,288:$Vk,289:$Vl,294:$Vm},{17:[1,626]},{17:[1,627]},{147:[1,628]},{20:[1,629]},{20:[1,630]},{17:[2,183]},{20:[2,173]},o($V_1,[2,179])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],60:[2,19],145:[2,84],172:[2,16],175:[2,21],177:[2,299],189:[2,36],190:[2,34],207:[2,86],240:[2,106],242:[2,258],246:[2,23],247:[2,25],259:[2,368],272:[2,199],275:[2,301],284:[2,255],301:[2,140],318:[2,253],319:[2,207],323:[2,260],331:[2,104],342:[2,147],367:[2,100],370:[2,103],374:[2,112],386:[2,138],419:[2,28],460:[2,29],461:[2,346],462:[2,31],463:[2,113],469:[2,115],483:[2,277],490:[2,155],500:[2,149],506:[2,205],518:[2,201],521:[2,185],527:[2,163],535:[2,241],543:[2,279],553:[2,248],554:[2,249],560:[2,275],561:[2,114],570:[2,243],578:[2,165],581:[2,234],582:[2,128],589:[2,174],590:[2,175],593:[2,186],594:[2,380],595:[2,190],602:[2,187],603:[2,188],611:[2,176],612:[2,177],615:[2,181],617:[2,171],618:[2,172],628:[2,183],629:[2,173]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),        
    };

    //next state transition table
    const NEXT_STATE = {
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',
        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([                        
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],
        [ 'import.block', 1 ],
        [ 'type.block', 1 ],
        [ 'const.block', 1 ],         
        [ 'entity.mixes', 1 ],
        [ 'entity.key', 1 ],        
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //exceptions of NEWLINE_STOPPER in the case of indent happens
    const NEWLINE_STOPPER_INDENT_EXCEPTION = new Set([           
        'import',
        'type',     
        'const'
    ]);

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when',
        'entity.associations.item',
        'entity.associations.item.block.when'                
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            if (NEWLINE_STOPPER_INDENT_EXCEPTION.has(this.lastState)) {
                this.markNewlineStop(false);
            }

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    if (DBG_MODE) {
                        console.log('< exit state:', last, '\n');
                    }
                } while (last !== finalStateToExit);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 288;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 287;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 285;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 274;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 274;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 282;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 289;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 275;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 286;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                    /*
                                    if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                        state.exitState(state.lastState);                                                                        
                                    }*/

                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                }                                

                                return 284;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)|(exists|null)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}