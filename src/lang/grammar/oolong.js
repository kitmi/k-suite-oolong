/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,21,27,38,85,207,213],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,45,76,78,79,83,97,98,125,129,131,139,163,169,206,209,222,229,231,233,234,248,260,271],$Vc=[2,268],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,76,78,79,97],$Vo=[2,63],$Vp=[2,96],$Vq=[1,108],$Vr=[17,271],$Vs=[1,112],$Vt=[17,20,76,78,79,129,131,157,158,170,178,183,184,198,209,244,246,248,271,278,279,281,282,283,284,285,286,289,290],$Vu=[1,122],$Vv=[1,128],$Vw=[17,97],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,76,78,79,97,260],$VC=[1,141],$VD=[1,162],$VE=[1,155],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,174],$VM=[198,248],$VN=[17,20,76,78,79,98,129,131,157,158,170,178,183,184,198,209,244,246,248,271,278,279,281,282,283,284,285,286,289,290],$VO=[183,271],$VP=[1,180],$VQ=[17,20,129,131,157,158,170,178,183,184,198,209,244,246,248,271,278,279,281,282,283,284,285,286,289,290],$VR=[2,250],$VS=[1,182],$VT=[2,105],$VU=[1,185],$VV=[17,20,97,129,131,157,158,170,178,183,184,198,209,244,246,248,271,278,279,281,282,283,284,285,286,289,290],$VW=[20,96,98,101,107,132,134,140,143],$VX=[1,205],$VY=[16,260],$VZ=[2,199],$V_=[1,220],$V$=[1,221],$V01=[1,222],$V11=[1,223],$V21=[17,20,76,78,79,97,129,131,157,158,170,178,183,184,198,209,244,246,248,271,278,279,281,282,283,284,285,286,289,290],$V31=[1,235],$V41=[17,139,209],$V51=[2,138],$V61=[1,256],$V71=[1,278],$V81=[1,279],$V91=[1,280],$Va1=[1,281],$Vb1=[20,235,238,239,249,252],$Vc1=[1,299],$Vd1=[1,298],$Ve1=[1,296],$Vf1=[1,297],$Vg1=[1,294],$Vh1=[1,295],$Vi1=[20,98,157,158,169,229,231,233,234,235,238,239,249,252],$Vj1=[17,98],$Vk1=[20,238,239,249,252],$Vl1=[1,337],$Vm1=[1,339],$Vn1=[16,181,196,250,251,260,261,262,263,264,265,270,279],$Vo1=[16,20,260],$Vp1=[17,129,131],$Vq1=[1,356],$Vr1=[17,131],$Vs1=[1,361],$Vt1=[20,239,249,252],$Vu1=[17,20,129,131,157,158,170,178],$Vv1=[17,20,129,131,157,158,170,178,183,289,290],$Vw1=[1,379],$Vx1=[1,381],$Vy1=[1,380],$Vz1=[1,377],$VA1=[1,378],$VB1=[1,382],$VC1=[1,383],$VD1=[1,384],$VE1=[1,385],$VF1=[1,386],$VG1=[1,399],$VH1=[1,400],$VI1=[1,405],$VJ1=[20,249,252],$VK1=[17,98,129,131,243,244,245,246,248],$VL1=[1,448],$VM1=[1,449],$VN1=[20,252],$VO1=[1,457],$VP1=[1,467],$VQ1=[20,178],$VR1=[20,157,158,178],$VS1=[1,499],$VT1=[17,248],$VU1=[1,525],$VV1=[1,528],$VW1=[20,174,175],$VX1=[1,548],$VY1=[17,20,169,174,175];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"const":21,"const_statement_item":22,"const_statement_block":23,"identifier":24,"=":25,"literal":26,"schema":27,"identifier_or_string":28,"schema_statement_block":29,"comment_or_not":30,"schema_entities":31,"schema_views_or_not":32,"schema_views":33,"entities":34,"schema_entities_block":35,"views":36,"schema_views_block":37,"type":38,"type_statement_item":39,"type_statement_block":40,"type_base":41,"type_info_or_not":42,"type_modifiers_or_not":43,"field_comment_or_not":44,":":45,"types":46,"int_keyword":47,"number_keyword":48,"text_keyword":49,"bool_keyword":50,"binary_keyword":51,"datetime_keyword":52,"any":53,"enum":54,"array":55,"object":56,"int":57,"integer":58,"number":59,"float":60,"decimal":61,"text":62,"string":63,"bool":64,"boolean":65,"blob":66,"binary":67,"buffer":68,"datetime":69,"timestamp":70,"type_infos":71,"type_info":72,"narrow_function_call":73,"type_modifiers":74,"type_modifier":75,"|~":76,"general_function_call":77,"|>":78,"|=":79,"entity_statement_header":80,"entity_statement_block":81,"entity_statement_header0":82,"extends":83,"identifier_or_string_list":84,"entity":85,"entity_sub_items":86,"entity_sub_item":87,"with_features":88,"has_fields":89,"associations_statement":90,"key_statement":91,"index_statement":92,"data_statement":93,"interfaces_statement":94,"mixin_statement":95,"mixes":96,"--":97,"with":98,"with_features_block":99,"feature_inject":100,"has":101,"has_fields_block":102,"field_item":103,"field_item_body":104,"modifiable_field":105,"type_base_or_not":106,"associations":107,"associations_block":108,"association_item":109,"hasOne":110,"association_item_option0":111,"association_item_option1":112,"association_item_option2":113,"hasMany":114,"association_item_option3":115,"association_item_option4":116,"association_item_option5":117,"refersTo":118,"association_item_option6":119,"association_item_option7":120,"belongsTo":121,"association_item_option8":122,"association_item_option9":123,"association_through":124,"connectedBy":125,"identifier_string_or_dotname":126,"conditional_expression":127,"association_as":128,"as":129,"association_optional":130,"optional":131,"key":132,"array_of_identifier_or_string":133,"index":134,"index_item":135,"index_statement_block":136,"index_item_body":137,"index_item_option0":138,"unique":139,"data":140,"inline_object":141,"inline_array":142,"interface":143,"interfaces_statement_block":144,"interface_definition":145,"interface_definition_body":146,"accept_or_not":147,"implementation":148,"return_or_not":149,"accept_statement":150,"accept":151,"modifiable_param":152,"accept_block":153,"operation":154,"find_one_operation":155,"find_one_keywords":156,"findOne":157,"find":158,"article_keyword":159,"selection_inline_keywords":160,"case_statement":161,"cases_keywords":162,"by":163,"cases":164,"below":165,"case_condition_block":166,"otherwise_statement":167,"case_condition_item":168,"when":169,"=>":170,"condition_as_result_expression":171,"otherwise_keywords":172,"stop_controll_flow_expression":173,"otherwise":174,"else":175,"return_expression":176,"throw_error_expression":177,"return":178,"modifiable_value":179,"throw":180,"(":181,"gfc_param_list":182,")":183,"unless":184,"return_condition_block":185,"return_condition_item":186,"update_operation":187,"update":188,"where_expr":189,"create_operation":190,"create":191,"delete_operation":192,"delete":193,"coding_block":194,"do":195,"{":196,"javascript":197,"}":198,"assign_operation":199,"set":200,"identifier_or_member_access":201,"<-":202,"value":203,"variable_modifier_or_not":204,"entity_fields_selections":205,"->":206,"dataset":207,"dataset_statement_block":208,"is":209,"article_keyword_or_not":210,"dataset_join_with_item":211,"dataset_join_with_block":212,"view":213,"view_statement_block":214,"view_main_entity":215,"view_selection_or_not":216,"group_by_or_not":217,"having_or_not":218,"order_by_or_not":219,"skip_or_not":220,"limit_or_not":221,"list":222,"view_selection":223,"a":224,"an":225,"the":226,"one":227,"selection_attributive_keywords":228,"of":229,"which":230,"where":231,"selection_keywords":232,"selectedBy":233,"selected":234,"group":235,"identifier_string_or_dotname_list":236,"identifier_string_or_dotname_block":237,"having":238,"order":239,"order_by_list":240,"order_by_block":241,"order_by_clause":242,"ascend":243,"<":244,"descend":245,">":246,"order_by_list0":247,",":248,"offset":249,"INTEGER":250,"REFERENCE":251,"limit":252,"gfc_param0":253,"nfc_param_list":254,"nfc_param":255,"nfc_param_list0":256,"gfc_param_list0":257,"DOTNAME":258,"identifier_string_or_dotname_list0":259,"NAME":260,"FLOAT":261,"BOOL":262,"REGEXP":263,"SCRIPT":264,"SYMBOL":265,"kv_pairs":266,"kv_pair_item":267,"non_exist":268,"kv_pairs0":269,"[":270,"]":271,"identifier_or_string_list0":272,"simple_expression":273,"logical_expression":274,"boolean_expression":275,"unary_expression":276,"binary_expression":277,"exists":278,"not":279,"null":280,"~":281,">=":282,"<=":283,"==":284,"!=":285,"in":286,"logical_expression_right":287,"logical_operators":288,"and":289,"or":290,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",21:"const",25:"=",27:"schema",34:"entities",36:"views",38:"type",45:":",53:"any",54:"enum",55:"array",56:"object",57:"int",58:"integer",59:"number",60:"float",61:"decimal",62:"text",63:"string",64:"bool",65:"boolean",66:"blob",67:"binary",68:"buffer",69:"datetime",70:"timestamp",76:"|~",78:"|>",79:"|=",83:"extends",85:"entity",96:"mixes",97:"--",98:"with",101:"has",107:"associations",110:"hasOne",114:"hasMany",118:"refersTo",121:"belongsTo",125:"connectedBy",129:"as",131:"optional",132:"key",134:"index",139:"unique",140:"data",143:"interface",151:"accept",157:"findOne",158:"find",163:"by",164:"cases",165:"below",169:"when",170:"=>",174:"otherwise",175:"else",178:"return",180:"throw",181:"(",183:")",184:"unless",188:"update",189:"where_expr",191:"create",193:"delete",195:"do",196:"{",197:"javascript",198:"}",200:"set",201:"identifier_or_member_access",202:"<-",204:"variable_modifier_or_not",206:"->",207:"dataset",209:"is",213:"view",222:"list",224:"a",225:"an",226:"the",227:"one",229:"of",230:"which",231:"where",233:"selectedBy",234:"selected",235:"group",238:"having",239:"order",243:"ascend",244:"<",245:"descend",246:">",248:",",249:"offset",250:"INTEGER",251:"REFERENCE",252:"limit",258:"DOTNAME",260:"NAME",261:"FLOAT",262:"BOOL",263:"REGEXP",264:"SCRIPT",265:"SYMBOL",270:"[",271:"]",278:"exists",279:"not",280:"null",281:"~",282:">=",283:"<=",284:"==",285:"!=",286:"in",289:"and",290:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[19,2],[19,3],[9,3],[9,5],[22,3],[23,2],[23,3],[11,6],[29,3],[32,0],[32,1],[31,5],[35,2],[35,3],[33,5],[37,2],[37,3],[10,3],[10,5],[39,5],[40,2],[40,3],[41,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[50,1],[50,1],[51,1],[51,1],[51,1],[52,1],[52,1],[42,0],[42,1],[71,1],[71,2],[72,1],[72,1],[43,0],[43,1],[74,1],[74,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[12,2],[12,5],[80,1],[80,3],[82,2],[81,2],[86,1],[86,2],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[95,3],[30,0],[30,3],[88,5],[99,2],[99,3],[89,5],[102,2],[102,3],[103,2],[44,0],[44,2],[104,1],[106,0],[106,1],[90,5],[108,2],[108,3],[109,5],[109,5],[109,4],[109,4],[124,2],[124,4],[128,2],[130,1],[91,3],[91,3],[92,3],[92,5],[136,2],[136,3],[135,1],[135,3],[137,1],[137,1],[93,3],[93,3],[94,5],[144,1],[144,2],[145,5],[146,3],[147,0],[147,1],[150,3],[150,5],[153,2],[153,3],[148,1],[148,2],[154,1],[156,1],[156,2],[155,4],[155,3],[162,1],[162,2],[162,4],[161,5],[161,6],[168,4],[166,1],[166,2],[167,4],[167,4],[167,7],[172,1],[172,1],[173,1],[173,1],[171,2],[171,5],[176,2],[177,2],[177,2],[177,5],[149,0],[149,2],[149,6],[186,4],[186,4],[185,2],[185,3],[187,6],[190,5],[192,4],[194,5],[199,6],[205,1],[205,3],[14,6],[208,3],[212,1],[212,2],[211,2],[211,7],[13,6],[214,9],[215,3],[215,4],[216,0],[216,1],[223,3],[210,0],[210,1],[159,1],[159,1],[159,1],[159,1],[228,2],[228,1],[228,1],[228,1],[232,1],[232,2],[160,1],[160,1],[217,0],[217,4],[217,6],[218,0],[218,3],[219,0],[219,4],[219,6],[241,2],[241,3],[242,1],[242,2],[242,2],[242,2],[242,2],[240,1],[240,2],[247,2],[247,3],[220,0],[220,3],[220,3],[221,0],[221,3],[221,3],[105,4],[179,1],[179,2],[152,1],[100,1],[100,1],[73,4],[254,1],[254,2],[256,2],[256,3],[255,1],[255,1],[77,4],[182,1],[182,2],[257,2],[257,3],[253,1],[253,1],[253,1],[126,1],[126,1],[126,1],[237,2],[237,3],[236,1],[236,2],[259,2],[259,3],[28,1],[28,1],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[141,2],[141,3],[267,3],[267,2],[267,3],[268,0],[266,1],[266,2],[269,2],[269,3],[142,2],[142,3],[133,3],[84,1],[84,2],[272,2],[272,3],[203,1],[203,1],[127,1],[127,1],[127,1],[273,1],[273,1],[273,3],[276,2],[276,3],[276,3],[276,4],[276,4],[275,3],[275,3],[275,3],[277,3],[277,3],[277,3],[277,3],[277,3],[277,3],[277,3],[277,4],[274,2],[287,2],[288,1],[288,1],[111,0],[111,1],[112,0],[112,1],[113,0],[113,1],[115,0],[115,1],[116,0],[116,1],[117,0],[117,1],[119,0],[119,1],[120,0],[120,1],[122,0],[122,1],[123,0],[123,1],[138,0],[138,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-1] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-1] };
break;
case 30: case 99: case 111: case 125: case 142: case 177: case 221: case 262:
this.$ = [ $$[$0-1] ];
break;
case 31: case 100: case 112: case 126: case 143: case 178: case 222: case 263:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 83: case 187: case 288:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 84: case 104: case 135: case 287: case 289:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 144: case 157: case 188: case 228: case 230: case 245: case 247: case 252: case 254: case 264: case 266: case 293: case 295:
this.$ = [ $$[$0] ];
break;
case 72: case 145: case 158: case 189: case 229: case 231: case 246: case 248: case 253: case 255: case 267: case 294: case 296:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator($$[$0]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 76:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 79:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 80:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 81:
this.$ = [ $$[$0], {} ];
break;
case 82:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 86:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 95:
this.$ = { mixins: $$[$0-1] };
break;
case 97:
this.$ = { comment: $$[$0-1] };
break;
case 98:
this.$ = { features: $$[$0-1] };
break;
case 101:
this.$ = { fields: $$[$0-1] };
break;
case 102:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 103:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 106:
this.$ = { comment: $$[$0] };
break;
case 110:
this.$ = { associations: $$[$0-1] };
break;
case 113:
this.$ = { type: 'hasOne', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 114:
this.$ = { type: 'hasMany', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 115:
this.$ = { type: 'refersTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 116:
this.$ = { type: 'belongsTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 117:
this.$ = { connectedBy: $$[$0] };
break;
case 118:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] };
break;
case 119:
this.$ = { srcField: $$[$0] };
break;
case 120:
this.$ = { optional: true };
break;
case 121: case 122:
this.$ = { key: $$[$0-1] };
break;
case 123:
this.$ = { indexes: [$$[$0-1]] };
break;
case 124:
this.$ = { indexes: $$[$0-1] };
break;
case 128:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 129: case 130:
this.$ = { fields: $$[$0] };
break;
case 131: case 132:
this.$ = { data: $$[$0-1] };
break;
case 133:
this.$ = { interfaces: $$[$0-1] };
break;
case 134:
this.$ = Object.assign({}, $$[$0]);
break;
case 136:
this.$ = { [$$[$0-4]]: $$[$0-1] };
break;
case 137:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 140:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 141:
this.$ = { accept: $$[$0-1] };
break;
case 149:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 150:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 154:
this.$ = { oolType: 'cases', items: $$[$0-1] };
break;
case 155:
this.$ = { oolType: 'cases', items: $$[$0-2], else: $$[$0-1] } ;
break;
case 156:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 159: case 160: case 190: case 281: case 291: case 292: case 304:
this.$ = $$[$0-1];
break;
case 161: case 167:
this.$ = $$[$0-2];
break;
case 168:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 169:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 170:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 171:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 173:
 this.$ = { return: $$[$0-1] }; 
break;
case 174:
 this.$ = { return: Object.assign($$[$0-5], { exceptions: $$[$0-1] }) }; 
break;
case 175: case 176:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 179:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 180:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 181:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 182:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 183:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 184:
this.$ = { entity: $$[$0] }     ;
break;
case 185:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 186:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 191:
this.$ = { ...$$[$0-6], with: $$[$0-1] };
break;
case 192:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 193:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 194:
this.$ = { dataset: $$[$0] };
break;
case 195:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 198:
this.$ = { condition: $$[$0-1] };
break;
case 214: case 215:
this.$ = { groupBy: $$[$0-1] };
break;
case 217:
this.$ = { having: $$[$0-1] };
break;
case 219: case 220:
this.$ = { orderBy: $$[$0-1] };
break;
case 223:
this.$ = { field: $$[$0], ascend: true };
break;
case 224: case 225:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 226: case 227:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 233: case 234:
this.$ = { offset: $$[$0-1] };
break;
case 236: case 237:
this.$ = { limit: $$[$0-1] };
break;
case 238:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 240:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 244: case 251:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 250:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 265:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 280:
this.$ = {};
break;
case 282: case 284:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 283:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 290:
this.$ = [];
break;
case 298:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 305:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 306:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 307:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 308:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 309:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 310: case 311:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 312:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 313:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 314:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 315:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 316:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 317:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 318:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 319:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 320:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 321:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 322:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 323:
this.$ = { operator: 'and' };
break;
case 324:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,207:$V5,213:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,21:$V1,27:$V2,38:$V3,80:17,82:20,85:$V4,207:$V5,213:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],22:26,24:28,260:$V8},{16:$V9,17:[1,31],24:33,28:32,39:30,260:$V8},{16:$V9,24:33,28:35,260:$V8},{17:[1,36]},{16:$V9,24:33,28:37,260:$V8},{16:$V9,24:33,28:38,260:$V8},{17:[2,81],83:[1,39]},{16:$V9,24:33,28:40,260:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{25:[1,45]},o([17,20,25,45,76,78,79,83,97,98,125,129,131,139,157,158,163,169,170,178,181,183,184,198,206,209,222,229,231,233,234,243,244,245,246,248,260,271,278,279,281,282,283,284,285,286,289,290],[2,270]),{17:[1,46]},{18:[1,47]},{41:48,45:$Va},o($Vb,$Vc),o($Vb,[2,269]),{17:[1,50]},o($V7,[2,79],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,24:33,28:55,84:54,260:$V8},o([17,83],[2,83]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{22:59,23:58,24:28,260:$V8},{16:$Ve,26:60,141:64,142:65,196:$Vf,250:$Vg,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($V7,[2,32]),{16:$V9,24:33,28:32,39:73,40:72,260:$V8},o($Vn,$Vo,{42:74,71:75,72:76,24:77,73:78,260:$V8}),{16:$V9,24:33,28:90,46:79,47:80,48:81,49:82,50:83,51:84,52:85,53:[1,86],54:[1,87],55:[1,88],56:[1,89],57:[1,91],58:[1,92],59:[1,93],60:[1,94],61:[1,95],62:[1,96],63:[1,97],64:[1,98],65:[1,99],66:[1,100],67:[1,101],68:[1,102],69:[1,103],70:[1,104],260:$V8},{18:[1,105]},o([96,98,101,107,132,134,140,143],$Vp,{81:106,30:107,97:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,82]},o($Vr,[2,293],{272:111,248:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,271]),o($Vt,[2,272]),o($Vt,[2,273]),o($Vt,[2,274]),o($Vt,[2,275]),o($Vt,[2,276]),o($Vt,[2,277]),o($Vt,[2,278]),o($Vt,[2,279]),{16:$V9,24:121,28:120,198:[1,117],250:$Vu,260:$V8,266:118,267:119},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:125,182:124,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,271:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{43:134,74:135,75:136,76:$Vy,78:$Vz,79:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{72:76,24:77,73:78,71:140,260:$V8}),o($VB,[2,67],{181:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),{29:142,30:143,34:$Vp,97:$Vq},{20:[1,144]},{86:145,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,132:$VH,134:$VI,140:$VJ,143:$VK},{16:[1,163]},{209:[1,166],214:164,215:165},{208:167,209:[1,168]},o($Vr,[2,294]),{16:$V9,24:33,28:169,260:$V8},o($V7,[2,14]),{16:$Vd,19:170,20:[2,15]},o($V7,[2,18]),{20:[2,20],22:59,23:171,24:28,260:$V8},o($Vt,[2,280]),{198:[1,172]},{198:[2,286],248:$VL,269:173},{45:[1,175]},o($VM,[2,285],{268:176,45:$Vc}),{45:[1,177]},o($VN,[2,290]),{271:[1,178]},o($VO,[2,252],{257:179,248:$VP}),o($VQ,[2,239],{75:136,74:181,76:$Vy,78:$Vz,79:$VA}),o($Vt,[2,256]),o($Vt,[2,257]),o($Vt,[2,258]),o($Vt,[2,249]),o($Vt,$VR,{181:$VS}),o($V7,[2,33]),{16:$V9,20:[2,35],24:33,28:32,39:73,40:183,260:$V8},{17:$VT,44:184,97:$VU},o($Vw,[2,70]),o($VV,[2,71],{75:136,74:186,76:$Vy,78:$Vz,79:$VA}),{24:187,77:188,260:$V8},{24:189,77:190,260:$V8},{24:191,77:192,260:$V8},o($Vn,[2,66]),{16:$Ve,24:195,26:130,141:64,142:65,196:$Vf,250:$Vg,254:193,255:194,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{20:[1,196]},{31:197,34:[1,198]},o($V7,[2,80]),{20:[2,84]},{20:[2,85],86:199,87:146,88:147,89:148,90:149,91:150,92:151,93:152,94:153,95:154,96:$VD,98:$VE,101:$VF,107:$VG,132:$VH,134:$VI,140:$VJ,143:$VK},o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),{17:[1,200]},{17:[1,201]},{17:[1,202]},{16:$V9,24:33,28:203,133:204,260:$V8,270:$VX},{16:$V9,17:[1,207],24:33,28:209,133:210,135:206,137:208,260:$V8,270:$VX},{141:211,142:212,196:$Vf,270:$Vm},{17:[1,213]},{16:$V9,24:33,28:55,84:214,260:$V8},{17:[1,215]},{20:[1,216]},{17:[1,217]},o($VY,$VZ,{210:218,159:219,224:$V_,225:$V$,226:$V01,227:$V11}),{20:[1,224]},o($VY,$VZ,{159:219,210:225,224:$V_,225:$V$,226:$V01,227:$V11}),o($Vr,[2,295],{272:226,248:$Vs}),{20:[2,16]},{20:[2,21]},o($Vt,[2,281]),{198:[2,287]},{16:$V9,24:121,28:120,250:$Vu,260:$V8,267:227},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:228,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($VM,[2,283]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:229,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($VN,[2,291]),o($VO,[2,253]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:230,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($VQ,[2,240]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:125,182:231,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{20:[2,36]},{17:[2,34]},{16:[1,232]},o($VV,[2,72]),o($V21,[2,73],{181:$VS}),o($V21,[2,74]),o($V21,[2,75],{181:$VS}),o($V21,[2,76]),o($V21,[2,77],{181:$VS}),o($V21,[2,78]),{183:[1,233]},{183:[2,245],248:$V31,256:234},o([183,248],$VR),o($V7,[2,22]),{20:[2,24],32:236,33:237,36:[1,238]},{17:[1,239]},{20:[2,86]},{18:[1,240]},{18:[1,241]},{18:[1,242]},{17:[1,243]},{17:[1,244]},{16:$V9,24:33,28:55,84:245,260:$V8},{17:[1,246]},{18:[1,247]},{17:[2,127],138:248,139:[2,345],209:[1,249]},o($V41,[2,129]),o($V41,[2,130]),{17:[1,250]},{17:[1,251]},{18:[1,252]},{17:[1,253]},o([34,96,98,101,107,132,134,140,143],[2,97]),o($V7,[2,192]),o([20,98,169,229,231,233,234,235,238,239,249,252],$V51,{147:254,150:255,151:$V61}),{16:$V9,24:33,28:257,260:$V8},o($VY,[2,200]),o($VY,[2,201]),o($VY,[2,202]),o($VY,[2,203]),o($VY,[2,204]),o($V7,[2,186]),{16:$V9,24:33,28:260,205:259,211:258,260:$V8},o($Vr,[2,296]),{198:[2,288],248:$VL,269:261},o($VM,[2,282]),o($VM,[2,284]),o($VO,[2,254],{257:262,248:$VP}),{183:[1,263]},{17:[2,106]},o($VB,[2,244]),{183:[2,246]},{16:$Ve,24:195,26:130,141:64,142:65,196:$Vf,250:$Vg,255:264,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{20:[2,23]},{20:[2,25]},{17:[1,265]},{18:[1,266]},{24:269,73:270,99:267,100:268,260:$V8},{16:$V9,24:33,28:275,102:271,103:272,104:273,105:274,260:$V8},{108:276,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($VW,[2,121]),o($VW,[2,122]),{271:[1,282]},o($VW,[2,123]),{16:$V9,24:33,28:209,133:210,135:284,136:283,137:208,260:$V8,270:$VX},{139:[1,285]},{139:[2,346]},o($VW,[2,131]),o($VW,[2,132]),{16:$V9,24:33,28:288,144:286,145:287,260:$V8},o($VW,[2,95]),o($Vb1,[2,196],{216:289,223:290,160:291,232:292,228:293,98:$Vc1,169:$Vd1,229:$Ve1,231:$Vf1,233:$Vg1,234:$Vh1}),o($Vi1,[2,139]),{16:$V9,17:[1,301],24:33,28:275,105:302,152:300,260:$V8},{17:[2,194],222:[1,303]},{20:[2,187]},{17:[1,304],98:[1,305]},o($Vj1,[2,184],{206:[1,306]}),{198:[2,289]},o($VO,[2,255]),o($V21,[2,251]),{183:[2,247],248:$V31,256:307},{18:[1,308]},{16:$V9,24:33,28:310,35:309,260:$V8},{20:[1,311]},{17:[1,312]},{17:[2,242],181:$VC},{17:[2,243]},{20:[1,313]},{17:[1,314]},{17:$VT,44:315,97:$VU},o($Vw,[2,107]),o($VB,[2,108],{106:316,41:317,45:$Va}),{20:[1,318]},{17:[1,319]},{16:$V9,24:33,28:320,260:$V8},{16:$V9,24:33,28:321,260:$V8},{16:$V9,24:33,28:322,260:$V8},{16:$V9,24:33,28:323,260:$V8},o($V41,[2,292]),{20:[1,324]},{17:[1,325]},{17:[2,128]},{20:[1,326]},{16:$V9,20:[2,134],24:33,28:288,144:327,145:287,260:$V8},{17:[1,328]},o($Vk1,[2,213],{217:329,235:[1,330]}),o($Vb1,[2,197]),{16:$Ve,24:131,26:130,77:129,127:331,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},o($Vn1,[2,211]),o($Vn1,[2,212]),o($Vn1,[2,209]),{163:[1,340]},{230:[1,341]},o($Vn1,[2,206]),o($Vn1,[2,207]),o($Vn1,[2,208]),{17:[1,342]},{18:[1,343]},{17:[2,241]},{17:[2,195]},o($Vo1,[2,190]),{45:[1,344]},{142:345,270:$Vm},{183:[2,248]},{16:$V9,24:33,28:347,37:346,260:$V8},{20:[1,348]},{17:[1,349]},o($VW,[2,98]),{20:[2,99],24:269,73:270,99:350,100:268,260:$V8},o($VW,[2,101]),{16:$V9,20:[2,102],24:33,28:275,102:351,103:272,104:273,105:274,260:$V8},{17:[2,104]},o($Vn,$Vo,{71:75,72:76,24:77,73:78,42:352,260:$V8}),o($VB,[2,109]),o($VW,[2,110]),{20:[2,111],108:353,109:277,110:$V71,114:$V81,118:$V91,121:$Va1},o($Vp1,[2,325],{111:354,124:355,125:$Vq1}),o($Vp1,[2,331],{115:357,124:358,125:$Vq1}),o($Vr1,[2,337],{119:359,128:360,129:$Vs1}),o($Vr1,[2,341],{122:362,128:363,129:$Vs1}),o($VW,[2,124]),{16:$V9,20:[2,125],24:33,28:209,133:210,135:284,136:364,137:208,260:$V8,270:$VX},o($VW,[2,133]),{20:[2,135]},{18:[1,365]},o($Vt1,[2,216],{218:366,238:[1,367]}),{163:[1,368]},{17:[1,369]},o($Vu1,[2,299],{287:370,288:371,289:[1,372],290:[1,373]}),o($Vu1,[2,300]),o($Vu1,[2,301]),o($Vv1,[2,302]),o($Vv1,[2,303]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:375,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:374,276:335,277:336,279:$Vm1},{209:$Vw1,244:$Vx1,246:$Vy1,278:$Vz1,279:$VA1,281:[1,376],282:$VB1,283:$VC1,284:$VD1,285:$VE1,286:$VF1},{181:[1,387]},o($Vn1,[2,210]),o($Vn1,[2,205]),o($Vi1,[2,140]),{16:$V9,24:33,28:275,105:302,152:389,153:388,260:$V8},{17:[1,390]},o($Vj1,[2,185]),{20:[1,391]},{17:[1,392]},o([20,36],[2,26]),{16:$V9,20:[2,27],24:33,28:310,35:393,260:$V8},{20:[2,100]},{20:[2,103]},o($Vw,$Vx,{74:135,75:136,43:394,76:$Vy,78:$Vz,79:$VA}),{20:[2,112]},o($Vr1,[2,327],{112:395,128:396,129:$Vs1}),o($Vp1,[2,326]),{16:$VG1,24:398,126:397,258:$VH1,260:$V8},o($Vr1,[2,333],{116:401,128:402,129:$Vs1}),o($Vp1,[2,332]),{17:[2,339],120:403,130:404,131:$VI1},o($Vr1,[2,338]),{16:$V9,24:33,28:406,260:$V8},{17:[2,343],123:407,130:408,131:$VI1},o($Vr1,[2,342]),{20:[2,126]},o([157,158],$V51,{150:255,146:409,147:410,151:$V61}),o($VJ1,[2,218],{219:411,239:[1,412]}),{16:$Ve,24:131,26:130,77:129,127:413,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{16:$VG1,17:[1,415],24:398,126:416,236:414,258:$VH1,260:$V8},o($Vb1,[2,198]),o($Vu1,[2,321]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:375,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:417,276:335,277:336,279:$Vm1},o($Vn1,[2,323]),o($Vn1,[2,324]),{183:[1,418]},{209:$Vw1,244:$Vx1,246:$Vy1,278:$Vz1,279:$VA1,282:$VB1,283:$VC1,284:$VD1,285:$VE1,286:$VF1},{24:419,77:421,260:$V8,263:[1,420]},o($Vv1,[2,305]),{278:[1,422],286:[1,423]},{279:[1,425],280:[1,424]},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:426,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:427,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:428,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:429,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:430,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:431,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:432,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:375,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:433,276:335,277:336,279:$Vm1},{20:[1,434]},{17:[1,435]},{18:[1,436]},{20:[2,29]},{16:$V9,20:[2,30],24:33,28:347,37:437,260:$V8},{20:[2,28]},o($Vw,[2,238]),{17:[2,329],113:438,130:439,131:$VI1},o($Vr1,[2,328]),o($Vp1,[2,117],{98:[1,440]}),o($VK1,[2,259]),o($VK1,[2,260]),o($VK1,[2,261]),{17:[2,335],117:441,130:442,131:$VI1},o($Vr1,[2,334]),{17:[2,115]},{17:[2,340]},{17:[2,120]},o($Vr1,[2,119]),{17:[2,116]},{17:[2,344]},{20:[1,443]},{148:444,154:445,155:446,156:447,157:$VL1,158:$VM1},o($VN1,[2,232],{220:450,249:[1,451]}),{163:[1,452]},{17:[1,453]},{17:[1,454]},{18:[1,455]},{17:[2,264],248:$VO1,259:456},o($Vu1,[2,322]),o($Vv1,[2,304]),o($Vu1,[2,310],{181:$VS}),o($Vu1,[2,311]),o($Vu1,[2,312]),o($Vv1,[2,306]),{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:458,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($Vv1,[2,307]),{280:[1,459]},o($Vv1,[2,313]),o($Vv1,[2,314]),o($Vv1,[2,315]),o($Vv1,[2,316]),o($Vv1,[2,317]),o($Vv1,[2,318]),o($Vv1,[2,319]),{183:[1,460]},o($Vi1,[2,141]),{16:$V9,20:[2,142],24:33,28:275,105:302,152:389,153:461,260:$V8},{16:$V9,24:33,28:260,205:259,211:463,212:462,260:$V8},{20:[2,31]},{17:[2,113]},{17:[2,330]},{16:$Ve,24:131,26:130,77:129,127:464,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{17:[2,114]},{17:[2,336]},o($Vo1,[2,136]),{20:[2,172],149:465,176:466,178:$VP1},o($VQ1,[2,144],{154:445,155:446,156:447,148:468,157:$VL1,158:$VM1}),o($VR1,[2,146]),{16:$V9,24:33,28:469,260:$V8},o($VY,[2,147]),{159:470,224:$V_,225:$V$,226:$V01,227:$V11},{20:[2,235],221:471,252:[1,472]},{250:[1,473],251:[1,474]},{16:$VG1,17:[1,476],24:398,126:478,240:475,242:477,258:$VH1,260:$V8},o($Vt1,[2,217]),o($Vk1,[2,214]),{16:$VG1,24:398,126:480,237:479,258:$VH1,260:$V8},{17:[2,265]},{16:$VG1,24:398,126:481,258:$VH1,260:$V8},o($Vv1,[2,320]),o($Vv1,[2,308]),o($Vv1,[2,309]),{20:[2,143]},{20:[1,482]},{16:$V9,20:[2,188],24:33,28:260,205:259,211:463,212:483,260:$V8},o($Vp1,[2,118]),{20:[2,137]},{17:[1,484],184:[1,485]},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:486,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($VQ1,[2,145]),{45:[1,490],98:$Vc1,160:487,161:488,162:489,163:[1,491],169:$Vd1,228:293,229:$Ve1,231:$Vf1,232:292,233:$Vg1,234:$Vh1},o($VY,[2,148]),{20:[2,193]},{250:[1,492],251:[1,493]},{17:[1,494]},{17:[1,495]},{17:[1,496]},{18:[1,497]},{17:[2,228],247:498,248:$VS1},o($VT1,[2,223],{243:[1,500],244:[1,501],245:[1,502],246:[1,503]}),{20:[1,504]},{17:[1,505]},{17:[2,266],248:$VO1,259:506},o($Vo1,[2,191]),{20:[2,189]},{20:[2,173]},{17:[1,507]},o([17,184],[2,168]),{16:$Ve,24:131,26:130,77:129,127:508,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},o($VR1,[2,150]),{17:[1,509]},{17:[2,151]},{164:[1,510]},{17:[1,511]},{17:[1,512]},o($VN1,[2,233]),o($VN1,[2,234]),o($VJ1,[2,219]),{16:$VG1,24:398,126:478,241:513,242:514,258:$VH1,260:$V8},{17:[2,229]},{16:$VG1,24:398,126:478,242:515,258:$VH1,260:$V8},o($VT1,[2,224]),o($VT1,[2,225]),o($VT1,[2,226]),o($VT1,[2,227]),o($Vk1,[2,215]),{16:$VG1,20:[2,262],24:398,126:480,237:516,258:$VH1,260:$V8},{17:[2,267]},{18:[1,517]},o($VR1,[2,149]),{18:[1,518]},{17:[2,152],129:[1,519]},{20:[2,236]},{20:[2,237]},{20:[1,520]},{17:[1,521]},{17:[2,230],247:522,248:$VS1},{20:[2,263]},{169:$VU1,185:523,186:524},{166:526,168:527,169:$VV1},{165:[1,529]},o($VJ1,[2,220]),{16:$VG1,20:[2,221],24:398,126:478,241:530,242:514,258:$VH1,260:$V8},{17:[2,231]},{20:[1,531]},{17:[1,532]},{16:$Ve,24:131,26:130,77:129,127:533,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{20:[1,534],167:535,172:536,174:[1,537],175:[1,538]},o($VW1,[2,157],{168:527,166:539,169:$VV1}),{16:$Ve,24:131,26:130,77:129,127:540,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{17:[2,153]},{20:[2,222]},{20:[2,174]},{20:[2,177],169:$VU1,185:541,186:524},{170:[1,542]},o($VR1,[2,154]),{20:[1,543]},{170:[1,544]},{170:[2,162]},{170:[2,163]},o($VW1,[2,158]),{170:[1,545]},{20:[2,178]},{16:$Ve,24:131,26:130,77:129,141:64,142:65,177:547,179:546,180:$VX1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},o($VR1,[2,155]),{16:$Ve,17:[1,551],24:131,26:130,77:129,127:552,141:64,142:65,171:549,173:550,176:553,177:554,178:$VP1,179:338,180:$VX1,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{16:$Ve,17:[1,556],24:131,26:130,77:129,127:552,141:64,142:65,171:555,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{17:[2,175]},{17:[2,176]},{16:[1,557],24:558,260:$V8},{17:[1,559]},{17:[1,560]},{18:[1,561]},{17:[1,562]},{17:[2,164]},{17:[2,165]},o([20,169,174,175],[2,156]),{18:[1,563]},{17:[2,169]},{17:[2,170],181:[1,564]},{20:[2,159]},{20:[2,160]},{16:$Ve,24:131,26:130,77:129,127:566,141:64,142:65,173:565,176:553,177:554,178:$VP1,179:338,180:$VX1,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},o($VY1,[2,166]),{16:$Ve,24:131,26:130,77:129,127:566,141:64,142:65,179:338,181:$Vl1,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm,273:332,274:333,275:334,276:335,277:336,279:$Vm1},{16:$Ve,24:131,26:130,77:129,141:64,142:65,179:125,182:567,196:$Vf,250:$Vg,251:$Vv,253:126,255:127,260:$V8,261:$Vh,262:$Vi,263:$Vj,264:$Vk,265:$Vl,270:$Vm},{17:[1,568]},{17:[1,569]},{183:[1,570]},{20:[1,571]},{20:[1,572]},{17:[2,171]},{20:[2,161]},o($VY1,[2,167])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,82],60:[2,19],145:[2,84],170:[2,16],171:[2,21],173:[2,287],183:[2,36],184:[2,34],199:[2,86],232:[2,106],234:[2,246],236:[2,23],237:[2,25],249:[2,346],258:[2,187],261:[2,289],270:[2,243],285:[2,128],302:[2,241],303:[2,195],307:[2,248],315:[2,104],327:[2,135],350:[2,100],351:[2,103],353:[2,112],364:[2,126],391:[2,29],393:[2,28],403:[2,115],404:[2,340],405:[2,120],407:[2,116],408:[2,344],437:[2,31],438:[2,113],439:[2,330],441:[2,114],442:[2,336],456:[2,265],461:[2,143],465:[2,137],471:[2,193],483:[2,189],484:[2,173],490:[2,151],498:[2,229],506:[2,267],511:[2,236],512:[2,237],516:[2,263],522:[2,231],529:[2,153],530:[2,222],531:[2,174],537:[2,162],538:[2,163],541:[2,178],546:[2,175],547:[2,176],553:[2,164],554:[2,165],557:[2,169],559:[2,159],560:[2,160],570:[2,171],571:[2,161]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set(['with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes']),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'connectedBy', 'with', 'as', 'optional']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),           

        // level 4
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw'])
    };

    const NEXT_STATE = {
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'dataset.is': 'dataset.body'
    };

    const STATE_STOPPER = {        
        'entity.interface.find.when': new Set(['else', 'otherwise'])
    };

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['entity.key', 'entity.data', 'entity.interface.return.when', 'entity.mixes'])
    ];

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when'        
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc, token) {
            if (0) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            //console.log('> enter state:', state, '\n');
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            //console.log('< exit state:', state, '\n');
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    console.log('< exit state:', last, '\n');
                } while (last !== finalStateToExit);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');   
                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 20;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 264;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;

                                if (state.hasIndent && ONE_LINE_KEYWORDS[1].has(state.lastState)) {
                                    state.exitState(state.lastState);
                                }                                  

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 263;
                        
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 261;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 250;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 250;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 258;
                           
break;
case 24:
                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 265;
                           
break;
case 25:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 251;
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 262;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext);                                     

                                switch (state.lastState) {
                                    case 'schema':
                                        if (state.hasIndent && SUB_KEYWORDS['schema'].has(yy_.yytext)) {
                                            state.enterState('schema.' + yy_.yytext);
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'type': 
                                        state.enterState('type.name');
                                        return 260;

                                    case 'type.name':
                                        state.enterState('type.info');

                                        if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity':
                                        if (state.hasIndent && SUB_KEYWORDS['entity'].has(yy_.yytext)) {
                                            state.enterState('entity.' + yy_.yytext);                                                                        
                                            return yy_.yytext;
                                        } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                            return yy_.yytext;
                                        } 
                                        break;

                                    default:
                                        if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                            if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                                state.exitState(state.lastState);                                                                        
                                            }

                                            let keywordChain = state.lastState + '.' + yy_.yytext;
                                            let nextState = NEXT_STATE[keywordChain];
                                            if (nextState) {
                                                state.enterState(nextState);                                                                        
                                            }
                                            return yy_.yytext;
                                        }
                                        break;                                    
                                }                                         

                                return 260;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(mod|div)|(in|is|like)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}