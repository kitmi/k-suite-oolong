/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,100,250,257],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,98,99,113,115,142,146,150,152,163,206,249,267,274,276,278,279,295,310,320],$Vb=[2,302],$Vc=[1,51],$Vd=[114,310],$Ve=[1,68],$Vf=[1,69],$Vg=[1,72],$Vh=[1,63],$Vi=[1,64],$Vj=[1,65],$Vk=[1,70],$Vl=[1,71],$Vm=[1,73],$Vn=[17,82,84,86,113],$Vo=[2,63],$Vp=[2,103],$Vq=[1,110],$Vr=[17,320],$Vs=[1,114],$Vt=[17,20,82,84,86,89,99,113,152,200,201,214,222,226,241,291,293,295,310,320,323,324,326,328,329,330,331,332,333,334,335,336,339,340],$Vu=[1,124],$Vv=[1,130],$Vw=[17,113],$Vx=[2,69],$Vy=[1,139],$Vz=[1,140],$VA=[1,141],$VB=[17,82,84,86,113,310],$VC=[1,143],$VD=[1,165],$VE=[1,158],$VF=[1,159],$VG=[1,160],$VH=[1,161],$VI=[1,162],$VJ=[1,163],$VK=[1,166],$VL=[1,164],$VM=[1,182],$VN=[241,295],$VO=[17,20,82,84,86,89,99,113,115,152,200,201,214,222,226,241,291,293,295,310,320,323,324,326,328,329,330,331,332,333,334,335,336,339,340],$VP=[89,320],$VQ=[1,188],$VR=[17,20,89,99,113,152,200,201,214,222,226,241,291,293,295,310,320,323,324,326,328,329,330,331,332,333,334,335,336,339,340],$VS=[2,280],$VT=[1,190],$VU=[2,112],$VV=[1,195],$VW=[1,201],$VX=[1,200],$VY=[20,40],$VZ=[20,112,115,119,126,156,157,164,167,183],$V_=[1,222],$V$=[2,229],$V01=[1,238],$V11=[1,239],$V21=[1,240],$V31=[1,241],$V41=[1,255],$V51=[1,257],$V61=[1,263],$V71=[1,264],$V81=[1,267],$V91=[17,99,163],$Va1=[2,168],$Vb1=[1,293],$Vc1=[1,306],$Vd1=[1,307],$Ve1=[17,20,89,113,152,200,201,214,222,310,339,340],$Vf1=[1,311],$Vg1=[1,313],$Vh1=[1,312],$Vi1=[1,309],$Vj1=[1,310],$Vk1=[1,314],$Vl1=[1,315],$Vm1=[1,316],$Vn1=[1,317],$Vo1=[1,318],$Vp1=[1,319],$Vq1=[1,320],$Vr1=[1,321],$Vs1=[1,322],$Vt1=[1,344],$Vu1=[1,345],$Vv1=[1,346],$Vw1=[1,347],$Vx1=[1,357],$Vy1=[1,358],$Vz1=[1,359],$VA1=[20,280,284,285,296,299],$VB1=[1,370],$VC1=[1,369],$VD1=[1,367],$VE1=[1,368],$VF1=[1,365],$VG1=[1,366],$VH1=[20,115,150,200,201,274,276,278,279,280,284,285,296,299],$VI1=[17,115],$VJ1=[17,20,89,113,152,200,201,214,222,310],$VK1=[87,90,114,239,297,298,310,311,312,313,314,319,324],$VL1=[17,114,310],$VM1=[20,284,285,296,299],$VN1=[59,87,90,114,239,297,298,310,311,312,313,314,319,324,327],$VO1=[20,114,310],$VP1=[17,113,152,310],$VQ1=[1,462],$VR1=[1,466],$VS1=[20,285,296,299],$VT1=[17,20,113,152,200,201,214,222,310],$VU1=[17,113,310],$VV1=[1,495],$VW1=[1,496],$VX1=[1,507],$VY1=[1,508],$VZ1=[20,296,299],$V_1=[17,113,115,152,290,291,292,293,295,310],$V$1=[1,534],$V02=[1,535],$V12=[20,299],$V22=[1,549],$V32=[1,565],$V42=[20,222],$V52=[20,200,201,222],$V62=[20,171,174,176],$V72=[1,609],$V82=[17,295],$V92=[1,621],$Va2=[20,150,181],$Vb2=[1,653],$Vc2=[1,656],$Vd2=[20,218,219],$Ve2=[1,685],$Vf2=[17,20,150,218,219];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"REGEXP":90,"logical_expression":91,"entity_statement_header":92,"entity_statement_block":93,"entity_statement_option0":94,"entity_statement_header0":95,"entity_base_keywords":96,"identifier_or_string_list":97,"extends":98,"is":99,"entity":100,"entity_sub_items":101,"entity_sub_item":102,"with_features":103,"has_fields":104,"associations_statement":105,"key_statement":106,"index_statement":107,"data_statement":108,"interfaces_statement":109,"mixin_statement":110,"triggers_statement":111,"mixes":112,"--":113,"STRING":114,"with":115,"with_features_block":116,"with_features_option0":117,"feature_inject":118,"has":119,"has_fields_block":120,"has_fields_option0":121,"field_item":122,"field_item_body":123,"modifiable_field":124,"type_base_or_not":125,"associations":126,"associations_block":127,"associations_statement_option0":128,"association_item":129,"association_type_referee":130,"association_item_option0":131,"association_item_option1":132,"association_cases_block":133,"association_item_option2":134,"association_type_referer":135,"association_item_option3":136,"hasOne":137,"hasMany":138,"refersTo":139,"belongsTo":140,"association_through":141,"connectedBy":142,"identifier_string_or_dotname":143,"conditional_expression":144,"association_connection":145,"being":146,"array_of_identifier_or_string":147,"association_condition":148,"association_cases":149,"when":150,"association_as":151,"as":152,"association_qualifiers":153,"optional":154,"default":155,"key":156,"index":157,"index_item":158,"index_statement_block":159,"index_statement_option0":160,"index_item_body":161,"index_item_option0":162,"unique":163,"data":164,"inline_object":165,"inline_array":166,"triggers":167,"triggers_statement_block":168,"triggers_statement_option0":169,"triggers_operation":170,"onCreate":171,"triggers_operation_block":172,"triggers_operation_option0":173,"onCreateOrUpdate":174,"triggers_operation_option1":175,"onDelete":176,"triggers_operation_option2":177,"triggers_operation_item":178,"triggers_result_block":179,"triggers_operation_item_option0":180,"always":181,"triggers_operation_item_option1":182,"interface":183,"interfaces_statement_block":184,"interfaces_statement_option0":185,"interface_definition":186,"interface_definition_body":187,"interface_definition_option0":188,"accept_or_not":189,"implementation":190,"return_or_not":191,"accept_statement":192,"accept":193,"modifiable_param":194,"accept_block":195,"accept_statement_option0":196,"operation":197,"find_one_operation":198,"find_one_keywords":199,"findOne":200,"find":201,"article_keyword":202,"selection_inline_keywords":203,"case_statement":204,"cases_keywords":205,"by":206,"cases":207,"below":208,"case_condition_block":209,"case_statement_option0":210,"otherwise_statement":211,"case_statement_option1":212,"case_condition_item":213,"=>":214,"condition_as_result_expression":215,"otherwise_keywords":216,"stop_controll_flow_expression":217,"otherwise":218,"else":219,"return_expression":220,"throw_error_expression":221,"return":222,"modifiable_value":223,"throw":224,"gfc_param_list":225,"unless":226,"return_condition_block":227,"return_or_not_option0":228,"return_condition_item":229,"update_operation":230,"update":231,"where_expr":232,"create_operation":233,"create":234,"delete_operation":235,"delete":236,"coding_block":237,"do":238,"{":239,"javascript":240,"}":241,"assign_operation":242,"set":243,"identifier_or_member_access":244,"<-":245,"value":246,"variable_modifier_or_not":247,"entity_fields_selections":248,"->":249,"dataset":250,"dataset_statement_block":251,"dataset_statement_option0":252,"article_keyword_or_not":253,"dataset_join_with_item":254,"dataset_join_with_block":255,"dataset_join_with_item_option0":256,"view":257,"view_statement_block":258,"view_statement_option0":259,"view_main_entity":260,"view_selection_or_not":261,"group_by_or_not":262,"having_or_not":263,"order_by_or_not":264,"skip_or_not":265,"limit_or_not":266,"list":267,"view_selection":268,"a":269,"an":270,"the":271,"one":272,"selection_attributive_keywords":273,"of":274,"which":275,"where":276,"selection_keywords":277,"selectedBy":278,"selected":279,"group":280,"identifier_string_or_dotname_list":281,"identifier_string_or_dotname_block":282,"group_by_or_not_option0":283,"having":284,"order":285,"order_by_list":286,"order_by_block":287,"order_by_or_not_option0":288,"order_by_clause":289,"ascend":290,"<":291,"descend":292,">":293,"order_by_list0":294,",":295,"offset":296,"INTEGER":297,"REFERENCE":298,"limit":299,"gfc_param0":300,"nfc_param_list":301,"nfc_param":302,"nfc_param_list0":303,"unary_expression":304,"binary_expression":305,"boolean_expression":306,"gfc_param_list0":307,"DOTNAME":308,"identifier_string_or_dotname_list0":309,"NAME":310,"FLOAT":311,"BOOL":312,"SCRIPT":313,"SYMBOL":314,"kv_pairs":315,"kv_pair_item":316,"non_exist":317,"kv_pairs0":318,"[":319,"]":320,"identifier_or_string_list0":321,"simple_expression":322,"exists":323,"not":324,"null":325,"~":326,"all":327,">=":328,"<=":329,"==":330,"!=":331,"in":332,"+":333,"-":334,"*":335,"/":336,"logical_expression_right":337,"logical_operators":338,"and":339,"or":340,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",90:"REGEXP",98:"extends",99:"is",100:"entity",112:"mixes",113:"--",114:"STRING",115:"with",119:"has",126:"associations",137:"hasOne",138:"hasMany",139:"refersTo",140:"belongsTo",142:"connectedBy",146:"being",150:"when",152:"as",154:"optional",155:"default",156:"key",157:"index",163:"unique",164:"data",167:"triggers",171:"onCreate",174:"onCreateOrUpdate",176:"onDelete",179:"triggers_result_block",181:"always",183:"interface",193:"accept",200:"findOne",201:"find",206:"by",207:"cases",208:"below",214:"=>",218:"otherwise",219:"else",222:"return",224:"throw",226:"unless",231:"update",232:"where_expr",234:"create",236:"delete",238:"do",239:"{",240:"javascript",241:"}",243:"set",244:"identifier_or_member_access",245:"<-",247:"variable_modifier_or_not",249:"->",250:"dataset",257:"view",267:"list",269:"a",270:"an",271:"the",272:"one",274:"of",275:"which",276:"where",278:"selectedBy",279:"selected",280:"group",284:"having",285:"order",290:"ascend",291:"<",292:"descend",293:">",295:",",296:"offset",297:"INTEGER",298:"REFERENCE",299:"limit",308:"DOTNAME",310:"NAME",311:"FLOAT",312:"BOOL",313:"SCRIPT",314:"SYMBOL",319:"[",320:"]",323:"exists",324:"not",325:"null",326:"~",327:"all",328:">=",329:"<=",330:"==",331:"!=",332:"in",333:"+",334:"-",335:"*",336:"/",339:"and",340:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,2],[81,4],[81,2],[81,2],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[92,1],[92,3],[96,1],[96,1],[95,2],[93,2],[101,1],[101,2],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[110,3],[32,0],[32,3],[103,6],[116,2],[116,3],[104,6],[120,2],[120,3],[122,2],[50,0],[50,2],[123,1],[125,0],[125,1],[105,6],[127,2],[127,3],[129,6],[129,10],[129,6],[130,1],[130,1],[135,1],[135,1],[141,2],[141,4],[141,1],[141,2],[141,1],[133,5],[145,2],[145,3],[149,3],[149,4],[148,2],[151,2],[153,1],[153,4],[106,3],[106,3],[107,3],[107,6],[159,2],[159,3],[158,1],[158,3],[161,1],[161,1],[108,3],[108,3],[111,6],[170,6],[170,6],[170,6],[168,1],[168,2],[172,1],[172,2],[178,7],[178,6],[109,6],[184,1],[184,2],[186,6],[187,3],[189,0],[189,1],[192,3],[192,6],[195,2],[195,3],[190,1],[190,2],[197,1],[199,1],[199,2],[198,4],[198,3],[205,1],[205,2],[205,4],[204,6],[204,7],[213,4],[209,1],[209,2],[211,4],[211,4],[211,7],[216,1],[216,1],[217,1],[217,1],[215,2],[215,5],[220,2],[221,2],[221,2],[221,5],[191,0],[191,2],[191,7],[229,4],[229,4],[227,2],[227,3],[230,6],[233,5],[235,4],[237,5],[242,6],[248,1],[248,3],[14,7],[251,3],[255,1],[255,2],[254,2],[254,8],[13,7],[258,9],[260,3],[260,4],[261,0],[261,1],[268,3],[253,0],[253,1],[202,1],[202,1],[202,1],[202,1],[273,2],[273,1],[273,1],[273,1],[277,1],[277,2],[203,1],[203,1],[262,0],[262,4],[262,7],[263,0],[263,3],[264,0],[264,4],[264,7],[287,2],[287,3],[289,1],[289,2],[289,2],[289,2],[289,2],[286,1],[286,2],[294,2],[294,3],[265,0],[265,3],[265,3],[266,0],[266,3],[266,3],[124,4],[223,1],[223,2],[194,1],[118,1],[118,1],[79,4],[301,1],[301,2],[303,2],[303,3],[302,1],[302,1],[88,1],[88,1],[88,1],[85,4],[225,1],[225,2],[307,2],[307,3],[307,1],[300,1],[300,1],[300,1],[143,1],[143,1],[143,1],[282,2],[282,3],[281,1],[281,2],[309,2],[309,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[165,2],[165,3],[316,3],[316,2],[316,3],[317,0],[315,1],[315,2],[318,2],[318,3],[166,2],[166,3],[147,3],[97,1],[97,2],[321,2],[321,3],[246,1],[246,1],[144,1],[144,1],[144,1],[322,1],[322,1],[322,3],[304,2],[304,3],[304,3],[304,4],[304,4],[306,3],[306,4],[306,4],[305,3],[305,3],[305,3],[305,3],[305,3],[305,3],[305,3],[305,4],[305,3],[305,3],[305,3],[305,3],[91,2],[337,2],[338,1],[338,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[94,0],[94,1],[117,0],[117,1],[121,0],[121,1],[128,0],[128,1],[131,0],[131,1],[132,0],[132,1],[134,0],[134,1],[136,0],[136,1],[160,0],[160,1],[162,0],[162,1],[169,0],[169,1],[173,0],[173,1],[175,0],[175,1],[177,0],[177,1],[180,0],[180,1],[182,0],[182,1],[185,0],[185,1],[188,0],[188,1],[196,0],[196,1],[210,0],[210,1],[212,0],[212,1],[228,0],[228,1],[252,0],[252,1],[256,0],[256,1],[259,0],[259,1],[283,0],[283,1],[288,0],[288,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 106: case 118: case 135: case 145: case 172: case 207: case 251: case 296:
this.$ = [ $$[$0-1] ];
break;
case 31: case 107: case 119: case 146: case 173: case 208: case 252: case 297:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 89: case 133: case 217: case 322:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 90: case 111: case 165: case 321: case 323:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 157: case 159: case 174: case 187: case 218: case 258: case 260: case 275: case 277: case 287: case 298: case 300: case 327: case 329:
this.$ = [ $$[$0] ];
break;
case 72: case 158: case 160: case 175: case 188: case 219: case 259: case 261: case 276: case 278: case 288: case 301: case 328: case 330:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args)    ;
break;
case 76:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args)    ;
break;
case 79:
this.$ = state.normalizeValidator($$[$0]);
break;
case 80:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 82:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 83:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 85:
this.$ = [ $$[$0], {} ];
break;
case 86:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 92:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 102:
this.$ = { mixins: $$[$0-1] };
break;
case 104:
this.$ = { comment: $$[$0-1] };
break;
case 105:
this.$ = { features: $$[$0-2] };
break;
case 108:
this.$ = { fields: $$[$0-2] };
break;
case 109:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 110:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 113:
this.$ = { comment: $$[$0] };
break;
case 117:
this.$ = { associations: $$[$0-2] };
break;
case 120:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 121:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 122:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 127:
this.$ = { by: $$[$0] }    ;
break;
case 128:
this.$ = { by: $$[$0-2], with: $$[$0] }    ;
break;
case 129:
this.$ = { remoteField: $$[$0] }     ;
break;
case 130:
this.$ = { remoteField: $$[$0] }      ;
break;
case 131:
this.$ = { with: $$[$0] };
break;
case 132:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 134:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 136:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 137:
this.$ = $$[$0];;
break;
case 138:
this.$ = { srcField: $$[$0] };
break;
case 139:
this.$ = { optional: true };
break;
case 140:
this.$ = { default: $$[$0-1] };
break;
case 141: case 142:
this.$ = { key: $$[$0-1] };
break;
case 143:
this.$ = { indexes: [$$[$0-1]] };
break;
case 144:
this.$ = { indexes: $$[$0-2] };
break;
case 148:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 149: case 150:
this.$ = { fields: $$[$0] };
break;
case 151: case 152:
this.$ = { data: $$[$0-1] };
break;
case 153:
this.$ = { triggers: $$[$0-2] };
break;
case 154:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 155:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 156:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 161:
this.$ = { condition: $$[$0-5], do: $$[$0-2] };
break;
case 162:
this.$ = { do: $$[$0-2] };
break;
case 163:
this.$ = { interfaces: $$[$0-2] };
break;
case 164:
this.$ = Object.assign({}, $$[$0]);
break;
case 166:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 167:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 170:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 171:
this.$ = { accept: $$[$0-2] };
break;
case 179:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 180:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 184:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 185:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 186:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 189: case 190: case 220: case 315: case 325: case 326: case 338:
this.$ = $$[$0-1];
break;
case 191: case 197:
this.$ = $$[$0-2];
break;
case 198:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 199:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 200:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 201:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 203:
 this.$ = { return: $$[$0-1] }; 
break;
case 204:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 205: case 206:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 209:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 210:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 211:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 212:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 213:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 214:
this.$ = { entity: $$[$0] }     ;
break;
case 215:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 216:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 221:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 222:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 223:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 224:
this.$ = { dataset: $$[$0] };
break;
case 225:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 228:
this.$ = { condition: $$[$0-1] };
break;
case 244:
this.$ = { groupBy: $$[$0-1] };
break;
case 245:
this.$ = { groupBy: $$[$0-2] };
break;
case 247:
this.$ = { having: $$[$0-1] };
break;
case 249:
this.$ = { orderBy: $$[$0-1] };
break;
case 250:
this.$ = { orderBy: $$[$0-2] };
break;
case 253:
this.$ = { field: $$[$0], ascend: true };
break;
case 254: case 255:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 256: case 257:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 263: case 264:
this.$ = { offset: $$[$0-1] };
break;
case 266: case 267:
this.$ = { limit: $$[$0-1] };
break;
case 268:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 270:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 274: case 284:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 280:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 285:
this.$ = [ $$[$0] ]    ;
break;
case 286:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 289: case 324:
this.$ = [];
break;
case 299:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 314:
this.$ = {};
break;
case 316: case 318:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 317:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 332:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 339:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 340:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 341:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 342:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 343:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 344:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 345:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 346:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 347:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 348:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 349:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 350:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 351:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 352:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 353:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 354:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 355:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 356:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 357:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 358:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 359:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 360:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 361:
this.$ = { operator: 'and' };
break;
case 362:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,250:$V5,257:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,250:$V5,257:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,114:$V8,310:$V9},{17:[1,30],23:29,26:31,310:$V9},{16:34,17:[1,33],26:26,44:32,114:$V8,310:$V9},{16:35,26:26,114:$V8,310:$V9},{17:[1,36]},{16:37,26:26,114:$V8,310:$V9},{16:38,26:26,114:$V8,310:$V9},{17:[2,85],96:39,98:[1,40],99:[1,41]},{16:42,26:26,114:$V8,310:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,303]),o([17,20,27,51,82,84,86,87,89,98,99,113,115,142,146,150,152,163,200,201,206,214,222,226,241,249,267,274,276,278,279,290,291,292,293,295,310,320,323,324,326,328,329,330,331,332,333,334,335,336,339,340],[2,304]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,83],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,97:56,114:$V8,310:$V9},o($Vd,[2,87]),o($Vd,[2,88]),o([17,98,99],[2,89]),o($V7,[2,13]),{16:59,19:58,26:26,114:$V8,310:$V9},o($V7,[2,17]),{23:61,24:60,26:31,310:$V9},{28:62,90:$Ve,114:$Vf,165:66,166:67,239:$Vg,297:$Vh,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,114:$V8,310:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,310:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:[1,88],60:[1,89],61:[1,90],62:[1,91],63:[1,93],64:[1,94],65:[1,95],66:[1,96],67:[1,97],68:[1,98],69:[1,99],70:[1,100],71:[1,101],72:[1,102],73:[1,103],74:[1,104],75:[1,105],76:[1,106],114:$V8,310:$V9},{18:[1,107]},o([112,115,119,126,156,157,164,167,183],$Vp,{93:108,32:109,113:$Vq}),{18:[1,111]},{18:[1,112]},{17:[2,86]},o($Vr,[2,327],{321:113,295:$Vs}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($Vt,[2,305]),o($Vt,[2,306]),o($Vt,[2,307]),o($Vt,[2,308]),o($Vt,[2,309]),o($Vt,[2,310]),o($Vt,[2,311]),o($Vt,[2,312]),o($Vt,[2,313]),{16:122,26:123,114:$V8,241:[1,119],297:$Vu,310:$V9,315:120,316:121},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:127,225:126,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,320:[1,125]},{20:[1,134]},{17:[1,135]},o($Vw,$Vx,{49:136,80:137,81:138,82:$Vy,84:$Vz,86:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,310:$V9}),o($VB,[2,67],{87:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),o([20,37,40],$Vp,{30:144,32:145,113:$Vq}),{20:[1,146]},{101:147,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:$VD,115:$VE,119:$VF,126:$VG,156:$VH,157:$VI,164:$VJ,167:$VK,183:$VL},{114:[1,167]},{99:[1,170],258:168,260:169},{99:[1,172],251:171},o($Vr,[2,328]),{16:173,26:26,114:$V8,310:$V9},o($V7,[2,363],{21:174,17:[1,175]}),{16:59,19:176,20:[2,15],26:26,114:$V8,310:$V9},o($V7,[2,365],{25:177,17:[1,178]}),{20:[2,20],23:61,24:179,26:31,310:$V9},o($Vt,[2,314]),{241:[1,180]},{241:[2,320],295:$VM,318:181},{51:[1,183]},o($VN,[2,319],{317:184,51:$Vb}),{51:[1,185]},o($VO,[2,324]),{320:[1,186]},o($VP,[2,285],{307:187,295:$VQ}),o($VR,[2,269],{81:138,80:189,82:$Vy,84:$Vz,86:$VA}),o($Vt,[2,290]),o($Vt,[2,291]),o($Vt,[2,292]),o($Vt,[2,279]),o($Vt,$VS,{87:$VT}),o($V7,[2,375],{46:191,17:[1,192]}),{16:34,20:[2,35],26:26,44:75,45:193,114:$V8,310:$V9},{17:$VU,50:194,113:$VV},o($Vw,[2,70]),o($VR,[2,71],{81:138,80:196,82:$Vy,84:$Vz,86:$VA}),{26:198,83:197,85:199,87:$VW,90:$VX,310:$V9},{26:202,85:203,310:$V9},{26:205,85:206,87:[1,204],310:$V9},o($Vn,[2,66]),{26:209,28:132,90:$Ve,114:$Vf,165:66,166:67,239:$Vg,297:$Vh,301:207,302:208,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{20:[1,210]},o($VY,[2,369],{33:211,36:212,37:[1,213]}),o($V7,[2,377],{94:214,17:[1,215]}),{20:[2,90]},{20:[2,91],101:216,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:$VD,115:$VE,119:$VF,126:$VG,156:$VH,157:$VI,164:$VJ,167:$VK,183:$VL},o($VZ,[2,93]),o($VZ,[2,94]),o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97]),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),{17:[1,217]},{17:[1,218]},{17:[1,219]},{16:220,26:26,114:$V8,147:221,310:$V9,319:$V_},{16:226,17:[1,224],26:26,114:$V8,147:227,158:223,161:225,310:$V9,319:$V_},{165:228,166:229,239:$Vg,319:$Vm},{17:[1,230]},{16:57,26:26,97:231,114:$V8,310:$V9},{17:[1,232]},{17:[1,233]},{20:[1,234]},{17:[1,235]},o($Vd,$V$,{253:236,202:237,269:$V01,270:$V11,271:$V21,272:$V31}),{20:[1,242]},o($Vd,$V$,{202:237,253:243,269:$V01,270:$V11,271:$V21,272:$V31}),o($Vr,[2,329],{321:244,295:$Vs}),o($V7,[2,14]),o($V7,[2,364]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,366]),{20:[2,21]},o($Vt,[2,315]),{241:[2,321]},{16:122,26:123,114:$V8,297:$Vu,310:$V9,316:245},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:246,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($VN,[2,317]),{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:247,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($VO,[2,325]),o($VP,[2,286]),o($VP,[2,289],{165:66,166:67,300:128,302:129,85:131,28:132,26:133,223:248,90:$Ve,114:$Vf,239:$Vg,297:$Vh,298:$Vv,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm}),o($VR,[2,270]),{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:127,225:249,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($V7,[2,33]),o($V7,[2,376]),{20:[2,36]},{17:[2,34]},{114:[1,250]},o($VR,[2,72]),o($Vt,[2,73]),o($Vt,[2,79],{87:$VT}),o($Vt,[2,80]),o($Vt,[2,81]),{26:133,28:132,85:131,87:$V41,90:$Ve,91:251,114:$Vf,165:66,166:67,223:256,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:252,324:$V51},o($Vt,[2,74],{87:$VT}),o($Vt,[2,75]),{26:133,28:132,59:$V61,85:131,88:258,90:$Ve,114:$Vf,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:259,305:260,306:261,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,324:$V51,327:$V71},o($Vt,[2,77],{87:$VT}),o($Vt,[2,78]),{89:[1,265]},{89:[2,275],295:$V81,303:266},o([89,295],$VS),o($V7,[2,367],{31:268,17:[1,269]}),{20:[2,24],34:270,35:271,40:[1,272]},o($VY,[2,370]),{17:[1,273]},o($V7,[2,84]),o($V7,[2,378]),{20:[2,92]},{18:[1,274]},{18:[1,275]},{18:[1,276]},{17:[1,277]},{17:[1,278]},{16:57,26:26,97:279,114:$V8,310:$V9},{17:[1,280]},{18:[1,281]},{17:[2,147],99:[1,283],162:282,163:[2,395]},o($V91,[2,149]),o($V91,[2,150]),{17:[1,284]},{17:[1,285]},{18:[1,286]},{17:[1,287]},{18:[1,288]},o([20,37,40,112,115,119,126,156,157,164,167,183],[2,104]),o($V7,[2,425],{259:289,17:[1,290]}),o([20,115,150,274,276,278,279,280,284,285,296,299],$Va1,{189:291,192:292,193:$Vb1}),{16:294,26:26,114:$V8,310:$V9},o($Vd,[2,230]),o($Vd,[2,231]),o($Vd,[2,232]),o($Vd,[2,233]),o($Vd,[2,234]),o($V7,[2,421],{252:295,17:[1,296]}),{16:299,26:26,114:$V8,248:298,254:297,310:$V9},o($Vr,[2,330]),{241:[2,322],295:$VM,318:300},o($VN,[2,316]),o($VN,[2,318]),o($VP,[2,287],{307:301,295:$VQ}),{89:[1,302]},{17:[2,113]},{89:[1,303]},{337:304,338:305,339:$Vc1,340:$Vd1},o($Ve1,[2,336]),o($Ve1,[2,337]),{26:133,28:132,85:131,87:$V41,90:$Ve,114:$Vf,165:66,166:67,223:256,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:308,324:$V51},{99:$Vf1,291:$Vg1,293:$Vh1,323:$Vi1,324:$Vj1,328:$Vk1,329:$Vl1,330:$Vm1,331:$Vn1,332:$Vo1,333:$Vp1,334:$Vq1,335:$Vr1,336:$Vs1},{87:[1,323]},{89:[1,324]},{89:[2,281]},{89:[2,282]},{89:[2,283]},{99:$Vf1,291:$Vg1,293:$Vh1,323:$Vi1,324:$Vj1,326:[1,325],328:$Vk1,329:$Vl1,330:$Vm1,331:$Vn1,332:$Vo1,333:$Vp1,334:$Vq1,335:$Vr1,336:$Vs1},{166:326,319:$Vm},{166:327,319:$Vm},o($VB,[2,274]),{89:[2,276]},{26:209,28:132,90:$Ve,114:$Vf,165:66,166:67,239:$Vg,297:$Vh,302:328,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($V7,[2,22]),o($V7,[2,368]),{20:[2,23]},{20:[2,25]},{17:[1,329]},{18:[1,330]},{26:333,79:334,116:331,118:332,310:$V9},{16:339,26:26,114:$V8,120:335,122:336,123:337,124:338,310:$V9},{127:340,129:341,130:342,135:343,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1},o($VZ,[2,141]),o($VZ,[2,142]),{320:[1,348]},o($VZ,[2,143]),{16:226,26:26,114:$V8,147:227,158:350,159:349,161:225,310:$V9,319:$V_},{163:[1,351]},{163:[2,396]},o($VZ,[2,151]),o($VZ,[2,152]),{16:354,26:26,114:$V8,184:352,186:353,310:$V9},o($VZ,[2,102]),{168:355,170:356,171:$Vx1,174:$Vy1,176:$Vz1},o($V7,[2,222]),o($V7,[2,426]),o($VA1,[2,226],{261:360,268:361,203:362,277:363,273:364,115:$VB1,150:$VC1,274:$VD1,276:$VE1,278:$VF1,279:$VG1}),o($VH1,[2,169]),{16:339,17:[1,372],26:26,114:$V8,124:373,194:371,310:$V9},{17:[2,224],267:[1,374]},o($V7,[2,216]),o($V7,[2,422]),{20:[2,217]},{17:[1,375],115:[1,376]},o($VI1,[2,214],{249:[1,377]}),{241:[2,323]},o($VP,[2,288]),o($Vt,[2,284]),o($Vt,[2,82]),o($VJ1,[2,359]),{26:133,28:132,85:131,87:$V41,90:$Ve,114:$Vf,165:66,166:67,223:256,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:378,324:$V51},o($VK1,[2,361]),o($VK1,[2,362]),{89:[1,379]},o($Ve1,[2,339]),{323:[1,380],332:[1,381]},{324:[1,383],325:[1,382]},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:384,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:385,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:386,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:387,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:388,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:389,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:390,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:391,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:392,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:393,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:394,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{26:133,28:132,85:131,87:$V41,90:$Ve,114:$Vf,165:66,166:67,223:256,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:395,324:$V51},o($Vt,[2,76]),{26:198,83:396,85:199,87:$VW,90:$VX,310:$V9},{326:[1,397]},{326:[1,398]},{89:[2,277],295:$V81,303:399},{18:[1,400]},{16:402,26:26,38:401,114:$V8,310:$V9},{20:[1,403]},{17:[1,404]},{17:[2,272],87:$VC},{17:[2,273]},{20:[1,405]},{17:[1,406]},{17:$VU,50:407,113:$VV},o($Vw,[2,114]),o($VB,[2,115],{125:408,47:409,51:$Vc}),{20:[1,410]},{17:[1,411]},{16:412,17:[1,413],26:26,114:$V8,310:$V9},{16:414,26:26,114:$V8,310:$V9},o($VL1,[2,123]),o($VL1,[2,124]),o($Vd,[2,125]),o($Vd,[2,126]),o([17,99,113,152,163,310],[2,326]),{20:[1,415]},{17:[1,416]},{17:[2,148]},{20:[1,417]},{16:354,20:[2,164],26:26,114:$V8,184:418,186:353,310:$V9},{17:[1,419]},{20:[1,420]},{20:[2,157],168:421,170:356,171:$Vx1,174:$Vy1,176:$Vz1},{17:[1,422]},{17:[1,423]},{17:[1,424]},o($VM1,[2,243],{262:425,280:[1,426]}),o($VA1,[2,227]),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:427,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},o($VN1,[2,241]),o($VN1,[2,242]),o($VN1,[2,239]),{206:[1,431]},{275:[1,432]},o($VN1,[2,236]),o($VN1,[2,237]),o($VN1,[2,238]),{17:[1,433]},{18:[1,434]},{17:[2,271]},{17:[2,225]},o($VO1,[2,220]),{51:[1,435]},{166:436,319:$Vm},o($VJ1,[2,360]),o($Ve1,[2,338]),o($Ve1,[2,340]),{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:437,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($Ve1,[2,341]),{325:[1,438]},o($Ve1,[2,347]),o($Ve1,[2,348]),o($Ve1,[2,349]),o($Ve1,[2,350]),o($Ve1,[2,351]),o($Ve1,[2,352]),o($Ve1,[2,353]),o($Ve1,[2,355]),o($Ve1,[2,356]),o($Ve1,[2,357]),o($Ve1,[2,358]),{89:[1,439]},o($VJ1,[2,344]),{26:198,83:440,85:199,87:$VW,90:$VX,310:$V9},{26:198,83:441,85:199,87:$VW,90:$VX,310:$V9},{89:[2,278]},{16:443,26:26,41:442,114:$V8,310:$V9},{20:[1,444]},{17:[1,445]},o($VZ,[2,379],{117:446,17:[1,447]}),{20:[2,106],26:333,79:334,116:448,118:332,310:$V9},o($VZ,[2,381],{121:449,17:[1,450]}),{16:339,20:[2,109],26:26,114:$V8,120:451,122:336,123:337,124:338,310:$V9},{17:[2,111]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:452,310:$V9}),o($VB,[2,116]),o($VZ,[2,383],{128:453,17:[1,454]}),{20:[2,118],127:455,129:341,130:342,135:343,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1},o($VP1,[2,385],{131:456,141:457,145:459,148:461,115:$VQ1,142:[1,458],146:[1,460]}),{18:[1,463]},o($VB,[2,391],{136:464,151:465,152:$VR1}),o($VZ,[2,393],{160:467,17:[1,468]}),{16:226,20:[2,145],26:26,114:$V8,147:227,158:350,159:469,161:225,310:$V9,319:$V_},o($VZ,[2,409],{185:470,17:[1,471]}),{20:[2,165]},{18:[1,472]},o($VZ,[2,397],{169:473,17:[1,474]}),{20:[2,158]},{18:[1,475]},{18:[1,476]},{18:[1,477]},o($VS1,[2,246],{263:478,284:[1,479]}),{206:[1,480]},{17:[1,481]},o($VT1,[2,333],{337:304,338:305,339:$Vc1,340:$Vd1}),o($VT1,[2,334]),o($VT1,[2,335]),o($VN1,[2,240]),o($VN1,[2,235]),o($VH1,[2,170]),{16:339,26:26,114:$V8,124:373,194:483,195:482,310:$V9},{17:[1,484]},o($VI1,[2,215]),o($Ve1,[2,354]),o($Ve1,[2,342]),o($Ve1,[2,343]),o($VJ1,[2,345]),o($VJ1,[2,346]),{20:[1,485]},{17:[1,486]},o($VY,[2,371],{39:487,17:[1,488]}),{16:402,20:[2,27],26:26,38:489,114:$V8,310:$V9},o($VZ,[2,105]),o($VZ,[2,380]),{20:[2,107]},o($VZ,[2,108]),o($VZ,[2,382]),{20:[2,110]},o($Vw,$Vx,{80:137,81:138,49:490,82:$Vy,84:$Vz,86:$VA}),o($VZ,[2,117]),o($VZ,[2,384]),{20:[2,119]},o($VU1,[2,387],{132:491,151:492,152:$VR1}),o($VP1,[2,386]),{26:494,114:$VV1,143:493,308:$VW1,310:$V9},o($VP1,[2,129]),{16:498,26:26,114:$V8,147:497,310:$V9,319:$V_},o($VP1,[2,131]),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:499,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{16:500,26:26,114:$V8,310:$V9},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:501,310:$V9}),o($VB,[2,392]),{16:502,26:26,114:$V8,310:$V9},o($VZ,[2,144]),o($VZ,[2,394]),{20:[2,146]},o($VZ,[2,163]),o($VZ,[2,410]),o([200,201],$Va1,{192:292,187:503,189:504,193:$Vb1}),o($VZ,[2,153]),o($VZ,[2,398]),{150:$VX1,172:505,178:506,181:$VY1},{150:$VX1,172:509,178:506,181:$VY1},{150:$VX1,172:510,178:506,181:$VY1},o($VZ1,[2,248],{264:511,285:[1,512]}),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:513,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{17:[1,515],26:494,114:$VV1,143:516,281:514,308:$VW1,310:$V9},o($VA1,[2,228]),{20:[1,517]},{17:[1,518]},{18:[1,519]},{17:[1,521],20:[2,373],42:520},{16:443,20:[2,30],26:26,41:522,114:$V8,310:$V9},o($VY,[2,26]),o($VY,[2,372]),{20:[2,28]},o($Vw,[2,268]),o($Vw,$Vo,{77:77,78:78,26:79,79:80,48:523,310:$V9}),o($VU1,[2,388]),o($VP1,[2,127],{115:[1,524]}),o($V_1,[2,293]),o($V_1,[2,294]),o($V_1,[2,295]),o($VP1,[2,130]),o($VP1,[2,133],{148:525,115:$VQ1}),o($VP1,[2,137]),{51:[1,527],133:526},o($Vw,$Vx,{80:137,81:138,49:528,82:$Vy,84:$Vz,86:$VA}),o($VB,[2,138]),{20:[1,529]},{190:530,197:531,198:532,199:533,200:$V$1,201:$V02},{20:[1,536]},{20:[2,159],150:$VX1,172:537,178:506,181:$VY1},{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:538,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{17:[1,539]},{20:[1,540]},{20:[1,541]},o($V12,[2,262],{265:542,296:[1,543]}),{206:[1,544]},{17:[1,545]},{17:[1,546]},{18:[1,547]},{17:[2,298],295:$V22,309:548},o($VH1,[2,413],{196:550,17:[1,551]}),{16:339,20:[2,172],26:26,114:$V8,124:373,194:483,195:552,310:$V9},{16:299,26:26,114:$V8,248:298,254:554,255:553,310:$V9},{20:[2,29]},{20:[2,374]},{20:[2,31]},{17:$VU,50:555,113:$VV},{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:556,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},o($VP1,[2,134]),o($VU1,[2,389],{134:557,151:558,152:$VR1}),{17:[1,559]},{17:$VU,50:560,113:$VV},o($VO1,[2,411],{188:561,17:[1,562]}),{20:[2,202],191:563,220:564,222:$V32},o($V42,[2,174],{197:531,198:532,199:533,190:566,200:$V$1,201:$V02}),o($V52,[2,176]),{16:567,26:26,114:$V8,310:$V9},o($Vd,[2,177]),{202:568,269:$V01,270:$V11,271:$V21,272:$V31},o($V62,[2,399],{173:569,17:[1,570]}),{20:[2,160]},{17:[1,571]},{18:[1,572]},o($V62,[2,401],{175:573,17:[1,574]}),o($V62,[2,403],{177:575,17:[1,576]}),{20:[2,265],266:577,299:[1,578]},{297:[1,579],298:[1,580]},{17:[1,582],26:494,114:$VV1,143:584,286:581,289:583,308:$VW1,310:$V9},o($VS1,[2,247]),o($VM1,[2,244]),{26:494,114:$VV1,143:586,282:585,308:$VW1,310:$V9},{17:[2,299]},{26:494,114:$VV1,143:587,308:$VW1,310:$V9},o($VH1,[2,171]),o($VH1,[2,414]),{20:[2,173]},{20:[1,588]},{16:299,20:[2,218],26:26,114:$V8,248:298,254:554,255:589,310:$V9},{17:[2,120]},o($VP1,[2,128]),o($Vw,$Vo,{77:77,78:78,26:79,79:80,48:590,310:$V9}),o($VU1,[2,390]),{18:[1,591]},{17:[2,122]},o($VO1,[2,166]),o($VO1,[2,412]),{20:[2,167]},{17:[1,592],226:[1,593]},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:594,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($V42,[2,175]),{51:[1,598],115:$VB1,150:$VC1,203:595,204:596,205:597,206:[1,599],273:364,274:$VD1,276:$VE1,277:363,278:$VF1,279:$VG1},o($Vd,[2,178]),o($V62,[2,154]),o($V62,[2,400]),{18:[1,600]},{179:[1,601]},o($V62,[2,155]),o($V62,[2,402]),o($V62,[2,156]),o($V62,[2,404]),{20:[2,223]},{297:[1,602],298:[1,603]},{17:[1,604]},{17:[1,605]},{17:[1,606]},{18:[1,607]},{17:[2,258],294:608,295:$V72},o($V82,[2,253],{290:[1,610],291:[1,611],292:[1,612],293:[1,613]}),{20:[1,614]},{17:[1,615]},{17:[2,300],295:$V22,309:616},o($VO1,[2,423],{256:617,17:[1,618]}),{20:[2,219]},{17:$VU,50:619,113:$VV},{149:620,150:$V92},{20:[2,203]},{17:[1,622]},o([17,226],[2,198]),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:623,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},o($V52,[2,180]),{17:[1,624]},{17:[2,181]},{207:[1,625]},{179:[1,626]},{20:[1,627]},{17:[1,628]},{17:[1,629]},o($V12,[2,263]),o($V12,[2,264]),o($VZ1,[2,249]),{26:494,114:$VV1,143:584,287:630,289:631,308:$VW1,310:$V9},{17:[2,259]},{26:494,114:$VV1,143:584,289:632,308:$VW1,310:$V9},o($V82,[2,254]),o($V82,[2,255]),o($V82,[2,256]),o($V82,[2,257]),o($VM1,[2,427],{283:633,17:[1,634]}),{20:[2,296],26:494,114:$VV1,143:586,282:635,308:$VW1,310:$V9},{17:[2,301]},o($VO1,[2,221]),o($VO1,[2,424]),{17:[1,636]},{20:[1,637]},{145:638,146:[1,639]},{18:[1,640]},o($V52,[2,179]),{18:[1,641]},{17:[2,182],152:[1,642]},{20:[1,643]},o($Va2,[2,407],{182:644,17:[1,645]}),{20:[2,266]},{20:[2,267]},{20:[1,646]},{17:[1,647]},{17:[2,260],294:648,295:$V72},o($VM1,[2,245]),o($VM1,[2,428]),{20:[2,297]},{20:[1,649]},o($VP1,[2,132]),{17:[1,650]},{16:498,26:26,114:$V8,310:$V9},{150:$Vb2,227:651,229:652},{150:$Vc2,209:654,213:655},{208:[1,657]},o($Va2,[2,405],{180:658,17:[1,659]}),o($Va2,[2,162]),o($Va2,[2,408]),o($VZ1,[2,429],{288:660,17:[1,661]}),{20:[2,251],26:494,114:$VV1,143:584,287:662,289:631,308:$VW1,310:$V9},{17:[2,261]},{17:[2,121]},{20:[2,135],149:663,150:$V92},{20:[1,664]},{17:[1,665]},{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:666,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{20:[1,667],211:668,216:669,218:[1,670],219:[1,671]},o($Vd2,[2,187],{213:655,209:672,150:$Vc2}),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:673,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{17:[2,183]},o($Va2,[2,161]),o($Va2,[2,406]),o($VZ1,[2,250]),o($VZ1,[2,430]),{20:[2,252]},{20:[2,136]},{17:[1,675],20:[2,419],228:674},{20:[2,207],150:$Vb2,227:676,229:652},{214:[1,677]},o($V52,[2,415],{210:678,17:[1,679]}),{20:[1,680]},{214:[1,681]},{214:[2,192]},{214:[2,193]},o($Vd2,[2,188]),{214:[1,682]},{20:[2,204]},{20:[2,420]},{20:[2,208]},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,221:684,223:683,224:$Ve2,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},o($V52,[2,184]),o($V52,[2,416]),o($V52,[2,417],{212:686,17:[1,687]}),{17:[1,690],26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:691,165:66,166:67,215:688,217:689,220:692,221:693,222:$V32,223:262,224:$Ve2,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{17:[1,695],26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:691,165:66,166:67,215:694,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{17:[2,205]},{17:[2,206]},{26:697,114:[1,696],310:$V9},o($V52,[2,185]),o($V52,[2,418]),{17:[1,698]},{17:[1,699]},{18:[1,700]},{17:[1,701]},{17:[2,194]},{17:[2,195]},o([20,150,218,219],[2,186]),{18:[1,702]},{17:[2,199]},{17:[2,200],87:[1,703]},{20:[2,189]},{20:[2,190]},{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:705,165:66,166:67,217:704,220:692,221:693,222:$V32,223:262,224:$Ve2,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},o($Vf2,[2,196]),{26:133,28:132,59:$V61,85:131,87:$V41,90:$Ve,91:429,114:$Vf,144:705,165:66,166:67,223:262,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,304:253,305:254,306:430,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm,322:428,324:$V51,327:$V71},{26:133,28:132,85:131,90:$Ve,114:$Vf,165:66,166:67,223:127,225:706,239:$Vg,297:$Vh,298:$Vv,300:128,302:129,310:$V9,311:$Vi,312:$Vj,313:$Vk,314:$Vl,319:$Vm},{17:[1,707]},{17:[1,708]},{89:[1,709]},{20:[1,710]},{20:[1,711]},{17:[2,201]},{20:[2,191]},o($Vf2,[2,197])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,86],62:[2,19],147:[2,90],176:[2,16],179:[2,21],181:[2,321],193:[2,36],194:[2,34],216:[2,92],250:[2,113],259:[2,281],260:[2,282],261:[2,283],266:[2,276],270:[2,23],271:[2,25],283:[2,396],297:[2,217],300:[2,323],334:[2,273],351:[2,148],373:[2,271],374:[2,225],399:[2,278],407:[2,111],418:[2,165],421:[2,158],448:[2,107],451:[2,110],455:[2,119],469:[2,146],489:[2,28],520:[2,29],521:[2,374],522:[2,31],537:[2,160],548:[2,299],552:[2,173],555:[2,120],560:[2,122],563:[2,167],577:[2,223],589:[2,219],592:[2,203],598:[2,181],608:[2,259],616:[2,301],628:[2,266],629:[2,267],635:[2,297],648:[2,261],649:[2,121],657:[2,183],662:[2,252],663:[2,136],670:[2,192],671:[2,193],674:[2,204],675:[2,420],676:[2,208],683:[2,205],684:[2,206],692:[2,194],693:[2,195],696:[2,199],698:[2,189],699:[2,190],709:[2,201],710:[2,191]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]),         
        

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),        
    };

    //next state transition table
    const NEXT_STATE = {        
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',
        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',
        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([                        
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.find.else', 1]
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import', 1 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],
        [ 'import.block', 1 ],
        [ 'type.block', 1 ],
        [ 'const.block', 1 ],         
        [ 'entity.mixes', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //exceptions of NEWLINE_STOPPER in the case of indent happens
    const NEWLINE_STOPPER_INDENT_EXCEPTION = new Set([           
        'import',
        'type',     
        'const'
    ]);

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when',
        'entity.associations.item',
        'entity.associations.item.block.when',
        'entity.triggers.onChange.when'                
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            if (NEWLINE_STOPPER_INDENT_EXCEPTION.has(this.lastState)) {
                this.markNewlineStop(false);
            }

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    if (DBG_MODE) {
                        console.log('< exit state:', last, '\n');
                    }
                } while (last !== finalStateToExit);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 313;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 114;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 114;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 114;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 90;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 311;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 297;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 297;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 308;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 314;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 298;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 312;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                    /*
                                    if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                        state.exitState(state.lastState);                                                                        
                                    }*/

                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                }                                

                                return 310;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}