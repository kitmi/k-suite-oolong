/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,44,97,230,238],$V8=[1,29],$V9=[1,34],$Va=[1,49],$Vb=[17,52,83,88,89,95,110,111,138,142,146,148,159,186,229,233,248,255,257,259,260,276,291,302],$Vc=[2,286],$Vd=[1,57],$Ve=[1,67],$Vf=[1,70],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,66],$Vk=[1,68],$Vl=[1,69],$Vm=[1,71],$Vn=[17,83,88,89,110],$Vo=[2,63],$Vp=[2,99],$Vq=[1,108],$Vr=[17,302],$Vs=[1,112],$Vt=[17,20,83,86,88,89,110,148,180,181,194,202,206,221,233,272,274,276,291,302,305,306,308,309,310,311,312,313,314,315,316,317,320,321],$Vu=[1,122],$Vv=[1,128],$Vw=[17,110],$Vx=[2,69],$Vy=[1,137],$Vz=[1,138],$VA=[1,139],$VB=[17,83,88,89,110,291],$VC=[1,141],$VD=[1,155],$VE=[1,163],$VF=[1,156],$VG=[1,157],$VH=[1,158],$VI=[1,159],$VJ=[1,160],$VK=[1,161],$VL=[1,162],$VM=[1,179],$VN=[221,276],$VO=[17,20,83,86,88,89,110,111,148,180,181,194,202,206,221,233,272,274,276,291,302,305,306,308,309,310,311,312,313,314,315,316,317,320,321],$VP=[86,302],$VQ=[1,185],$VR=[17,20,86,110,148,180,181,194,202,206,221,233,272,274,276,291,302,305,306,308,309,310,311,312,313,314,315,316,317,320,321],$VS=[2,265],$VT=[1,187],$VU=[2,108],$VV=[1,192],$VW=[20,41],$VX=[20,108,109,111,115,122,152,153,160,163],$VY=[1,217],$VZ=[16,291],$V_=[2,214],$V$=[1,232],$V01=[1,233],$V11=[1,234],$V21=[1,235],$V31=[1,249],$V41=[1,251],$V51=[1,259],$V61=[17,159,233],$V71=[2,153],$V81=[1,284],$V91=[1,297],$Va1=[1,298],$Vb1=[17,20,86,110,148,180,181,194,202,291,320,321],$Vc1=[1,302],$Vd1=[1,304],$Ve1=[1,303],$Vf1=[1,300],$Vg1=[1,301],$Vh1=[1,305],$Vi1=[1,306],$Vj1=[1,307],$Vk1=[1,308],$Vl1=[1,309],$Vm1=[1,310],$Vn1=[1,311],$Vo1=[1,312],$Vp1=[1,313],$Vq1=[1,333],$Vr1=[1,334],$Vs1=[1,335],$Vt1=[1,336],$Vu1=[20,261,265,266,277,280],$Vv1=[1,354],$Vw1=[1,353],$Vx1=[1,351],$Vy1=[1,352],$Vz1=[1,349],$VA1=[1,350],$VB1=[20,111,146,180,181,255,257,259,260,261,265,266,277,280],$VC1=[17,111],$VD1=[17,20,86,110,148,180,181,194,202,291],$VE1=[16,84,219,278,279,291,292,293,294,295,296,301,306],$VF1=[16,17,291],$VG1=[20,265,266,277,280],$VH1=[16,20,291],$VI1=[17,110,148,291],$VJ1=[1,441],$VK1=[20,266,277,280],$VL1=[17,20,110,148,180,181,194,202,291],$VM1=[17,110,291],$VN1=[1,465],$VO1=[1,466],$VP1=[20,277,280],$VQ1=[17,110,111,148,271,272,273,274,276,291],$VR1=[1,498],$VS1=[1,499],$VT1=[20,280],$VU1=[1,507],$VV1=[1,524],$VW1=[20,202],$VX1=[20,180,181,202],$VY1=[1,558],$VZ1=[17,276],$V_1=[1,570],$V$1=[1,597],$V02=[1,600],$V12=[20,198,199],$V22=[1,627],$V32=[17,20,146,198,199];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"STRING":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"identifier_or_string":30,"schema_statement_block":31,"schema_statement_option0":32,"comment_or_not":33,"schema_statement_block_option0":34,"schema_views_or_not":35,"schema_views":36,"schema_entities":37,"entities":38,"schema_entities_block":39,"schema_entities_option0":40,"views":41,"schema_views_block":42,"schema_views_option0":43,"type":44,"type_statement_item":45,"type_statement_block":46,"type_statement_option0":47,"type_base":48,"type_info_or_not":49,"type_modifiers_or_not":50,"field_comment_or_not":51,":":52,"types":53,"int_keyword":54,"number_keyword":55,"text_keyword":56,"bool_keyword":57,"binary_keyword":58,"datetime_keyword":59,"any":60,"enum":61,"array":62,"object":63,"int":64,"integer":65,"number":66,"float":67,"decimal":68,"text":69,"string":70,"bool":71,"boolean":72,"blob":73,"binary":74,"buffer":75,"datetime":76,"timestamp":77,"type_infos":78,"type_info":79,"narrow_function_call":80,"type_modifiers":81,"type_modifier":82,"|~":83,"(":84,"logical_expression":85,")":86,"general_function_call":87,"|>":88,"|=":89,"literal_and_value_expression":90,"entity_statement_header":91,"entity_statement_block":92,"entity_statement_option0":93,"entity_statement_header0":94,"extends":95,"identifier_or_string_list":96,"entity":97,"entity_sub_items":98,"entity_sub_item":99,"with_features":100,"has_fields":101,"associations_statement":102,"key_statement":103,"index_statement":104,"data_statement":105,"interfaces_statement":106,"mixin_statement":107,"triggers_statement":108,"mixes":109,"--":110,"with":111,"with_features_block":112,"with_features_option0":113,"feature_inject":114,"has":115,"has_fields_block":116,"has_fields_option0":117,"field_item":118,"field_item_body":119,"modifiable_field":120,"type_base_or_not":121,"associations":122,"associations_block":123,"associations_statement_option0":124,"association_item":125,"association_type_referee":126,"association_item_option0":127,"association_item_option1":128,"association_cases_block":129,"association_item_option2":130,"association_type_referer":131,"association_item_option3":132,"hasOne":133,"hasMany":134,"refersTo":135,"belongsTo":136,"association_through":137,"connectedBy":138,"identifier_string_or_dotname":139,"conditional_expression":140,"association_connection":141,"being":142,"array_of_identifier_or_string":143,"association_cases":144,"association_condition":145,"when":146,"association_as":147,"as":148,"association_qualifiers":149,"optional":150,"default":151,"key":152,"index":153,"index_item":154,"index_statement_block":155,"index_statement_option0":156,"index_item_body":157,"index_item_option0":158,"unique":159,"data":160,"inline_object":161,"inline_array":162,"interface":163,"interfaces_statement_block":164,"interfaces_statement_option0":165,"interface_definition":166,"interface_definition_body":167,"interface_definition_option0":168,"accept_or_not":169,"implementation":170,"return_or_not":171,"accept_statement":172,"accept":173,"modifiable_param":174,"accept_block":175,"accept_statement_option0":176,"operation":177,"find_one_operation":178,"find_one_keywords":179,"findOne":180,"find":181,"article_keyword":182,"selection_inline_keywords":183,"case_statement":184,"cases_keywords":185,"by":186,"cases":187,"below":188,"case_condition_block":189,"case_statement_option0":190,"otherwise_statement":191,"case_statement_option1":192,"case_condition_item":193,"=>":194,"condition_as_result_expression":195,"otherwise_keywords":196,"stop_controll_flow_expression":197,"otherwise":198,"else":199,"return_expression":200,"throw_error_expression":201,"return":202,"modifiable_value":203,"throw":204,"gfc_param_list":205,"unless":206,"return_condition_block":207,"return_or_not_option0":208,"return_condition_item":209,"update_operation":210,"update":211,"where_expr":212,"create_operation":213,"create":214,"delete_operation":215,"delete":216,"coding_block":217,"do":218,"{":219,"javascript":220,"}":221,"assign_operation":222,"set":223,"identifier_or_member_access":224,"<-":225,"value":226,"variable_modifier_or_not":227,"entity_fields_selections":228,"->":229,"dataset":230,"dataset_statement_block":231,"dataset_statement_option0":232,"is":233,"article_keyword_or_not":234,"dataset_join_with_item":235,"dataset_join_with_block":236,"dataset_join_with_item_option0":237,"view":238,"view_statement_block":239,"view_statement_option0":240,"view_main_entity":241,"view_selection_or_not":242,"group_by_or_not":243,"having_or_not":244,"order_by_or_not":245,"skip_or_not":246,"limit_or_not":247,"list":248,"view_selection":249,"a":250,"an":251,"the":252,"one":253,"selection_attributive_keywords":254,"of":255,"which":256,"where":257,"selection_keywords":258,"selectedBy":259,"selected":260,"group":261,"identifier_string_or_dotname_list":262,"identifier_string_or_dotname_block":263,"group_by_or_not_option0":264,"having":265,"order":266,"order_by_list":267,"order_by_block":268,"order_by_or_not_option0":269,"order_by_clause":270,"ascend":271,"<":272,"descend":273,">":274,"order_by_list0":275,",":276,"offset":277,"INTEGER":278,"REFERENCE":279,"limit":280,"gfc_param0":281,"nfc_param_list":282,"nfc_param":283,"nfc_param_list0":284,"unary_expression":285,"binary_expression":286,"boolean_expression":287,"gfc_param_list0":288,"DOTNAME":289,"identifier_string_or_dotname_list0":290,"NAME":291,"FLOAT":292,"BOOL":293,"REGEXP":294,"SCRIPT":295,"SYMBOL":296,"kv_pairs":297,"kv_pair_item":298,"non_exist":299,"kv_pairs0":300,"[":301,"]":302,"identifier_or_string_list0":303,"simple_expression":304,"exists":305,"not":306,"null":307,"~":308,">=":309,"<=":310,"==":311,"!=":312,"in":313,"+":314,"-":315,"*":316,"/":317,"logical_expression_right":318,"logical_operators":319,"and":320,"or":321,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",16:"STRING",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",38:"entities",41:"views",44:"type",52:":",60:"any",61:"enum",62:"array",63:"object",64:"int",65:"integer",66:"number",67:"float",68:"decimal",69:"text",70:"string",71:"bool",72:"boolean",73:"blob",74:"binary",75:"buffer",76:"datetime",77:"timestamp",83:"|~",84:"(",86:")",88:"|>",89:"|=",95:"extends",97:"entity",108:"triggers_statement",109:"mixes",110:"--",111:"with",115:"has",122:"associations",133:"hasOne",134:"hasMany",135:"refersTo",136:"belongsTo",138:"connectedBy",142:"being",146:"when",148:"as",150:"optional",151:"default",152:"key",153:"index",159:"unique",160:"data",163:"interface",173:"accept",180:"findOne",181:"find",186:"by",187:"cases",188:"below",194:"=>",198:"otherwise",199:"else",202:"return",204:"throw",206:"unless",211:"update",212:"where_expr",214:"create",216:"delete",218:"do",219:"{",220:"javascript",221:"}",223:"set",224:"identifier_or_member_access",225:"<-",227:"variable_modifier_or_not",229:"->",230:"dataset",233:"is",238:"view",248:"list",250:"a",251:"an",252:"the",253:"one",255:"of",256:"which",257:"where",259:"selectedBy",260:"selected",261:"group",265:"having",266:"order",271:"ascend",272:"<",273:"descend",274:">",276:",",277:"offset",278:"INTEGER",279:"REFERENCE",280:"limit",289:"DOTNAME",291:"NAME",292:"FLOAT",293:"BOOL",294:"REGEXP",295:"SCRIPT",296:"SYMBOL",301:"[",302:"]",305:"exists",306:"not",307:"null",308:"~",309:">=",310:"<=",311:"==",312:"!=",313:"in",314:"+",315:"-",316:"*",317:"/",320:"and",321:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[31,3],[35,0],[35,1],[37,6],[39,2],[39,3],[36,6],[42,2],[42,3],[10,3],[10,6],[45,5],[46,2],[46,3],[48,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[54,1],[54,1],[55,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[58,1],[58,1],[58,1],[59,1],[59,1],[49,0],[49,1],[78,1],[78,2],[79,1],[79,1],[50,0],[50,1],[81,1],[81,2],[82,4],[82,2],[82,2],[82,2],[82,2],[82,4],[82,2],[82,2],[12,2],[12,6],[91,1],[91,3],[94,2],[92,2],[98,1],[98,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[107,3],[33,0],[33,3],[100,6],[112,2],[112,3],[101,6],[116,2],[116,3],[118,2],[51,0],[51,2],[119,1],[121,0],[121,1],[102,6],[123,2],[123,3],[125,6],[125,10],[125,6],[126,1],[126,1],[131,1],[131,1],[137,2],[137,4],[137,1],[137,2],[129,5],[141,2],[141,3],[144,3],[144,4],[145,2],[147,2],[149,1],[149,4],[103,3],[103,3],[104,3],[104,6],[155,2],[155,3],[154,1],[154,3],[157,1],[157,1],[105,3],[105,3],[106,6],[164,1],[164,2],[166,6],[167,3],[169,0],[169,1],[172,3],[172,6],[175,2],[175,3],[170,1],[170,2],[177,1],[179,1],[179,2],[178,4],[178,3],[185,1],[185,2],[185,4],[184,6],[184,7],[193,4],[189,1],[189,2],[191,4],[191,4],[191,7],[196,1],[196,1],[197,1],[197,1],[195,2],[195,5],[200,2],[201,2],[201,2],[201,5],[171,0],[171,2],[171,7],[209,4],[209,4],[207,2],[207,3],[210,6],[213,5],[215,4],[217,5],[222,6],[228,1],[228,3],[14,7],[231,3],[236,1],[236,2],[235,2],[235,8],[13,7],[239,9],[241,3],[241,4],[242,0],[242,1],[249,3],[234,0],[234,1],[182,1],[182,1],[182,1],[182,1],[254,2],[254,1],[254,1],[254,1],[258,1],[258,2],[183,1],[183,1],[243,0],[243,4],[243,7],[244,0],[244,3],[245,0],[245,4],[245,7],[268,2],[268,3],[270,1],[270,2],[270,2],[270,2],[270,2],[267,1],[267,2],[275,2],[275,3],[246,0],[246,3],[246,3],[247,0],[247,3],[247,3],[120,4],[203,1],[203,2],[174,1],[114,1],[114,1],[80,4],[282,1],[282,2],[284,2],[284,3],[283,1],[283,1],[90,1],[90,1],[90,1],[87,4],[205,1],[205,2],[288,2],[288,3],[281,1],[281,1],[281,1],[139,1],[139,1],[139,1],[263,2],[263,3],[262,1],[262,2],[290,2],[290,3],[30,1],[30,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[161,2],[161,3],[298,3],[298,2],[298,3],[299,0],[297,1],[297,2],[300,2],[300,3],[162,2],[162,3],[143,3],[96,1],[96,2],[303,2],[303,3],[226,1],[226,1],[140,1],[140,1],[140,1],[304,1],[304,1],[304,3],[285,2],[285,3],[285,3],[285,4],[285,4],[287,3],[287,3],[287,3],[286,3],[286,3],[286,3],[286,3],[286,3],[286,3],[286,3],[286,4],[286,3],[286,3],[286,3],[286,3],[85,2],[318,2],[319,1],[319,1],[21,0],[21,1],[25,0],[25,1],[32,0],[32,1],[34,0],[34,1],[40,0],[40,1],[43,0],[43,1],[47,0],[47,1],[93,0],[93,1],[113,0],[113,1],[117,0],[117,1],[124,0],[124,1],[127,0],[127,1],[128,0],[128,1],[130,0],[130,1],[132,0],[132,1],[156,0],[156,1],[158,0],[158,1],[165,0],[165,1],[168,0],[168,1],[176,0],[176,1],[190,0],[190,1],[192,0],[192,1],[208,0],[208,1],[232,0],[232,1],[237,0],[237,1],[240,0],[240,1],[264,0],[264,1],[269,0],[269,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 102: case 114: case 130: case 140: case 157: case 192: case 236: case 280:
this.$ = [ $$[$0-1] ];
break;
case 31: case 103: case 115: case 141: case 158: case 193: case 237: case 281:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 85: case 128: case 202: case 306:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 86: case 107: case 150: case 305: case 307:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 159: case 172: case 203: case 243: case 245: case 260: case 262: case 270: case 272: case 282: case 284: case 311: case 313:
this.$ = [ $$[$0] ];
break;
case 72: case 160: case 173: case 204: case 244: case 246: case 261: case 263: case 271: case 273: case 285: case 312: case 314:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 73:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 74:
this.$ = state.normalizeValidator($$[$0]);
break;
case 75:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 76:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 77:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args)    ;
break;
case 78:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 79:
this.$ = state.normalizeActivator($$[$0]);
break;
case 80:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 82:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 83:
this.$ = [ $$[$0], {} ];
break;
case 84:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 88:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 98:
this.$ = { mixins: $$[$0-1] };
break;
case 100:
this.$ = { comment: $$[$0-1] };
break;
case 101:
this.$ = { features: $$[$0-2] };
break;
case 104:
this.$ = { fields: $$[$0-2] };
break;
case 105:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 106:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 109:
this.$ = { comment: $$[$0] };
break;
case 113:
this.$ = { associations: $$[$0-2] };
break;
case 116:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 117:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 118:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 123:
this.$ = { connectedBy: $$[$0] }    ;
break;
case 124:
this.$ = { connectedBy: $$[$0-2], connectedWith: $$[$0] }    ;
break;
case 125:
this.$ = { remoteField: $$[$0] }     ;
break;
case 126:
this.$ = { remoteField: $$[$0] }      ;
break;
case 127:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 129:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 131:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 132:
this.$ = $$[$0];;
break;
case 133:
this.$ = { srcField: $$[$0] };
break;
case 134:
this.$ = { optional: true };
break;
case 135:
this.$ = { default: $$[$0-1] };
break;
case 136: case 137:
this.$ = { key: $$[$0-1] };
break;
case 138:
this.$ = { indexes: [$$[$0-1]] };
break;
case 139:
this.$ = { indexes: $$[$0-2] };
break;
case 143:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 144: case 145:
this.$ = { fields: $$[$0] };
break;
case 146: case 147:
this.$ = { data: $$[$0-1] };
break;
case 148:
this.$ = { interfaces: $$[$0-2] };
break;
case 149:
this.$ = Object.assign({}, $$[$0]);
break;
case 151:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 152:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 155:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 156:
this.$ = { accept: $$[$0-2] };
break;
case 164:
this.$ = { oolType: 'findOne', model: $$[$0-2], condition: $$[$0] };
break;
case 165:
this.$ = { oolType: 'findOne', model: $$[$0-1], condition: $$[$0] };
break;
case 169:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 170:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 171:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 174: case 175: case 205: case 299: case 309: case 310: case 322:
this.$ = $$[$0-1];
break;
case 176: case 182:
this.$ = $$[$0-2];
break;
case 183:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 184:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 185:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 186:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 188:
 this.$ = { return: $$[$0-1] }; 
break;
case 189:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 190: case 191:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 194:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 195:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 196:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 197:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 198:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 199:
this.$ = { entity: $$[$0] }     ;
break;
case 200:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 201:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 206:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 207:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 208:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 209:
this.$ = { dataset: $$[$0] };
break;
case 210:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 213:
this.$ = { condition: $$[$0-1] };
break;
case 229:
this.$ = { groupBy: $$[$0-1] };
break;
case 230:
this.$ = { groupBy: $$[$0-2] };
break;
case 232:
this.$ = { having: $$[$0-1] };
break;
case 234:
this.$ = { orderBy: $$[$0-1] };
break;
case 235:
this.$ = { orderBy: $$[$0-2] };
break;
case 238:
this.$ = { field: $$[$0], ascend: true };
break;
case 239: case 240:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 241: case 242:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 248: case 249:
this.$ = { offset: $$[$0-1] };
break;
case 251: case 252:
this.$ = { limit: $$[$0-1] };
break;
case 253:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 255:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 259: case 269:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 265:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 283:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 298:
this.$ = {};
break;
case 300: case 302:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 301:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 308:
this.$ = [];
break;
case 316:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 323:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 324:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 325:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 326:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 327:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true };
break;
case 328: case 329:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0]) };
break;
case 330:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: state.normalizeValidator($$[$0].name, $$[$0].args) };
break;
case 331:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 332:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 333:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 334:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 335:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 336:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 337:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 338:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 339:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 340:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 341:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 342:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 343:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 344:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 345:
this.$ = { operator: 'and' };
break;
case 346:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,44:$V3,91:17,94:20,97:$V4,230:$V5,238:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,44:$V3,91:17,94:20,97:$V4,230:$V5,238:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:[1,24],17:[1,25]},{17:[1,27],23:26,26:28,291:$V8},{16:$V9,17:[1,31],26:33,30:32,45:30,291:$V8},{16:$V9,26:33,30:35,291:$V8},{17:[1,36]},{16:$V9,26:33,30:37,291:$V8},{16:$V9,26:33,30:38,291:$V8},{17:[2,83],95:[1,39]},{16:$V9,26:33,30:40,291:$V8},{1:[2,3]},{5:[2,5]},{17:[1,41]},{18:[1,42]},{17:[1,43]},{18:[1,44]},{27:[1,45]},o([17,20,27,52,83,84,86,88,89,95,110,111,138,142,146,148,159,180,181,186,194,202,206,221,229,233,248,255,257,259,260,271,272,273,274,276,291,302,305,306,308,309,310,311,312,313,314,315,316,317,320,321],[2,288]),{17:[1,46]},{18:[1,47]},{48:48,52:$Va},o($Vb,$Vc),o($Vb,[2,287]),{17:[1,50]},o($V7,[2,81],{18:[1,51]}),{17:[1,52]},{17:[1,53]},{16:$V9,26:33,30:55,96:54,291:$V8},o([17,95],[2,85]),o($V7,[2,13]),{16:$Vd,19:56},o($V7,[2,17]),{23:59,24:58,26:28,291:$V8},{16:$Ve,28:60,161:64,162:65,219:$Vf,278:$Vg,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($V7,[2,32]),{16:$V9,26:33,30:32,45:73,46:72,291:$V8},o($Vn,$Vo,{49:74,78:75,79:76,26:77,80:78,291:$V8}),{16:$V9,26:33,30:90,53:79,54:80,55:81,56:82,57:83,58:84,59:85,60:[1,86],61:[1,87],62:[1,88],63:[1,89],64:[1,91],65:[1,92],66:[1,93],67:[1,94],68:[1,95],69:[1,96],70:[1,97],71:[1,98],72:[1,99],73:[1,100],74:[1,101],75:[1,102],76:[1,103],77:[1,104],291:$V8},{18:[1,105]},o([108,109,111,115,122,152,153,160,163],$Vp,{92:106,33:107,110:$Vq}),{18:[1,109]},{18:[1,110]},{17:[2,84]},o($Vr,[2,311],{303:111,276:$Vs}),{20:[1,113]},{17:[1,114]},{20:[1,115]},{17:[1,116]},{17:[2,19]},o($Vt,[2,289]),o($Vt,[2,290]),o($Vt,[2,291]),o($Vt,[2,292]),o($Vt,[2,293]),o($Vt,[2,294]),o($Vt,[2,295]),o($Vt,[2,296]),o($Vt,[2,297]),{16:$V9,26:121,30:120,221:[1,117],278:$Vu,291:$V8,297:118,298:119},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:125,205:124,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,302:[1,123]},{20:[1,132]},{17:[1,133]},o($Vw,$Vx,{50:134,81:135,82:136,83:$Vy,88:$Vz,89:$VA}),o($Vn,[2,64]),o($Vn,[2,65],{79:76,26:77,80:78,78:140,291:$V8}),o($VB,[2,67],{84:$VC}),o($VB,[2,68]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),o([20,38,41],$Vp,{31:142,33:143,110:$Vq}),{20:[1,144]},{98:145,99:146,100:147,101:148,102:149,103:150,104:151,105:152,106:153,107:154,108:$VD,109:$VE,111:$VF,115:$VG,122:$VH,152:$VI,153:$VJ,160:$VK,163:$VL},{16:[1,164]},{233:[1,167],239:165,241:166},{231:168,233:[1,169]},o($Vr,[2,312]),{16:$V9,26:33,30:170,291:$V8},o($V7,[2,347],{21:171,17:[1,172]}),{16:$Vd,19:173,20:[2,15]},o($V7,[2,349],{25:174,17:[1,175]}),{20:[2,20],23:59,24:176,26:28,291:$V8},o($Vt,[2,298]),{221:[1,177]},{221:[2,304],276:$VM,300:178},{52:[1,180]},o($VN,[2,303],{299:181,52:$Vc}),{52:[1,182]},o($VO,[2,308]),{302:[1,183]},o($VP,[2,270],{288:184,276:$VQ}),o($VR,[2,254],{82:136,81:186,83:$Vy,88:$Vz,89:$VA}),o($Vt,[2,274]),o($Vt,[2,275]),o($Vt,[2,276]),o($Vt,[2,264]),o($Vt,$VS,{84:$VT}),o($V7,[2,359],{47:188,17:[1,189]}),{16:$V9,20:[2,35],26:33,30:32,45:73,46:190,291:$V8},{17:$VU,51:191,110:$VV},o($Vw,[2,70]),o($VR,[2,71],{82:136,81:193,83:$Vy,88:$Vz,89:$VA}),{26:195,84:[1,194],87:196,291:$V8},{26:197,87:198,291:$V8},{26:200,84:[1,199],87:201,291:$V8},o($Vn,[2,66]),{16:$Ve,26:204,28:130,161:64,162:65,219:$Vf,278:$Vg,282:202,283:203,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{20:[1,205]},o($VW,[2,353],{34:206,37:207,38:[1,208]}),o($V7,[2,361],{93:209,17:[1,210]}),{20:[2,86]},{20:[2,87],98:211,99:146,100:147,101:148,102:149,103:150,104:151,105:152,106:153,107:154,108:$VD,109:$VE,111:$VF,115:$VG,122:$VH,152:$VI,153:$VJ,160:$VK,163:$VL},o($VX,[2,89]),o($VX,[2,90]),o($VX,[2,91]),o($VX,[2,92]),o($VX,[2,93]),o($VX,[2,94]),o($VX,[2,95]),o($VX,[2,96]),o($VX,[2,97]),{17:[1,212]},{17:[1,213]},{17:[1,214]},{16:$V9,26:33,30:215,143:216,291:$V8,301:$VY},{16:$V9,17:[1,219],26:33,30:221,143:222,154:218,157:220,291:$V8,301:$VY},{161:223,162:224,219:$Vf,301:$Vm},{17:[1,225]},{16:$V9,26:33,30:55,96:226,291:$V8},{17:[1,227]},{20:[1,228]},{17:[1,229]},o($VZ,$V_,{234:230,182:231,250:$V$,251:$V01,252:$V11,253:$V21}),{20:[1,236]},o($VZ,$V_,{182:231,234:237,250:$V$,251:$V01,252:$V11,253:$V21}),o($Vr,[2,313],{303:238,276:$Vs}),o($V7,[2,14]),o($V7,[2,348]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,350]),{20:[2,21]},o($Vt,[2,299]),{221:[2,305]},{16:$V9,26:121,30:120,278:$Vu,291:$V8,298:239},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:240,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($VN,[2,301]),{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:241,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($VO,[2,309]),o($VP,[2,271]),{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:242,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($VR,[2,255]),{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:125,205:243,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($V7,[2,33]),o($V7,[2,360]),{20:[2,36]},{17:[2,34]},{16:[1,244]},o($VR,[2,72]),{16:$Ve,26:131,28:130,84:$V31,85:245,87:129,161:64,162:65,203:250,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:246,306:$V41},o($Vt,[2,74],{84:$VT}),o($Vt,[2,75]),o($Vt,[2,76],{84:$VT}),o($Vt,[2,77]),{16:$Ve,26:131,28:130,87:129,90:252,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:253,286:254,287:255,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,306:$V41},o($Vt,[2,79],{84:$VT}),o($Vt,[2,80]),{86:[1,257]},{86:[2,260],276:$V51,284:258},o([86,276],$VS),o($V7,[2,351],{32:260,17:[1,261]}),{20:[2,24],35:262,36:263,41:[1,264]},o($VW,[2,354]),{17:[1,265]},o($V7,[2,82]),o($V7,[2,362]),{20:[2,88]},{18:[1,266]},{18:[1,267]},{18:[1,268]},{17:[1,269]},{17:[1,270]},{16:$V9,26:33,30:55,96:271,291:$V8},{17:[1,272]},{18:[1,273]},{17:[2,142],158:274,159:[2,379],233:[1,275]},o($V61,[2,144]),o($V61,[2,145]),{17:[1,276]},{17:[1,277]},{18:[1,278]},{17:[1,279]},o([20,38,41,108,109,111,115,122,152,153,160,163],[2,100]),o($V7,[2,397],{240:280,17:[1,281]}),o([20,111,146,255,257,259,260,261,265,266,277,280],$V71,{169:282,172:283,173:$V81}),{16:$V9,26:33,30:285,291:$V8},o($VZ,[2,215]),o($VZ,[2,216]),o($VZ,[2,217]),o($VZ,[2,218]),o($VZ,[2,219]),o($V7,[2,393],{232:286,17:[1,287]}),{16:$V9,26:33,30:290,228:289,235:288,291:$V8},o($Vr,[2,314]),{221:[2,306],276:$VM,300:291},o($VN,[2,300]),o($VN,[2,302]),o($VP,[2,272],{288:292,276:$VQ}),{86:[1,293]},{17:[2,109]},{86:[1,294]},{318:295,319:296,320:$V91,321:$Va1},o($Vb1,[2,320]),o($Vb1,[2,321]),{16:$Ve,26:131,28:130,84:$V31,87:129,161:64,162:65,203:250,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:299,306:$V41},{233:$Vc1,272:$Vd1,274:$Ve1,305:$Vf1,306:$Vg1,309:$Vh1,310:$Vi1,311:$Vj1,312:$Vk1,313:$Vl1,314:$Vm1,315:$Vn1,316:$Vo1,317:$Vp1},{84:[1,314]},{86:[1,315]},{86:[2,266]},{86:[2,267]},{86:[2,268]},{233:$Vc1,272:$Vd1,274:$Ve1,305:$Vf1,306:$Vg1,308:[1,316],309:$Vh1,310:$Vi1,311:$Vj1,312:$Vk1,313:$Vl1,314:$Vm1,315:$Vn1,316:$Vo1,317:$Vp1},o($VB,[2,259]),{86:[2,261]},{16:$Ve,26:204,28:130,161:64,162:65,219:$Vf,278:$Vg,283:317,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($V7,[2,22]),o($V7,[2,352]),{20:[2,23]},{20:[2,25]},{17:[1,318]},{18:[1,319]},{26:322,80:323,112:320,114:321,291:$V8},{16:$V9,26:33,30:328,116:324,118:325,119:326,120:327,291:$V8},{123:329,125:330,126:331,131:332,133:$Vq1,134:$Vr1,135:$Vs1,136:$Vt1},o($VX,[2,136]),o($VX,[2,137]),{302:[1,337]},o($VX,[2,138]),{16:$V9,26:33,30:221,143:222,154:339,155:338,157:220,291:$V8,301:$VY},{159:[1,340]},{159:[2,380]},o($VX,[2,146]),o($VX,[2,147]),{16:$V9,26:33,30:343,164:341,166:342,291:$V8},o($VX,[2,98]),o($V7,[2,207]),o($V7,[2,398]),o($Vu1,[2,211],{242:344,249:345,183:346,258:347,254:348,111:$Vv1,146:$Vw1,255:$Vx1,257:$Vy1,259:$Vz1,260:$VA1}),o($VB1,[2,154]),{16:$V9,17:[1,356],26:33,30:328,120:357,174:355,291:$V8},{17:[2,209],248:[1,358]},o($V7,[2,201]),o($V7,[2,394]),{20:[2,202]},{17:[1,359],111:[1,360]},o($VC1,[2,199],{229:[1,361]}),{221:[2,307]},o($VP,[2,273]),o($Vt,[2,269]),o($Vt,[2,73]),o($VD1,[2,343]),{16:$Ve,26:131,28:130,84:$V31,87:129,161:64,162:65,203:250,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:362,306:$V41},o($VE1,[2,345]),o($VE1,[2,346]),{86:[1,363]},o($Vb1,[2,323]),{305:[1,364],313:[1,365]},{306:[1,367],307:[1,366]},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:368,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:369,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:370,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:371,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:372,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:373,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:374,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:375,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:376,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:377,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:378,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{16:$Ve,26:131,28:130,84:$V31,87:129,161:64,162:65,203:250,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:379,306:$V41},o($Vt,[2,78]),{26:380,87:382,291:$V8,294:[1,381]},{86:[2,262],276:$V51,284:383},{18:[1,384]},{16:$V9,26:33,30:386,39:385,291:$V8},{20:[1,387]},{17:[1,388]},{17:[2,257],84:$VC},{17:[2,258]},{20:[1,389]},{17:[1,390]},{17:$VU,51:391,110:$VV},o($Vw,[2,110]),o($VB,[2,111],{121:392,48:393,52:$Va}),{20:[1,394]},{17:[1,395]},{16:$V9,17:[1,397],26:33,30:396,291:$V8},{16:$V9,26:33,30:398,291:$V8},o($VF1,[2,119]),o($VF1,[2,120]),o($VZ,[2,121]),o($VZ,[2,122]),o([17,110,148,159,233,291],[2,310]),{20:[1,399]},{17:[1,400]},{17:[2,143]},{20:[1,401]},{16:$V9,20:[2,149],26:33,30:343,164:402,166:342,291:$V8},{17:[1,403]},o($VG1,[2,228],{243:404,261:[1,405]}),o($Vu1,[2,212]),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:406,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},o($VE1,[2,226]),o($VE1,[2,227]),o($VE1,[2,224]),{186:[1,410]},{256:[1,411]},o($VE1,[2,221]),o($VE1,[2,222]),o($VE1,[2,223]),{17:[1,412]},{18:[1,413]},{17:[2,256]},{17:[2,210]},o($VH1,[2,205]),{52:[1,414]},{162:415,301:$Vm},o($VD1,[2,344]),o($Vb1,[2,322]),o($Vb1,[2,324]),{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:416,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($Vb1,[2,325]),{307:[1,417]},o($Vb1,[2,331]),o($Vb1,[2,332]),o($Vb1,[2,333]),o($Vb1,[2,334]),o($Vb1,[2,335]),o($Vb1,[2,336]),o($Vb1,[2,337]),o($Vb1,[2,339]),o($Vb1,[2,340]),o($Vb1,[2,341]),o($Vb1,[2,342]),{86:[1,418]},o($VD1,[2,328],{84:$VT}),o($VD1,[2,329]),o($VD1,[2,330]),{86:[2,263]},{16:$V9,26:33,30:420,42:419,291:$V8},{20:[1,421]},{17:[1,422]},o($VX,[2,363],{113:423,17:[1,424]}),{20:[2,102],26:322,80:323,112:425,114:321,291:$V8},o($VX,[2,365],{117:426,17:[1,427]}),{16:$V9,20:[2,105],26:33,30:328,116:428,118:325,119:326,120:327,291:$V8},{17:[2,107]},o($Vn,$Vo,{78:75,79:76,26:77,80:78,49:429,291:$V8}),o($VB,[2,112]),o($VX,[2,367],{124:430,17:[1,431]}),{20:[2,114],123:432,125:330,126:331,131:332,133:$Vq1,134:$Vr1,135:$Vs1,136:$Vt1},o($VI1,[2,369],{127:433,137:434,141:436,138:[1,435],142:[1,437]}),{18:[1,438]},o($VB,[2,375],{132:439,147:440,148:$VJ1}),o($VX,[2,377],{156:442,17:[1,443]}),{16:$V9,20:[2,140],26:33,30:221,143:222,154:339,155:444,157:220,291:$V8,301:$VY},o($VX,[2,381],{165:445,17:[1,446]}),{20:[2,150]},{18:[1,447]},o($VK1,[2,231],{244:448,265:[1,449]}),{186:[1,450]},{17:[1,451]},o($VL1,[2,317],{318:295,319:296,320:$V91,321:$Va1}),o($VL1,[2,318]),o($VL1,[2,319]),o($VE1,[2,225]),o($VE1,[2,220]),o($VB1,[2,155]),{16:$V9,26:33,30:328,120:357,174:453,175:452,291:$V8},{17:[1,454]},o($VC1,[2,200]),o($Vb1,[2,338]),o($Vb1,[2,326]),o($Vb1,[2,327]),{20:[1,455]},{17:[1,456]},o($VW,[2,355],{40:457,17:[1,458]}),{16:$V9,20:[2,27],26:33,30:386,39:459,291:$V8},o($VX,[2,101]),o($VX,[2,364]),{20:[2,103]},o($VX,[2,104]),o($VX,[2,366]),{20:[2,106]},o($Vw,$Vx,{81:135,82:136,50:460,83:$Vy,88:$Vz,89:$VA}),o($VX,[2,113]),o($VX,[2,368]),{20:[2,115]},o($VM1,[2,371],{128:461,147:462,148:$VJ1}),o($VI1,[2,370]),{16:$VN1,26:464,139:463,289:$VO1,291:$V8},o($VI1,[2,125]),{16:$V9,26:33,30:468,143:467,291:$V8,301:$VY},{16:$V9,26:33,30:469,291:$V8},o($Vn,$Vo,{78:75,79:76,26:77,80:78,49:470,291:$V8}),o($VB,[2,376]),{16:$V9,26:33,30:471,291:$V8},o($VX,[2,139]),o($VX,[2,378]),{20:[2,141]},o($VX,[2,148]),o($VX,[2,382]),o([180,181],$V71,{172:283,167:472,169:473,173:$V81}),o($VP1,[2,233],{245:474,266:[1,475]}),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:476,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{16:$VN1,17:[1,478],26:464,139:479,262:477,289:$VO1,291:$V8},o($Vu1,[2,213]),{20:[1,480]},{17:[1,481]},{18:[1,482]},{17:[1,484],20:[2,357],43:483},{16:$V9,20:[2,30],26:33,30:420,42:485,291:$V8},o($VW,[2,26]),o($VW,[2,356]),{20:[2,28]},o($Vw,[2,253]),o($Vw,$Vo,{78:75,79:76,26:77,80:78,49:486,291:$V8}),o($VM1,[2,372]),o($VI1,[2,123],{111:[1,487]}),o($VQ1,[2,277]),o($VQ1,[2,278]),o($VQ1,[2,279]),o($VI1,[2,126]),o($VI1,[2,128],{145:488,111:[1,489]}),{52:[1,491],129:490},o($Vw,$Vx,{81:135,82:136,50:492,83:$Vy,88:$Vz,89:$VA}),o($VB,[2,133]),{20:[1,493]},{170:494,177:495,178:496,179:497,180:$VR1,181:$VS1},o($VT1,[2,247],{246:500,277:[1,501]}),{186:[1,502]},{17:[1,503]},{17:[1,504]},{18:[1,505]},{17:[2,282],276:$VU1,290:506},o($VB1,[2,385],{176:508,17:[1,509]}),{16:$V9,20:[2,157],26:33,30:328,120:357,174:453,175:510,291:$V8},{16:$V9,26:33,30:290,228:289,235:512,236:511,291:$V8},{20:[2,29]},{20:[2,358]},{20:[2,31]},{17:$VU,51:513,110:$VV},{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:514,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},o($VI1,[2,129]),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:515,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},o($VM1,[2,373],{130:516,147:517,148:$VJ1}),{17:[1,518]},{17:$VU,51:519,110:$VV},o($VH1,[2,383],{168:520,17:[1,521]}),{20:[2,187],171:522,200:523,202:$VV1},o($VW1,[2,159],{177:495,178:496,179:497,170:525,180:$VR1,181:$VS1}),o($VX1,[2,161]),{16:$V9,26:33,30:526,291:$V8},o($VZ,[2,162]),{182:527,250:$V$,251:$V01,252:$V11,253:$V21},{20:[2,250],247:528,280:[1,529]},{278:[1,530],279:[1,531]},{16:$VN1,17:[1,533],26:464,139:535,267:532,270:534,289:$VO1,291:$V8},o($VK1,[2,232]),o($VG1,[2,229]),{16:$VN1,26:464,139:537,263:536,289:$VO1,291:$V8},{17:[2,283]},{16:$VN1,26:464,139:538,289:$VO1,291:$V8},o($VB1,[2,156]),o($VB1,[2,386]),{20:[2,158]},{20:[1,539]},{16:$V9,20:[2,203],26:33,30:290,228:289,235:512,236:540,291:$V8},{17:[2,116]},o($VI1,[2,124]),o($VI1,[2,132]),o($Vw,$Vo,{78:75,79:76,26:77,80:78,49:541,291:$V8}),o($VM1,[2,374]),{18:[1,542]},{17:[2,118]},o($VH1,[2,151]),o($VH1,[2,384]),{20:[2,152]},{17:[1,543],206:[1,544]},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:545,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($VW1,[2,160]),{52:[1,549],111:$Vv1,146:$Vw1,183:546,184:547,185:548,186:[1,550],254:348,255:$Vx1,257:$Vy1,258:347,259:$Vz1,260:$VA1},o($VZ,[2,163]),{20:[2,208]},{278:[1,551],279:[1,552]},{17:[1,553]},{17:[1,554]},{17:[1,555]},{18:[1,556]},{17:[2,243],275:557,276:$VY1},o($VZ1,[2,238],{271:[1,559],272:[1,560],273:[1,561],274:[1,562]}),{20:[1,563]},{17:[1,564]},{17:[2,284],276:$VU1,290:565},o($VH1,[2,395],{237:566,17:[1,567]}),{20:[2,204]},{17:$VU,51:568,110:$VV},{144:569,146:$V_1},{20:[2,188]},{17:[1,571]},o([17,206],[2,183]),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:572,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},o($VX1,[2,165]),{17:[1,573]},{17:[2,166]},{187:[1,574]},{17:[1,575]},{17:[1,576]},o($VT1,[2,248]),o($VT1,[2,249]),o($VP1,[2,234]),{16:$VN1,26:464,139:535,268:577,270:578,289:$VO1,291:$V8},{17:[2,244]},{16:$VN1,26:464,139:535,270:579,289:$VO1,291:$V8},o($VZ1,[2,239]),o($VZ1,[2,240]),o($VZ1,[2,241]),o($VZ1,[2,242]),o($VG1,[2,399],{264:580,17:[1,581]}),{16:$VN1,20:[2,280],26:464,139:537,263:582,289:$VO1,291:$V8},{17:[2,285]},o($VH1,[2,206]),o($VH1,[2,396]),{17:[1,583]},{20:[1,584]},{141:585,142:[1,586]},{18:[1,587]},o($VX1,[2,164]),{18:[1,588]},{17:[2,167],148:[1,589]},{20:[2,251]},{20:[2,252]},{20:[1,590]},{17:[1,591]},{17:[2,245],275:592,276:$VY1},o($VG1,[2,230]),o($VG1,[2,400]),{20:[2,281]},{20:[1,593]},o($VI1,[2,127]),{17:[1,594]},{16:$V9,26:33,30:468,291:$V8},{146:$V$1,207:595,209:596},{146:$V02,189:598,193:599},{188:[1,601]},o($VP1,[2,401],{269:602,17:[1,603]}),{16:$VN1,20:[2,236],26:464,139:535,268:604,270:578,289:$VO1,291:$V8},{17:[2,246]},{17:[2,117]},{20:[2,130],144:605,146:$V_1},{20:[1,606]},{17:[1,607]},{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:608,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{20:[1,609],191:610,196:611,198:[1,612],199:[1,613]},o($V12,[2,172],{193:599,189:614,146:$V02}),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:615,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{17:[2,168]},o($VP1,[2,235]),o($VP1,[2,402]),{20:[2,237]},{20:[2,131]},{17:[1,617],20:[2,391],208:616},{20:[2,192],146:$V$1,207:618,209:596},{194:[1,619]},o($VX1,[2,387],{190:620,17:[1,621]}),{20:[1,622]},{194:[1,623]},{194:[2,177]},{194:[2,178]},o($V12,[2,173]),{194:[1,624]},{20:[2,189]},{20:[2,392]},{20:[2,193]},{16:$Ve,26:131,28:130,87:129,161:64,162:65,201:626,203:625,204:$V22,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},o($VX1,[2,169]),o($VX1,[2,388]),o($VX1,[2,389],{192:628,17:[1,629]}),{16:$Ve,17:[1,632],26:131,28:130,84:$V31,85:408,87:129,140:633,161:64,162:65,195:630,197:631,200:634,201:635,202:$VV1,203:256,204:$V22,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{16:$Ve,17:[1,637],26:131,28:130,84:$V31,85:408,87:129,140:633,161:64,162:65,195:636,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{17:[2,190]},{17:[2,191]},{16:[1,638],26:639,291:$V8},o($VX1,[2,170]),o($VX1,[2,390]),{17:[1,640]},{17:[1,641]},{18:[1,642]},{17:[1,643]},{17:[2,179]},{17:[2,180]},o([20,146,198,199],[2,171]),{18:[1,644]},{17:[2,184]},{17:[2,185],84:[1,645]},{20:[2,174]},{20:[2,175]},{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:647,161:64,162:65,197:646,200:634,201:635,202:$VV1,203:256,204:$V22,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},o($V32,[2,181]),{16:$Ve,26:131,28:130,84:$V31,85:408,87:129,140:647,161:64,162:65,203:256,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,285:247,286:248,287:409,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm,304:407,306:$V41},{16:$Ve,26:131,28:130,87:129,161:64,162:65,203:125,205:648,219:$Vf,278:$Vg,279:$Vv,281:126,283:127,291:$V8,292:$Vh,293:$Vi,294:$Vj,295:$Vk,296:$Vl,301:$Vm},{17:[1,649]},{17:[1,650]},{86:[1,651]},{20:[1,652]},{20:[1,653]},{17:[2,186]},{20:[2,176]},o($V32,[2,182])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],54:[2,84],60:[2,19],145:[2,86],173:[2,16],176:[2,21],178:[2,305],190:[2,36],191:[2,34],211:[2,88],244:[2,109],253:[2,266],254:[2,267],255:[2,268],258:[2,261],262:[2,23],263:[2,25],275:[2,380],288:[2,202],291:[2,307],323:[2,258],340:[2,143],357:[2,256],358:[2,210],383:[2,263],391:[2,107],402:[2,150],425:[2,103],428:[2,106],432:[2,115],444:[2,141],459:[2,28],483:[2,29],484:[2,358],485:[2,31],506:[2,283],510:[2,158],513:[2,116],519:[2,118],522:[2,152],528:[2,208],540:[2,204],543:[2,188],549:[2,166],557:[2,244],565:[2,285],575:[2,251],576:[2,252],582:[2,281],592:[2,246],593:[2,117],601:[2,168],604:[2,237],605:[2,131],612:[2,177],613:[2,178],616:[2,189],617:[2,392],618:[2,193],625:[2,190],626:[2,191],634:[2,179],635:[2,180],638:[2,184],640:[2,174],641:[2,175],651:[2,186],652:[2,176]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]),         
        

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),

        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),        
    };

    //next state transition table
    const NEXT_STATE = {
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',
        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',
        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([                        
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.find.else', 1]
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],
        [ 'import.block', 1 ],
        [ 'type.block', 1 ],
        [ 'const.block', 1 ],         
        [ 'entity.mixes', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //exceptions of NEWLINE_STOPPER in the case of indent happens
    const NEWLINE_STOPPER_INDENT_EXCEPTION = new Set([           
        'import',
        'type',     
        'const'
    ]);

    const FINAL_STATE = {        
        'entity.interface.find.else': 'entity.interface.find'
    };

    const SUPPORT_WORD_OPERATOR = new Set([
        'entity.interface.find.when',
        'entity.interface.return.when',
        'entity.associations.item',
        'entity.associations.item.block.when'                
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            if (NEWLINE_STOPPER_INDENT_EXCEPTION.has(this.lastState)) {
                this.markNewlineStop(false);
            }

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            let finalStateToExit = FINAL_STATE[last];

            if (finalStateToExit) {
                do {
                    last = this.stack.pop(); 
                    if (DBG_MODE) {
                        console.log('< exit state:', last, '\n');
                    }
                } while (last !== finalStateToExit);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 295;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 16;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 16;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 16;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 294;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 292;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 278;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 278;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 289;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 296;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 279;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 293;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     

                                if (SUPPORT_WORD_OPERATOR.has(state.lastState)) {
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {
                                    /*
                                    if (STATE_STOPPER[state.lastState] && STATE_STOPPER[state.lastState].has(yy_.yytext)) {
                                        state.exitState(state.lastState);                                                                        
                                    }*/

                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                }                                

                                return 291;
                            
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true},"REPARSE":{"rules":[29,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}